<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YinZi‘Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yinzi.me/"/>
  <updated>2021-08-11T02:27:24.671Z</updated>
  <id>http://blog.yinzi.me/</id>
  
  <author>
    <name>YinZi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用Docker VNC在无图形服务器上跑图形桌面</title>
    <link href="http://blog.yinzi.me/post/nogui_linux_docker_vnc_matlab/"/>
    <id>http://blog.yinzi.me/post/nogui_linux_docker_vnc_matlab/</id>
    <published>2021-08-10T15:14:32.000Z</published>
    <updated>2021-08-11T02:27:24.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用Docker-VNC在无图形服务器上跑图形桌面"><a href="#利用Docker-VNC在无图形服务器上跑图形桌面" class="headerlink" title="利用Docker VNC在无图形服务器上跑图形桌面"></a>利用Docker VNC在无图形服务器上跑图形桌面</h1><p>现在很多服务器都是不提供用户图形界面的，但是科研人员有时候需要在服务器上运行图形界面，比如使用图形化的Matlab 处理数据等。虽然这时候可以选择安装一个 gnome 或者 xfce4 等桌面环境，但是通常服务器上是有很多用户的，这样会可能会占用一定的资源或者把环境搞乱掉，影响其他用户使用。</p>
<p>比较好的方案是起一个带 VNC 的 Docker 容器，省事还干净，不会影响到其他人。</p>
<p>以下以在一个装有 Docker 的无图形界面服务器上安装运行 Matlab 为例，为大家讲解具体的操作。</p>
<p>假设服务器 IP 是 192.168.101.32</p>
<ol>
<li>开启 带 VNC 环境的docker容器，将 matlab 所在路径(假设安装到了本机的/share/matlab)映射到容器内的某个路径，把 5901 端口映射到本地服务器的 15901(也可以写成别的)。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v /share/matlab:/matlab -p 15901:5901 accetto/ubuntu-vnc-xfce-chromium-g3</span><br></pre></td></tr></table></figure>
<ol>
<li><p>VNC 客户端访问192.168.101.32:15901即可访问桌面</p>
</li>
<li><p>访问桌面后，在VNC 连上的桌面上打开一个终端，然后在该终端中输入如下命令</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 将APT源换成清华镜像源</span><br><span class="line">sudo sed -i 's/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list</span><br><span class="line"><span class="meta">#</span> 安装打开图形的必要依赖：JRE</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install default-jre</span><br><span class="line"><span class="meta">#</span> 执行 matlab</span><br><span class="line">/matlab/R2021a/bin/matlab</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;利用Docker-VNC在无图形服务器上跑图形桌面&quot;&gt;&lt;a href=&quot;#利用Docker-VNC在无图形服务器上跑图形桌面&quot; class=&quot;headerlink&quot; title=&quot;利用Docker VNC在无图形服务器上跑图形桌面&quot;&gt;&lt;/a&gt;利用Docker VN
    
    </summary>
    
      <category term="Server" scheme="http://blog.yinzi.me/categories/Server/"/>
    
    
      <category term="Server" scheme="http://blog.yinzi.me/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>缅怀袁隆平院士</title>
    <link href="http://blog.yinzi.me/post/may-the-fragrant-paddy%E2%80%93be-with-you/"/>
    <id>http://blog.yinzi.me/post/may-the-fragrant-paddy–be-with-you/</id>
    <published>2021-05-21T16:00:00.000Z</published>
    <updated>2021-05-22T11:56:43.157Z</updated>
    
    <content type="html"><![CDATA[<p>今天的心情很复杂，通宵写完代码后看到的第一个消息就是这个，真希望真的是谣言。袁隆平爷爷是我们90 后从小就在课本上看到人物，是我小时候最敬佩的科学家之一。如今我自己也在科研的学习道路上苦苦挣扎，更是深知袁隆平院士的不易和伟大。</p>
<p>时光不会给任何人留情面，吾辈应该好好珍惜宝贵的时光，美好的时代；应该追随前辈的身影，从事科学研究直到自己生命最后一刻，就像袁爷爷一样。天堂也许也有一片水稻田吧，愿稻香常伴您。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天的心情很复杂，通宵写完代码后看到的第一个消息就是这个，真希望真的是谣言。袁隆平爷爷是我们90 后从小就在课本上看到人物，是我小时候最敬佩的科学家之一。如今我自己也在科研的学习道路上苦苦挣扎，更是深知袁隆平院士的不易和伟大。&lt;/p&gt;
&lt;p&gt;时光不会给任何人留情面，吾辈应该
    
    </summary>
    
      <category term="君子以自强不息" scheme="http://blog.yinzi.me/categories/%E5%90%9B%E5%AD%90%E4%BB%A5%E8%87%AA%E5%BC%BA%E4%B8%8D%E6%81%AF/"/>
    
    
      <category term="ConfusingMind" scheme="http://blog.yinzi.me/tags/ConfusingMind/"/>
    
  </entry>
  
  <entry>
    <title>一起来学 Einsum，Einops</title>
    <link href="http://blog.yinzi.me/post/learn-einsum-and-einops/"/>
    <id>http://blog.yinzi.me/post/learn-einsum-and-einops/</id>
    <published>2021-03-02T16:00:00.000Z</published>
    <updated>2021-03-03T07:41:08.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一起来学-Einsum，Einops"><a href="#一起来学-Einsum，Einops" class="headerlink" title="一起来学 Einsum，Einops"></a>一起来学 Einsum，Einops</h1><h2 id="Einsum"><a href="#Einsum" class="headerlink" title="Einsum"></a>Einsum</h2><h3 id="啥？做啥的？学这玩意儿干啥？"><a href="#啥？做啥的？学这玩意儿干啥？" class="headerlink" title="啥？做啥的？学这玩意儿干啥？"></a>啥？做啥的？学这玩意儿干啥？</h3><p>numpy, pytorch, tensorflow中有个函数叫做einsum, 它的来源是Einstein notation, 中文译作爱因斯坦求和约定，这约定是由阿尔伯特·爱因斯坦于1916年提出的。</p>
<p>采用爱因斯坦求和约定，可以使数学表达式显得简洁明快。而将这种简洁记法运用到矩阵运算代码中会带来什么好处呢？</p>
<p>我们来看numpy官方关于einsum的文档是怎么说的，让我们来 <del>抄</del> 引用一下</p>
<blockquote>
<p>Using the Einstein summation convention, many common multi-dimensional, linear algebraic array operations can be represented in a simple fashion. In <em>implicit</em> mode <a href="https://numpy.org/doc/stable/reference/generated/numpy.einsum.html#numpy.einsum" target="_blank" rel="noopener"><code>einsum</code></a> computes these values.</p>
</blockquote>
<p>许多常见的多维度操作都可以被einsum这一个函数表示，那么有哪些常见操作呢？<del>抄之</del> 引用之</p>
<blockquote>
<p>A non-exhaustive list of these operations, which can be computed by <a href="https://numpy.org/doc/stable/reference/generated/numpy.einsum.html#numpy.einsum" target="_blank" rel="noopener"><code>einsum</code></a>, is shown below along with examples:</p>
<ul>
<li>Trace of an array, <a href="https://numpy.org/doc/stable/reference/generated/numpy.trace.html#numpy.trace" target="_blank" rel="noopener"><code>numpy.trace</code></a>.</li>
<li>Return a diagonal, <a href="https://numpy.org/doc/stable/reference/generated/numpy.diag.html#numpy.diag" target="_blank" rel="noopener"><code>numpy.diag</code></a>.</li>
<li>Array axis summations, <a href="https://numpy.org/doc/stable/reference/generated/numpy.sum.html#numpy.sum" target="_blank" rel="noopener"><code>numpy.sum</code></a>.</li>
<li>Transpositions and permutations, <a href="https://numpy.org/doc/stable/reference/generated/numpy.transpose.html#numpy.transpose" target="_blank" rel="noopener"><code>numpy.transpose</code></a>.</li>
<li>Matrix multiplication and dot product, <a href="https://numpy.org/doc/stable/reference/generated/numpy.matmul.html#numpy.matmul" target="_blank" rel="noopener"><code>numpy.matmul</code></a> <a href="https://numpy.org/doc/stable/reference/generated/numpy.dot.html#numpy.dot" target="_blank" rel="noopener"><code>numpy.dot</code></a>.</li>
<li>Vector inner and outer products, <a href="https://numpy.org/doc/stable/reference/generated/numpy.inner.html#numpy.inner" target="_blank" rel="noopener"><code>numpy.inner</code></a> <a href="https://numpy.org/doc/stable/reference/generated/numpy.outer.html#numpy.outer" target="_blank" rel="noopener"><code>numpy.outer</code></a>.</li>
<li>Broadcasting, element-wise and scalar multiplication, <a href="https://numpy.org/doc/stable/reference/generated/numpy.multiply.html#numpy.multiply" target="_blank" rel="noopener"><code>numpy.multiply</code></a>.</li>
<li>Tensor contractions, <a href="https://numpy.org/doc/stable/reference/generated/numpy.tensordot.html#numpy.tensordot" target="_blank" rel="noopener"><code>numpy.tensordot</code></a>.</li>
<li>Chained array operations, in efficient calculation order, <a href="https://numpy.org/doc/stable/reference/generated/numpy.einsum_path.html#numpy.einsum_path" target="_blank" rel="noopener"><code>numpy.einsum_path</code></a>.</li>
</ul>
</blockquote>
<p>”奥这样啊，看起来还行“，看你若有所思的样子我就知道你在想什么。</p>
<p>你可能会说这不就是一种语法糖么？相当于原来我用代码抄公式要花5行代码，现在就一行了，但是so what? 只是个小trick罢了。</p>
<p>的确如果只是处理较低的维度矩阵的话，似乎是这样。</p>
<p>但当我们涉及到需要频繁处理复杂的高维度矩阵操作的时候，这个方法的简洁高效性就体现出来了。</p>
<p>让我们来一些复杂点的例子。</p>
<p>首先让我们来看看对一个7维矩阵中的部分维度进行转置的例子</p>
<p>假设我们有一个矩阵$A$，它的形状为$1\times3\times4\times2\times3\times64\times64$，现在希望互换部分维度，转化为$1\times3\times4\times64\times64\times2\times3$，我们来看看两种方法分别做起来是什么样子的:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.randn(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">64</span>,<span class="number">64</span>)</span><br><span class="line">legacy_result = a.transpose(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>)	<span class="comment"># 通常方法</span></span><br><span class="line">einsum_result = np.einsum(<span class="string">"bcijkwh-&gt;bciwhjk"</span>, a)	<span class="comment"># Einsum</span></span><br><span class="line">print((legacy_result==einsum_result).all())	 <span class="comment"># 查看是否等价</span></span><br><span class="line"><span class="comment">#----输出True</span></span><br></pre></td></tr></table></figure>
<p>从上面这个例子中，我们可以看出利用einsum的任意标签特性，我们可以给各个维度赋予一个有含义的标签（比如b代表batch，c代表channel等等）。如此便比比直接使用index操作更加直观可读，不容易出错。</p>
<p>但这也不过如此，einsum的强大之处不只体现在这里。</p>
<p>我们再来看一个例子。</p>
<p>如何用写一个维度为$1\times3\times4\times2\times3\times64\times64$和$1\times3\times4\times(2\times3)^T\times64\times64$的倒数第4，3个维度的矩阵积并得到$1\times3\times4\times2\times2\times64\times64$的结果?</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.randn(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">64</span>,<span class="number">64</span>)</span><br><span class="line">b = np.random.randn(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">64</span>,<span class="number">64</span>)</span><br><span class="line"><span class="comment"># 传统做法, 先把要乘的转置到最后，完成运算后再转置回来</span></span><br><span class="line">a1=a.transpose(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>) 		<span class="comment"># Shape(1, 3, 4, 64, 64, 2, 3)</span></span><br><span class="line">b1=b.transpose(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>)  <span class="comment"># Shape(1, 3, 4, 64, 64, 3, 2)</span></span><br><span class="line">legacy_result = np.matmul(a1,b1) <span class="comment"># Shape(1, 3, 4, 64, 64, 2, 2)</span></span><br><span class="line">legacy_result = legacy_result.transpose(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>)  <span class="comment"># Shape(1, 3, 4, 2, 2, 64, 64)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 很麻烦对不对？那如果用einsum来做呢？</span></span><br><span class="line">einsum_result = np.einsum(<span class="string">'...ijhw,...kjhw-&gt;...ikhw'</span>, a,b) <span class="comment"># Shape(1, 3, 4, 2, 2, 64, 64)</span></span><br><span class="line"></span><br><span class="line">print((legacy_result==einsum_result).all())		<span class="comment"># 我们来验证一下结果是否一致</span></span><br><span class="line"><span class="comment"># --------输出--------</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>
<p>非常amazing是不是？显然einsum在这个例子上体现出了绝对的优越性。</p>
<h3 id="不升华一下似乎很难收场-´ο｀"><a href="#不升华一下似乎很难收场-´ο｀" class="headerlink" title="不升华一下似乎很难收场(´ο｀*)))~"></a>不升华一下似乎很难收场(´ο｀*)))~</h3><p>其实有时候同样的事情换个角度看就会有很大的不同。你可以说这只是一种新的记法，记法嘛，无外乎只是写起来麻烦些和简单些的区别，但是你往往会发现不同的记法往往不仅仅是节省墨水，更可以为你提供更简洁的思维封装单元，同时还能腾出更多的思维时间。</p>
<p>就像集成电路里的芯片，14纳米和5纳米的芯片虽然整体实现的功能完全一样，尺寸听起来似乎也不是差得很多，但它在相同资源空间内带来的不同堆集效应是无法忽视的。</p>
<p>回到我们探讨的问题上，你往往会发现，随着矩阵维度的增高，你的精力会逐渐被思考这个地方该如何转置，那个维度该怎么堆叠这些无关宏观目标的具体细节所分散。</p>
<p>(好吧，听起来丝毫没有说服力~)</p>
<p>在此我只是试图浅薄地理解由Numpy最早引入的einsum函数在具体工程问题上的一些好处，更深层次的东西我就没有能力再去探讨了。</p>
<p>不过说实在的，我目前也只是直觉上觉得学这个东西具有巨大的作用。实质上我也是刚开始学而已，暂时也说不出什么太实质性的感悟。只是我在读<a href="https://github.com/lucidrains/vit-pytorch/blob/main/vit_pytorch/vit_pytorch.py" target="_blank" rel="noopener"><code>vit-pytorch</code></a> 代码的时候，发现它对Transformer的核心实现大量的采用了einsum以及受它启发的einops，感觉非常简洁明快，并且在你理解它的意思后，会发现这种符号记法远远比<code>np.inner(a,b)</code>又或是<code>transpose(2,1,3,2)</code>来得直观地多。</p>
<p>正是它给我带来的这种直观印象促使了我决定放下手头的工作，好好地把它学一下，我相信它会给我以后的工作和思考带来持续的好处，从这个角度看，我这么做是很值得的。百忙中走一步闲棋，后效如何，还待他日探讨。</p>
<p>（当然我才不会承认还有一部分原因是因为这个方法冠有爱因斯坦的鼎鼎大名，实为炫技装逼之利器也~）</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>[1] <a href="https://numpy.org/doc/stable/reference/generated/numpy.einsum.html" target="_blank" rel="noopener">Numpy 文档</a></p>
<p>[2] Einstein notation, <a href="https://en.wikipedia.org/wiki/Einstein_notation" target="_blank" rel="noopener">Wikipedia</a></p>
<p>[3] 爱因斯坦求和约定，<a href="https://baike.baidu.com/item/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E6%B1%82%E5%92%8C%E7%BA%A6%E5%AE%9A/2477100?fr=aladdin" target="_blank" rel="noopener">百度词条</a></p>
<h2 id="Einops"><a href="#Einops" class="headerlink" title="Einops"></a>Einops</h2><h3 id="这又是啥？-⊙o⊙-学不动了，告辞。"><a href="#这又是啥？-⊙o⊙-学不动了，告辞。" class="headerlink" title="这又是啥？(⊙o⊙)学不动了，告辞。"></a>这又是啥？(⊙o⊙)学不动了，告辞。</h3><p>哎别走嘛，来来，我们来看个小视频。（骗你的，其实是个动图）</p>
<p><img src="http://arogozhnikov.github.io/images/einops/einops_video.gif" alt="官方文档盗过来的一张动图"></p>
<p>不得不说作者还是蛮会的，这个动图简洁明了，相信你看完之后一定会很直观地get到这个项目能实现什么效果：厉害吧？你要不要学？</p>
<p>接着放几个大佬的Tweets评价来背书：快来用呀，大佬们都说好哦~</p>
<p>还支持Numpy，Pytorch，TensorFlow，Jax等诸多框架，哇，满满的都是高级感呀，2.5K个Star一点也不奇怪。</p>
<p>不知道你有没有心动了，反正我是心动了，感觉学完就能和爱因斯坦以及硅谷大佬肩并肩，走上人生巅峰啊~  <code>^▽^</code></p>
<p>（醒醒，你只是为了读懂别人的代码）</p>
<p>那就一起来看看吧~。<br>（原来哄自己学习也这么辛苦的么）</p>
<p>额，突然不想写了，先酱紫吧，回头再更，拜~(害，还是没哄成)</p>
<h3 id="Reference-1"><a href="#Reference-1" class="headerlink" title="Reference"></a>Reference</h3><p>[1]<a href="https://github.com/arogozhnikov/einops#supported-frameworks" target="_blank" rel="noopener">https://github.com/arogozhnikov/einops#supported-frameworks</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一起来学-Einsum，Einops&quot;&gt;&lt;a href=&quot;#一起来学-Einsum，Einops&quot; class=&quot;headerlink&quot; title=&quot;一起来学 Einsum，Einops&quot;&gt;&lt;/a&gt;一起来学 Einsum，Einops&lt;/h1&gt;&lt;h2 id=&quot;E
    
    </summary>
    
      <category term="AI" scheme="http://blog.yinzi.me/categories/AI/"/>
    
    
      <category term="AI" scheme="http://blog.yinzi.me/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>MacOS Acrobat Pro DC 屏蔽更新</title>
    <link href="http://blog.yinzi.me/post/acrobat-updater-remove/"/>
    <id>http://blog.yinzi.me/post/acrobat-updater-remove/</id>
    <published>2020-07-06T16:00:00.000Z</published>
    <updated>2021-03-03T07:03:52.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装与去付费"><a href="#安装与去付费" class="headerlink" title="安装与去付费"></a>安装与去付费</h1><p>磁力链：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magnet:?xt=urn:btih:AD362136562FC716C6CACACF926CEA55EF5E25B2&amp;dn=Adobe_Acrobat_DC_v20.006.20042__TNT_Torrentmac.net.dmg</span><br></pre></td></tr></table></figure>
<h1 id="屏蔽更新"><a href="#屏蔽更新" class="headerlink" title="屏蔽更新"></a>屏蔽更新</h1><p>Reference:<a href="https://www.reddit.com/r/AdobeZii/comments/fkzqol/solved_how_to_disable_adobe_acrobat_reader_dc/" target="_blank" rel="noopener">https://www.reddit.com/r/AdobeZii/comments/fkzqol/solved_how_to_disable_adobe_acrobat_reader_dc/</a></p>
<blockquote>
<p>I found that this solution helps:</p>
<p>Right-click Adobe Acrobat.app, go to “Contents” -&gt; “Plugins” and delete Updater.acroplugin.</p>
</blockquote>
<p>运行以下命令即可：</p>
<p><code>rm -rf /Applications/Adobe Acrobat DC/Adobe Acrobat.app/Contents/Plugins/Updater.acroplugin</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装与去付费&quot;&gt;&lt;a href=&quot;#安装与去付费&quot; class=&quot;headerlink&quot; title=&quot;安装与去付费&quot;&gt;&lt;/a&gt;安装与去付费&lt;/h1&gt;&lt;p&gt;磁力链：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
      <category term="实用技巧" scheme="http://blog.yinzi.me/categories/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Adobe" scheme="http://blog.yinzi.me/tags/Adobe/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 部署VMESS+TCP+TLS</title>
    <link href="http://blog.yinzi.me/post/depoly_vmess_tcp_tls_on_centos7/"/>
    <id>http://blog.yinzi.me/post/depoly_vmess_tcp_tls_on_centos7/</id>
    <published>2020-06-16T16:00:00.000Z</published>
    <updated>2021-03-03T07:03:52.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>由于忍不住剁手新入一台韩国Kdatacenter的VPS，从南京联通出去的链路还是不错的，如图所示。<br><img src="https://i.loli.net/2020/06/17/tvlpqiFUckWEjsQ.png" alt="image.png"></p>
<p>于是乎，需要给它重新配置一些东西。默认给的操作系统是CentOS6，我发工单改成了CentOS7。它家工单系统蛮有意思的，我半夜三点钟发居然十分钟后就回复了，看来是有其他时区的客服。</p>
<p>最近发现官方社区出了TCP+TLS的指南，不再是以前的Websocket+TLS，而是参照Trojan的TCP+TLS的思路，用Haproxy作为443前端根据流量特征进行中转，具体来说就是，如果接入流量真的是http流量的话，那么就送到nginx后端，如果是其他流量的话，那么就把它送到v2ray的VMESS端口里。以前的方式是固定web path里的统统用websocket反向代理到VMESS端口。现在这种TCP+TLS的方式根据测试延迟会比以前低一些。</p>
<p>我个人第一想法是感觉额外添加一个Haproxy出来不够美观，<del>最近时间紧，我就不要去探索了，2333</del>~~   之前没看仔细，已经有人搭了只靠nginx转发的了。</p>
<h5 id="以下所有操作默认都在root用户中执行"><a href="#以下所有操作默认都在root用户中执行" class="headerlink" title="以下所有操作默认都在root用户中执行"></a>以下所有操作默认都在root用户中执行</h5><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h3 id="1-域名解析"><a href="#1-域名解析" class="headerlink" title="1.域名解析"></a>1.域名解析</h3><p>我的域名是在Cloudflare上解析的，登录Cloudflare，之后创建A记录到我服务器的IP即可。</p>
<h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2.安装nginx"></a>2.安装nginx</h3><p>最省事的方法是直接用APT或者YUM装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y vim</span><br><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure>
<p>修改配置<code>vim /etc/nginx/nginx.conf</code>，找到server_name这一项，将localhost改为自己的域名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;	#记得改成你自己的域名</span><br><span class="line">    .....</span><br></pre></td></tr></table></figure>
<h3 id="3-申请证书"><a href="#3-申请证书" class="headerlink" title="3.申请证书"></a>3.申请证书</h3><p>要用正常的TLS得有签名的证书才行，这里我们采用certbot来实现 lets encrypt证书的申请和自动续期</p>
<h4 id="3-1-下载certbot"><a href="#3-1-下载certbot" class="headerlink" title="3.1 下载certbot"></a>3.1 下载certbot</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install certbot python2-certbot-nginx</span><br></pre></td></tr></table></figure>
<h4 id="3-2-选择Certbot的运行方式"><a href="#3-2-选择Certbot的运行方式" class="headerlink" title="3.2 选择Certbot的运行方式"></a>3.2 选择Certbot的运行方式</h4><p>由于我们不需要nginx直接监听443，因此这里建议仅生成证书</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot certonly --nginx</span><br></pre></td></tr></table></figure>
<p>成功之后证书存在</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate /etc/letsencrypt/live/your_domain/fullchain.pem; # managed by Certbot</span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/your_domain/privkey.pem; # managed by Certbot</span><br></pre></td></tr></table></figure>
<h4 id="3-3-设定自动续期"><a href="#3-3-设定自动续期" class="headerlink" title="3.3 设定自动续期"></a>3.3 设定自动续期</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' &amp;&amp; certbot renew -q" | sudo tee -a /etc/crontab &gt; /dev/null</span><br></pre></td></tr></table></figure>
<h3 id="4-配置Haproxy"><a href="#4-配置Haproxy" class="headerlink" title="4.配置Haproxy"></a>4.配置Haproxy</h3><h4 id="4-1-编译openssl-1-1-1"><a href="#4-1-编译openssl-1-1-1" class="headerlink" title="4.1 编译openssl 1.1.1"></a>4.1 编译openssl 1.1.1</h4><h5 id="我们需要openssl1-1-1要支持TLS-1-3"><a href="#我们需要openssl1-1-1要支持TLS-1-3" class="headerlink" title="我们需要openssl1.1.1要支持TLS 1.3"></a>我们需要openssl1.1.1要支持TLS 1.3</h5><p>安装依赖</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall 'Development Tools'</span><br></pre></td></tr></table></figure>
<p>下载源码</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz</span><br><span class="line">tar -xzf openssl-1.1.1g.tar.gz</span><br></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd openssl-OpenSSL_1_1_1g/</span><br><span class="line"><span class="meta">#</span> 通常可以直接使用config (from Ubuntu 13.04, x64, 本文在CentOS7.3测试通过):</span><br><span class="line">./config --prefix=/opt/openssl-1.1.1 shared</span><br><span class="line"><span class="meta">#</span>编译</span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span>安装</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="4-2-编译haproxy"><a href="#4-2-编译haproxy" class="headerlink" title="4.2 编译haproxy"></a>4.2 编译haproxy</h4><p>源码下载</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y make gcc perl pcre-devel zlib-devel pcre2 pcre2-devel</span><br><span class="line">wget http://www.haproxy.org/download/1.9/src/haproxy-1.9.15.tar.gz</span><br><span class="line">tar -zxvf haproxy-1.9.15.tar.gz</span><br><span class="line">cd haproxy-1.9.15/</span><br></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make TARGET=linux2628 CPU=native USE_PCRE2=1 USE_PCRE2_JIT=1 USE_OPENSSL=1 SSL_LIB=/opt/openssl-1.1.1/lib SSL_INC=/opt/openssl-1.1.1/include USE_ZLIB=1</span><br><span class="line">make install</span><br><span class="line"><span class="meta">#</span> Check your sbin path at /usr/local/sbin</span><br><span class="line">cp haproxy /usr/local/sbin/haproxy</span><br></pre></td></tr></table></figure>
<p>创建配置文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/haproxy/</span><br><span class="line">vim /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>
<p>代码内容如下</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    log /dev/log local0</span><br><span class="line">    log /dev/log local1 notice</span><br><span class="line">    #chroot /var/lib/haproxy</span><br><span class="line">    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners</span><br><span class="line">    stats timeout 30s</span><br><span class="line">    #user haproxy</span><br><span class="line">    #group haproxy</span><br><span class="line">    daemon</span><br><span class="line">    ca-base /etc/ssl/certs</span><br><span class="line">    crt-base /etc/ssl/private</span><br><span class="line"></span><br><span class="line">    # 仅使用支持 FS 和 AEAD 的加密套件</span><br><span class="line">    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384</span><br><span class="line">    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256</span><br><span class="line">    # 禁用 TLS 1.2 之前的 TLS</span><br><span class="line">    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11</span><br><span class="line"></span><br><span class="line">    tune.ssl.default-dh-param 2048</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    log global</span><br><span class="line">    # 我们需要使用 tcp 模式</span><br><span class="line">    mode tcp</span><br><span class="line">    option dontlognull</span><br><span class="line">    timeout connect 5s</span><br><span class="line">    # 空闲连接等待时间，这里使用与 V2Ray 默认 connIdle 一致的 300s</span><br><span class="line">    timeout client  300s</span><br><span class="line">    timeout server  300s</span><br><span class="line">frontend tls-in</span><br><span class="line">    # 监听 443 tls，tfo 根据自身情况决定是否开启，证书放置于 /etc/ssl/private/example.com.pem</span><br><span class="line">    bind *:443 tfo ssl crt /etc/ssl/private/example.com.pem</span><br><span class="line">    tcp-request inspect-delay 5s</span><br><span class="line">    tcp-request content accept if HTTP</span><br><span class="line">    # 将 HTTP 流量发给 web 后端</span><br><span class="line">    use_backend web if HTTP</span><br><span class="line">    # 将其他流量发给 vmess 后端</span><br><span class="line">    default_backend vmess</span><br><span class="line"></span><br><span class="line">backend web</span><br><span class="line">    server server1 127.0.0.1:8080</span><br><span class="line">  </span><br><span class="line">backend vmess</span><br><span class="line">    server server1 127.0.0.1:40001</span><br></pre></td></tr></table></figure>
<p>HaProxy 的证书和密钥放于同一个文件，与 Caddy 和 Nginx 不同，可以使用命令 <code>cat example.com.crt example.com.key &gt; example.com.pem</code> 合成证书</p>
<p>修改haproxy系统服务启动脚本：</p>
<p><code>vim /etc/systemd/system/haproxy.service</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 确保在[Service]这一栏有这样的一项</span><br><span class="line">[Service]</span><br><span class="line">Environment=LD_LIBRARY_PATH=/opt/openssl-1.1.1/lib/</span><br></pre></td></tr></table></figure>
<p>测试，首先测试配置是否正确，如果发现错误就根据错误改正</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haproxy -db -f /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/haproxy start</span><br></pre></td></tr></table></figure>
<p>如果没有任何提示，说明haproxy配置无误，Ctrl+C退出测试。</p>
<p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start haproxy</span><br><span class="line"><span class="meta">#</span><span class="bash">开机自启</span></span><br><span class="line">systemctl enable haproxy</span><br></pre></td></tr></table></figure>
<p>此时输入<code>netstat -npl |grep 443</code>可以看到haproxy已经开始监听443端口</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      23824/haproxy</span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     290695   23824/haproxy        /run/haproxy/admin.sock.23823.tmp</span><br></pre></td></tr></table></figure>
<h4 id="Haproxy常见错误排查"><a href="#Haproxy常见错误排查" class="headerlink" title="Haproxy常见错误排查"></a>Haproxy常见错误排查</h4><p>如果提示</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ALERT] 168/131339 (22782) : Starting frontend GLOBAL: cannot bind UNIX socket [/run/haproxy/admin.sock]</span><br></pre></td></tr></table></figure>
<p>首先检查443端口是否被占用，先把apache，nginx, caddy关掉，之后的章节会提到，我们会将它的监听端口改为其他端口，用haproxy作实际443监听端口。</p>
<p>使用<code>netstat -npl |grep 443</code>检查是否有进程占用443端口。</p>
<p>如果确认没有，但仍然报错，则需要手动创建/run/haproxy/这个目录：</p>
<blockquote>
<p>Haproxy needs to write to <code>/run/haproxy/admin.sock</code> but it wont create the directory for you. Create the directory <code>/run/haproxy/</code> first or set <code>stats socket</code> to a different path.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /run/haproxy/</span><br></pre></td></tr></table></figure>
<h5 id="请注意"><a href="#请注意" class="headerlink" title="请注意:"></a>请注意:</h5><p><strong><em>1.务必先编译openssl 1.1.1再编译haproxy，可以通过<code>haproxy -vv |grep OpenSSL</code>查看当前编译时候openssl的版本，如果版本号不对，请指定正确版本的openssl路径后重新编译</em></strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">haproxy -vv |grep OpenSSL</span><br><span class="line">----</span><br><span class="line">Built with OpenSSL version : OpenSSL 1.1.1g  21 Apr 2020</span><br><span class="line">Running on OpenSSL version : OpenSSL 1.1.1g  21 Apr 2020</span><br><span class="line">OpenSSL library supports TLS extensions : yes</span><br><span class="line">OpenSSL library supports SNI : yes</span><br><span class="line">OpenSSL library supports : TLSv1.0 TLSv1.1 TLSv1.2 TLSv1.3</span><br></pre></td></tr></table></figure>
<h3 id="配置v2ray服务端"><a href="#配置v2ray服务端" class="headerlink" title="配置v2ray服务端"></a>配置v2ray服务端</h3><p>安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure>
<p>配置<br><code>vim /etc/v2ray/config.json</code></p>
<p>内容如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"inbounds"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">            <span class="attr">"listen"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">            "port": 40001,	# 可以随便写个端口，只要注意一致就行</span><br><span class="line">            "settings": &#123;</span><br><span class="line">                "clients": [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"id"</span>: <span class="string">"f2435e5c-9ad9-4367-836a-8341117d0a5f"</span>(请自己生成一个)</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            "streamSettings": &#123;</span><br><span class="line">                "network": "tcp"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "outbounds": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"protocol"</span>: <span class="string">"freedom"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start v2ray</span><br><span class="line"><span class="meta">#</span><span class="bash">开机自启</span></span><br><span class="line">systemctl enable v2ray</span><br></pre></td></tr></table></figure>
<h2 id="修改nginx服务端配置"><a href="#修改nginx服务端配置" class="headerlink" title="修改nginx服务端配置"></a>修改nginx服务端配置</h2><p><code>vim /etc/nginx/nginx.conf</code></p>
<p> 在 http{} 里面添加，这样我们只用nginx监听普通8080端口即可，因为haproxy那边本地转发前已经解包成了明文了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 8080;</span><br><span class="line">  server_name example.com;		#记得改成你自己的域名</span><br><span class="line">  root /var/www/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启服务端</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机自启</span></span><br><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>到目前为止，所有的服务就已经搭建完毕了，在浏览器里输入 https:// + 你的域名，  如果能够正常访问，说明haproxy和nginx的链路已经通了，基本上就代表可以用了。VMESS的路一般不会出什么问题，这时候就可以用客户端试一下了。</p>
<p>客户端的配置以及一些延迟测试就不多介绍了，参考<a href="https://guide.v2fly.org/advanced/tcp_tls_web.html" target="_blank" rel="noopener">官方社区</a>吧。</p>
<h1 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h1><p>油管1080P随便拽，4k流畅秒开，可以看奈飞</p>
<p>油管4k</p>
<p><img src="https://i.loli.net/2020/06/17/GHRKqbBelJAC34k.png" alt="image.png"><br>Netflix<br><img src="https://i.loli.net/2020/06/17/IHzUFPDVqvuhTWQ.png" alt="image.png"></p>
<h1 id="下一步计划"><a href="#下一步计划" class="headerlink" title="下一步计划"></a>下一步计划</h1><p>1.整个一套配置下来还是很繁琐的。我打算之后写一套docker-compose，以方便复用。</p>
<p>2.这个机器有100G硬盘呢，反正暂时又不建站，不如下一步在上面建个图床玩玩</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="https://www.cnblogs.com/stulzq/p/9291223.html" target="_blank" rel="noopener">CentOS 7 源码编译安装 Nginx</a></p>
<p>2.<a href="https://guide.v2fly.org/advanced/tcp_tls_web.html#背景" target="_blank" rel="noopener">TCP + TLS + Web</a></p>
<p>3.<a href="https://gist.github.com/meanevo/742b61031fdf9ce01e50d4b196a3f31e" target="_blank" rel="noopener">HAproxy指南之haproxy编译安装</a></p>
<p>4.<a href="https://wiki.openssl.org/index.php/Compilation_and_Installation" target="_blank" rel="noopener">wiki_openssl</a></p>
<p>5.<a href="https://dnsprivacy.org/wiki/display/DP/Building+HAProxy+so+that+it+can+use+TLSv1.3" target="_blank" rel="noopener">Building HAProxy so that it can use TLSv1.3</a></p>
<p>6.<a href="https://certbot.eff.org/lets-encrypt/centosrhel7-nginx.html" target="_blank" rel="noopener">Nginx on CentOS/RHEL 7</a></p>
<p>7.<a href="https://stackoverflow.com/questions/30101075/haproxy-doesnt-start-can-not-bind-unix-socket-run-haproxy-admin-sock" target="_blank" rel="noopener">HAProxy doesn’t start, can not bind UNIX socket</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;由于忍不住剁手新入一台韩国Kdatacenter的VPS，从南京联通出去的链路还是不错的，如图所示。&lt;br&gt;&lt;img src=&quot;https:
    
    </summary>
    
      <category term="计算机网络" scheme="http://blog.yinzi.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Network" scheme="http://blog.yinzi.me/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Kdatacenter迁移记录</title>
    <link href="http://blog.yinzi.me/post/record_of_my_migration/"/>
    <id>http://blog.yinzi.me/post/record_of_my_migration/</id>
    <published>2020-06-16T16:00:00.000Z</published>
    <updated>2021-03-03T07:03:52.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于最近套路云翻车，Linode总是不稳定，所以我打算把个人的另一个站点以及某类工具性服务迁移到一个更加稳定的地方去。思来想去，还是得在亚洲机房找。</p>
<p>之前看网上有不少博客推荐<a href="https://www.kdatacenter.com" target="_blank" rel="noopener">Kdatacenter</a>，说是最稳定最快速的韩国VPS，速度就像是在国内访问一样，所以就想去试试。</p>
<p>并且听说这家提供商可以给新用户20%的优惠，不过需要用户发推广：</p>
<blockquote>
<p>You can get some promotion codes according to quantity of links as below:</p>
<p>*10% promotion code: 1ealink x Blog/BBS/Forum etc.</p>
<p>*Additional 10% promotion code: 2ea links x SNS</p>
<p>You can get 20% promotion code with 3 links:</p>
<ul>
<li>Your post in forum or BBS can be considered as an article in SNS.</li>
<li>A promotion coupon is avaliable only one time. These coupons are used for recurring charge.</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于最近套路云翻车，Linode总是不稳定，所以我打算把个人的另一个站点以及某类工具性服务迁移到一个更加稳定的地方去。思来想去，还是得在亚洲
    
    </summary>
    
      <category term="计算机相关技术" scheme="http://blog.yinzi.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac OS" scheme="http://blog.yinzi.me/tags/Mac-OS/"/>
    
  </entry>
  
  <entry>
    <title>这是个草稿</title>
    <link href="http://blog.yinzi.me/post/nothing-but-a-draft/"/>
    <id>http://blog.yinzi.me/post/nothing-but-a-draft/</id>
    <published>2020-05-31T16:00:00.000Z</published>
    <updated>2021-03-03T07:39:17.057Z</updated>
    
    <content type="html"><![CDATA[<p>没什么积累和输入自然是写不出什么好东西</p>
<p>反正就是个草稿</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没什么积累和输入自然是写不出什么好东西&lt;/p&gt;
&lt;p&gt;反正就是个草稿&lt;/p&gt;

    
    </summary>
    
      <category term="脑子不好史" scheme="http://blog.yinzi.me/categories/%E8%84%91%E5%AD%90%E4%B8%8D%E5%A5%BD%E5%8F%B2/"/>
    
    
      <category term="脑子不好史" scheme="http://blog.yinzi.me/tags/%E8%84%91%E5%AD%90%E4%B8%8D%E5%A5%BD%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>我非我</title>
    <link href="http://blog.yinzi.me/post/I-am-not-me/"/>
    <id>http://blog.yinzi.me/post/I-am-not-me/</id>
    <published>2020-05-22T16:00:00.000Z</published>
    <updated>2021-03-03T07:57:13.237Z</updated>
    
    <content type="html"><![CDATA[<p>我非我，即小我，及大我，何曾无我。</p>
<p>我若成我，我亦非我。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我非我，即小我，及大我，何曾无我。&lt;/p&gt;
&lt;p&gt;我若成我，我亦非我。&lt;/p&gt;

    
    </summary>
    
      <category term="脑子不好史" scheme="http://blog.yinzi.me/categories/%E8%84%91%E5%AD%90%E4%B8%8D%E5%A5%BD%E5%8F%B2/"/>
    
    
      <category term="脑子不好史" scheme="http://blog.yinzi.me/tags/%E8%84%91%E5%AD%90%E4%B8%8D%E5%A5%BD%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>淘宝买的mini IPC摄像头分析</title>
    <link href="http://blog.yinzi.me/post/analysis-of-a-mini-camera/"/>
    <id>http://blog.yinzi.me/post/analysis-of-a-mini-camera/</id>
    <published>2019-12-12T16:00:00.000Z</published>
    <updated>2021-03-03T08:11:07.595Z</updated>
    
    <content type="html"><![CDATA[<p>一个超级mini的摄像头，带夜视、H.264编码、低功耗声称可以续航三天</p>
<p><img src="https://i.loli.net/2021/03/03/lpSXdr6InRFQw4o.jpg" alt="image-20190923001151881.jpg"><br><img src="https://i.loli.net/2021/03/03/7lxXHrmAyGPYD3I.jpg" alt="image-20190923001203049.jpg"></p>
<p>拆开看是这样</p>
<p><img src="https://i.loli.net/2021/03/03/nvH3Tbgh765lqyo.jpg" alt="image-20190923001216989.jpg"><br><img src="https://i.loli.net/2021/03/03/hKtpbwgyL6M7GAB.jpg" alt="image-20190923001224351.jpg"></p>
<p>用的这个芯片很有意思</p>
<p>北京君正芯片</p>
<p><img src="http://img.mp.itc.cn/upload/20170424/9b77e860de47463eae9494bf8adc0786_th.jpeg" alt="img"></p>
<p>大概抓包分析了一下，貌似是直接把TLS加密的内容用Raw UDP传送。</p>
<p>首先我发现它提供APP上有一个推送新证书的功能，通过抓包成功地把证书和私钥给拿了下来。</p>
<p><img src="https://i.loli.net/2021/03/03/YB1W8UZTE2gKt4I.jpg" alt="image-20190923001727840.jpg"></p>
<p>然后发现它UDP端口每次都会变，而且APP支持局域网搜索，所以我猜想肯定是有UDP广播，所以就抓广播包，果然抓到了关键信息。这个XML文件的信息量很大，表明了它是用onvif协议（表示在看到这个关键词的时候都不知道这啥啊，搜一下才知道原来是一个定好的标准协议，我之前还以为是作者自定义的协议。毕竟不了解IP摄像头行业，2333）</p>
<p><img src="https://i.loli.net/2021/03/03/mt4RfykWX2Y6sHL.jpg" alt="image-20190923002052357.jpg"></p>
<p>另外，我还发现了这个板子的串口，哈哈哈，这意味着可以直接拿到shell了，回头焊个排针引出来然后把ssh 打开，真是捡到宝了，开心～</p>
<p><img src="https://i.loli.net/2021/03/03/5ajSpGk47undhfv.jpg" alt="image-20190923002550162.jpg"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个摄像头的设计很简单又紧凑，值得学习。这个小体积和续航非常符合我的要求，下一步的目标就是对它进行二次开发了～ 加个人脸识别啥的,真是太美好了～～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个超级mini的摄像头，带夜视、H.264编码、低功耗声称可以续航三天&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/03/03/lpSXdr6InRFQw4o.jpg&quot; alt=&quot;image-20190923001151881.jpg
    
    </summary>
    
      <category term="Diy" scheme="http://blog.yinzi.me/categories/Diy/"/>
    
    
      <category term="Others" scheme="http://blog.yinzi.me/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>随笔4-191027</title>
    <link href="http://blog.yinzi.me/post/totally-gibberish/"/>
    <id>http://blog.yinzi.me/post/totally-gibberish/</id>
    <published>2019-10-26T16:00:00.000Z</published>
    <updated>2021-03-03T07:35:50.721Z</updated>
    
    <content type="html"><![CDATA[<p>我年少时糊涂，痴痴傻傻。到如今，却越活越明白。一路上身边的人很多，留下来的却很少。有的朋友三言两句就觉得淡薄了，有的朋友十年阔别，再谈却还总觉得熟络。其实我哪经营得过来那么多感情，人生难得一知己。</p>
<p>我的朋友很少、但是我现在过得还不错，如果你乐意听到，那你就是我朋友，如果你十年后还有兴趣知道，那你就是我知己。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我年少时糊涂，痴痴傻傻。到如今，却越活越明白。一路上身边的人很多，留下来的却很少。有的朋友三言两句就觉得淡薄了，有的朋友十年阔别，再谈却还总觉得熟络。其实我哪经营得过来那么多感情，人生难得一知己。&lt;/p&gt;
&lt;p&gt;我的朋友很少、但是我现在过得还不错，如果你乐意听到，那你就是我
    
    </summary>
    
      <category term="脑子不好史" scheme="http://blog.yinzi.me/categories/%E8%84%91%E5%AD%90%E4%B8%8D%E5%A5%BD%E5%8F%B2/"/>
    
    
      <category term="脑子不好史" scheme="http://blog.yinzi.me/tags/%E8%84%91%E5%AD%90%E4%B8%8D%E5%A5%BD%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>懒得起标题了</title>
    <link href="http://blog.yinzi.me/post/too-lazy-to-write-a-title/"/>
    <id>http://blog.yinzi.me/post/too-lazy-to-write-a-title/</id>
    <published>2019-10-24T16:00:00.000Z</published>
    <updated>2021-03-03T07:32:52.869Z</updated>
    
    <content type="html"><![CDATA[<p>懒得起标题了</p>
<p>心里总是有一堆想法，落在纸上又什么都没了。可能是我太纠结于格式、文法，应该先忽略这些，只打草稿的。想到的时候感觉灵感很好，几乎能够一挥而就了，等到坐下来的时候，当时的热情、感动就只剩下碎片了，看不出什么端倪。先把碎片整理下来吧，以后记得随手保存。</p>
<p>泛着彩色的灵感泡泡，你看它光彩夺目，举世惊艳，但是你一伸手，它就破了，只能在指尖依稀感觉到一丝凉意。</p>
<p>美的事物有很多，阳光、叶子、花朵、你的目光</p>
<p>每一秒的时间都很昂贵，但每个人都好像无所谓，没关系，这个我付得起，没关系那个我也付得起。直到所剩无几，才希望能够多一秒，再多一秒。</p>
<p>得好好把握和珍惜，这一秒，下一秒。</p>
<p>珍贵是指一个事物这一刻还近在眼前的，下一刻可能再也遇不到了。这么说来，好多东西都是珍贵甚至奢侈的。每一个第一次，每一次不同的欣喜，每一个遇到的不同的路人，甚至是每一个不同的痛苦。</p>
<p>你看那摇椅里的老人，他们也曾是孩童。从襁褓到落地，从蹒跚到奔跑，从稚嫩到成熟，从一个人到遇到对的人。没人知道皱纹是怎样慢慢爬上他们的脸，时光又怎样慢慢磨掉他们平淡的回忆。我只想擦掉眼眶的泪，珍惜与你依偎在一起的每时每刻。纵然我们都挡不住时光。青春会老，容颜会老，我也会老；但我对你的爱不会老，这个承诺也不会老。</p>
<p>无力与时光抗争，当时光从你手中夺取，只能祈望有机会可以谈判。时光啊，把我的初心留下，把我爱的人留下，其他的你全都带走。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;懒得起标题了&lt;/p&gt;
&lt;p&gt;心里总是有一堆想法，落在纸上又什么都没了。可能是我太纠结于格式、文法，应该先忽略这些，只打草稿的。想到的时候感觉灵感很好，几乎能够一挥而就了，等到坐下来的时候，当时的热情、感动就只剩下碎片了，看不出什么端倪。先把碎片整理下来吧，以后记得随手保存。
    
    </summary>
    
      <category term="脑子不好史" scheme="http://blog.yinzi.me/categories/%E8%84%91%E5%AD%90%E4%B8%8D%E5%A5%BD%E5%8F%B2/"/>
    
    
      <category term="脑子不好史" scheme="http://blog.yinzi.me/tags/%E8%84%91%E5%AD%90%E4%B8%8D%E5%A5%BD%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>群体学习</title>
    <link href="http://blog.yinzi.me/post/why-people-hate-change/"/>
    <id>http://blog.yinzi.me/post/why-people-hate-change/</id>
    <published>2019-10-23T16:00:00.000Z</published>
    <updated>2021-03-03T07:57:32.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="群体学习论"><a href="#群体学习论" class="headerlink" title="群体学习论"></a>群体学习论</h2><h3 id="公理1：群体知识由个体学习结果提炼产生"><a href="#公理1：群体知识由个体学习结果提炼产生" class="headerlink" title="公理1：群体知识由个体学习结果提炼产生"></a>公理1：群体知识由个体学习结果提炼产生</h3><h3 id="公理2：个体更容易获得有更多个体经验的群体知识"><a href="#公理2：个体更容易获得有更多个体经验的群体知识" class="headerlink" title="公理2：个体更容易获得有更多个体经验的群体知识"></a>公理2：个体更容易获得有更多个体经验的群体知识</h3><h3 id="公理3-群体的知识空间是有限可数的"><a href="#公理3-群体的知识空间是有限可数的" class="headerlink" title="公理3:   群体的知识空间是有限可数的"></a>公理3:   群体的知识空间是有限可数的</h3><h3 id="群体学习方法："><a href="#群体学习方法：" class="headerlink" title="群体学习方法："></a>群体学习方法：</h3><p>这个问题很有意思，让我们来捋一捋。 </p>
<p>现象：对一个问题，看似比主流方案更优的解决方案却不一定有更大的用户群体。</p>
<p>群体反馈：“没有需求”，“你的方案不方便，学习成本过高”，“不够通用”，“我觉得现有方案就蛮好”，“哪那么多事，能用就好了”。</p>
<p>分析：</p>
<p>我们可以从这个角度来看，假设群体学习是这么一个过程：每个单独个体都基于自身的样本空间学习探索，虽然有些人的样本空间里探索不到方案，但总有些人会有机会探索到新的解决方案极值点（很难说是最值点），然后群体最终会从所有个体探索方案极值点中选取最小的作为群体用户解决方案。如果群体学习真的一直是这个过程的话，那么群体将总能不断找到解决方案的新的局部最优化点，对一个问题大家往往都会选择当前更佳的那种解决方案。但事实上会存在两个局限，</p>
<ul>
<li><p>首先是评价标准有很大的主观问题，即我不承认你那里极值点比我低。什么是更好？什么是最好？每个人的标准不一样，每个人的需求也不一样。你这个方案对你的需求是最好，可能对我的也就一般。</p>
</li>
<li><p>第二个局限性是由于学习成本和用户惯性的存在，很容易造成群体方案的心甘情愿过拟合，虽然我承认你极值点更低，但我就在这里不出来了，我挪过去好累啊，就在这里就蛮好。</p>
</li>
</ul>
<p>这两个局限性导致了群体性分布式学习很难学习到一个共同的最优解，只能存在一个主流的极值解。这就导致了解决同一个问题可以有不同的方法，但很难说谁是最好的。所以用户在对同一种问题的不同解决方案选择上我认为大体上可以分为三类群体，<strong>A群体，B群体和C群体。</strong></p>
<ul>
<li><p><strong>A群体</strong>用户数量最庞大，他们一般承认自己不是最优的解决方案，但根据局限1和局限2，拒绝迁移。</p>
</li>
<li><p><strong>B群体</strong>和<strong>C群体</strong>的数量可能相当也可能不相当，但是它们互相不承认对方更优，但是都公认自身比<strong>A群体</strong>更优。</p>
<p>随着时间发展，B群体或C群体完全可能成为新的A群体，但是保不准随着技术的不断前进，又会出现新的B群体和C群体，这样周而复始的也是非常的有意思。</p>
</li>
</ul>
<h3 id="用户需求、用户惯性、学习成本"><a href="#用户需求、用户惯性、学习成本" class="headerlink" title="用户需求、用户惯性、学习成本"></a>用户需求、用户惯性、学习成本</h3><p>用户需求是需要培养的，没培养的时候用户更趋向于改变自己的需求去适应自身现有知识和技术，之后慢慢就形成了用户惯性。</p>
<p>个体用户对同一问题的求解过程可以看成如下过程：</p>
<ul>
<li>A事件：个体从现有知识样本空间探索查找解决方案，如果存在则查找结束。</li>
<li>B事件：个体从现有知识样本空间找不到方案，查看群体知识样本空间中是否有学习成本较低的方案，如果有，学习之，如果没有，则转C事件</li>
<li>C事件：看看这个需求是否非常重要，如果不是很重要，就直接放弃，否则转D事件</li>
<li>D事件：探索群体知识样本空间中学习成本高的方案是否满足要求，是则该项知识</li>
</ul>
<p>学习成本、用户惯性两者相辅相成：</p>
<p>1.学习成本促成了用户惯性，不存在学习成本也就很难有用户惯性。</p>
<p>不同用户由于背景知识的不同而对于同一种事物的学习成本不同，但用户往往会先从自身的低学习成本样本空间中探索方案来解决需求，一旦探索到某种方案能解决自身需求，则停止学习、存档，形成针对该问题的一个固定解决方案，也就是个体用户惯性。多个个体用户惯性会融合成群体用户惯性。</p>
<p>2.用户惯性又能反作用于学习成本，使新用户对该群体方案的学习成本更低，从而使该方案的群体增长。</p>
<p>一方面，受到每个人知识积累的不同，不是所有个体都能在自身的低学习成本空间中探索到解决方案，这时就需要学习，学会以后这个知识的学习成本对于该个体来说就降低了，也就是学会新知识相当于扩展了自身的低成本学习空间。</p>
<p>另一方面，即使个体的知识样本空间中理论上存在更优的解决方案，但是新的探索个体却需要付出更多的探索时间，这种自发探索也是一种学习，从其他任务知识中迁移学习到这个任务，但是这个过程的学习成本往往比直接使用成熟主流的群体解决方案来的高。除非成熟方案已经满足不了这部分个体的需求，否则这部分个体也不会选择继续探索新方案。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;群体学习论&quot;&gt;&lt;a href=&quot;#群体学习论&quot; class=&quot;headerlink&quot; title=&quot;群体学习论&quot;&gt;&lt;/a&gt;群体学习论&lt;/h2&gt;&lt;h3 id=&quot;公理1：群体知识由个体学习结果提炼产生&quot;&gt;&lt;a href=&quot;#公理1：群体知识由个体学习结果提炼产生&quot; c
    
    </summary>
    
      <category term="脑子不好史" scheme="http://blog.yinzi.me/categories/%E8%84%91%E5%AD%90%E4%B8%8D%E5%A5%BD%E5%8F%B2/"/>
    
    
      <category term="脑子不好史" scheme="http://blog.yinzi.me/tags/%E8%84%91%E5%AD%90%E4%B8%8D%E5%A5%BD%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>LT3757电源控制模块学习笔记</title>
    <link href="http://blog.yinzi.me/post/electric/"/>
    <id>http://blog.yinzi.me/post/electric/</id>
    <published>2018-07-25T05:00:08.000Z</published>
    <updated>2021-03-03T07:03:52.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LT3757"><a href="#LT3757" class="headerlink" title="LT3757"></a>LT3757</h1><p>最近需要实现200V-350V的可调的输出电源，需要用到LT3757这款芯片，以前从来没有接触这方面的内容，仔细研读了一下LT3757的手册，为了便于以后查阅，在这里整理一下。</p>
<blockquote>
<p>PS:有些内容是按自己理解写的，如有纰误还望指教。</p>
</blockquote>
<p><img src="http://www.analog.com/lib/img/products/details/AltPartGeneric.png" alt="LT3757"></p>
<h2 id="LT3757简介"><a href="#LT3757简介" class="headerlink" title="LT3757简介"></a>LT3757简介</h2><blockquote>
<ul>
<li>LT 3757是一款DC-DC控制器，能够在宽输入范围内产生正或负输出电压，它可配置为反激式，SEPIC，BOOST或反相转换器，可以通过内部电源(INTVCC脚)或外接电源的方式来给N-MOSFET供电。</li>
<li>LT 3757A相比LT3757具有更好的负载瞬态性能</li>
</ul>
</blockquote>
<ul>
<li><p>它的工作频率可通过100kHz至1Mhz的Rt脚外接电阻调节，也可以通过SYNC脚与外部时钟同步的方式来调节，固定频率有利于在芯片很宽的电源和输出电压范围内稳定工作。</p>
</li>
<li><p>LT 3757的最小工作电源电压为2.9V，电流小于1uA。LT 3757具有软启动和频率折返功能，用于限制启动和输出短路期间的电感电流。</p>
<a id="more"></a>
</li>
</ul>
<h2 id="LT3757-各个引脚功能介绍"><a href="#LT3757-各个引脚功能介绍" class="headerlink" title="LT3757 各个引脚功能介绍"></a>LT3757 各个引脚功能介绍</h2><blockquote>
<ul>
<li>$V_{c}$: 误差放大器补偿引脚，利用外接RC网络来稳定电压回路。</li>
<li>$FBX$: 正电压和负电压反馈引脚。它通过输出电压部分的电阻分压来获得反馈电压，当反馈电压到达1.6V时，芯片便会调节开关频率使输出电压稳定下来不再继续升高。</li>
<li>另外，如果FBX接入GND，芯片也会在启动和故障的时候调制频率(说实话，这个功能没大读懂)。</li>
<li>$SS$: 软启动引脚，该引脚会调制$V<em>c$引脚的电压钳位，通过外部电容来控制软启动间隙。该引脚具有10uA(典型值)的上拉电流源，以及内部2.5V电压。在$\overline{SHDN}/UVLO$引脚欠压，或者$INTV</em>{CC}$欠压过压以及芯片内部热锁定等异常条件下，SS将会被重置为GND电位。</li>
</ul>
</blockquote>
<p><strong>注:上已LT3757具有两种调节开关工作频率的方式，以下两个引脚便是具体的方式</strong></p>
<blockquote>
<ul>
<li>$RT$:开关频率调节引脚。通过在改脚外接电阻来调节工作频率，电阻的另一端直接接GND。此引脚不能悬空，即便要采用SYNC模式，该引脚也应该接入比SYNC脚接入频率低20%的频率对应的阻值。</li>
<li>$SYNC$:频率同步引脚。对应着外部时钟同步方式，该引脚用来接入外部信号源，以使开关频率与外部信号源频率同步，如果选用这个功能此时RT脚应该接入对应外部时钟频率低20%的频率的阻值。</li>
</ul>
</blockquote>
<hr>
<blockquote>
<ul>
<li>$SENSE$:控制回路的电流检测输入。此脚应连接到N-MOSFET源极中开关电流检测电阻的正极，电阻的负极应连接到IC的GND。<img src="https://s1.ax1x.com/2018/07/23/PJZjB9.png" alt="图2"></li>
<li>$GATE$:N沟道MOSFET栅极驱动器输出引脚。GATE脚是芯片的输出引脚，与N-MOSFET的栅极连接。输出波形是方波，电压在INTVCC和GND之间切换，相当于在以一定的频率切换MOS开关。当IC关闭、热锁定或者INTVCC欠压和超压时候自动接地。</li>
<li>$INTV_{CC}$:为内部负载和栅极驱动器提供的稳压电源，从VIN提供并调节至7.2V（典型值）。必须使用靠近引脚放置的最小4.7μF电容旁路INTVCC，如果VIN小于17.5V，INTVCC可以直接连接到VIN。如果电源电压不超过17.5V，INTVCC也可以连接到电压高于7.5V且低于VIN的电源。</li>
<li>$\overline{SHDN}/UVLO$:关断和欠压检测引脚。到达1.22V（标称值）阈值便禁用设备并将VIN电流将至1μA以下，欠压条件下会重置软启动。</li>
<li>$V_{IN}$:VIN（引脚10）：输入电源引脚，必须旁路一个超过0.22μF的电容。</li>
</ul>
</blockquote>
<h2 id="LT3757-功能描述"><a href="#LT3757-功能描述" class="headerlink" title="LT3757 功能描述"></a>LT3757 功能描述</h2><p>由于是零基础,为了理解DC-DC升压的基本原理，从而了解LT3757的作用。我首先恶补了一下电力电子中BOOST、Flyback等常见电路的相关理论知识。但公式贴起来太枯燥，在这里不如让我引用一下电子工程世界论坛一位网友的科普贴，它讲得非常的生动易懂。</p>
<blockquote>
<p>当电感被连接到电源两端的时候，电流流过电感，这个过程会在电感周围产生感生磁场，当电流稳定之后，其磁场也趋于稳定。若我们将电源撤掉，磁场将会在线路中产生一个方向相反的电动势，其值可能大于原电源的电动势。明白了这两点，Boost电路的最基本原理也就不难分析了。<br><img src="http://5.eewimg.cn/data/attachment/forum/201709/15/152537sdihcsphhpvj3p9h.png.thumb.jpg" alt="升压电路"><br>在这样的一个电路中，如果我们闭合开关，电源将对电感充电，电能转化为电感上的磁场能量。而当我们打开开关，电感上的磁场将转化为电能，通过右侧的二极管向电容充电。而对于电容来说，其电压将取决于电源电压和电感的充电过程，在开关打开的时候，为其供电的除了电源，还有电感中的能量， 因此其电压将高于原电源电压。如果这个过程不断地往复下去，我们就能够在电容两端得到高于电源电压的输出电压。<br><img src="http://5.eewimg.cn/data/attachment/forum/201709/15/152612ynl4n2dvavpdm1vc.gif" alt="gif示意图"><br>很显然，在实际的电源中我们不可能用手去按开关，用在这个位置上的将会是开关管。它将以极快的速度开关，从而控制整个过程。这也是开关电源中“开关”一词的来历。</p>
</blockquote>
<p>而我们用到的LT3757实际上相当于一个开关控制器，通过控制电路的通断来实现能量从电感转移到电容，达到升压的目的。</p>
<h2 id="输出电压调节"><a href="#输出电压调节" class="headerlink" title="输出电压调节"></a>输出电压调节</h2><p>在手册的第12页 <em>Programing the Output Voltage</em> 节中给出了通过$R_1$和$R<em>2$电阻来调节输出电压的计算公式。<br>$V</em>{正输出电压}=1.6V \cdot (1+\frac{R2}{R1})$<br>$V_{负输出电压}=-0.8V \cdot (1+\frac{R2}{R1})$</p>
<p>FBX是反馈引脚，内部接1.6V和-0.8V的比较器。当反馈脚电压到达1.6V时芯片便会控制输出电压稳定，经过仿真发现改变FBX的电压不能很好地调节输出电压的值，会影响芯片对输出电压的控制。i</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LT3757&quot;&gt;&lt;a href=&quot;#LT3757&quot; class=&quot;headerlink&quot; title=&quot;LT3757&quot;&gt;&lt;/a&gt;LT3757&lt;/h1&gt;&lt;p&gt;最近需要实现200V-350V的可调的输出电源，需要用到LT3757这款芯片，以前从来没有接触这方面的内容，仔细研读了一下LT3757的手册，为了便于以后查阅，在这里整理一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS:有些内容是按自己理解写的，如有纰误还望指教。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://www.analog.com/lib/img/products/details/AltPartGeneric.png&quot; alt=&quot;LT3757&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;LT3757简介&quot;&gt;&lt;a href=&quot;#LT3757简介&quot; class=&quot;headerlink&quot; title=&quot;LT3757简介&quot;&gt;&lt;/a&gt;LT3757简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;LT 3757是一款DC-DC控制器，能够在宽输入范围内产生正或负输出电压，它可配置为反激式，SEPIC，BOOST或反相转换器，可以通过内部电源(INTVCC脚)或外接电源的方式来给N-MOSFET供电。&lt;/li&gt;
&lt;li&gt;LT 3757A相比LT3757具有更好的负载瞬态性能&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;它的工作频率可通过100kHz至1Mhz的Rt脚外接电阻调节，也可以通过SYNC脚与外部时钟同步的方式来调节，固定频率有利于在芯片很宽的电源和输出电压范围内稳定工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LT 3757的最小工作电源电压为2.9V，电流小于1uA。LT 3757具有软启动和频率折返功能，用于限制启动和输出短路期间的电感电流。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="电子" scheme="http://blog.yinzi.me/categories/%E7%94%B5%E5%AD%90/"/>
    
    
      <category term="电子" scheme="http://blog.yinzi.me/tags/%E7%94%B5%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>IPV6折腾集</title>
    <link href="http://blog.yinzi.me/post/funwithIPV6/"/>
    <id>http://blog.yinzi.me/post/funwithIPV6/</id>
    <published>2018-01-31T16:00:00.000Z</published>
    <updated>2021-03-03T07:03:52.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本文仅仅为探索过程的一个整理，针对：</p>
<ul>
<li>通过pppoe 用户名后面加@ipv6等后缀拨号获得单栈道IPV6地址的环境</li>
<li>不对IPV6地址进行计费和流量与访问限制的高校</li>
</ul>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>本文相当于是博文集的序言和目录，相关内容正在持续更新中。- 由于我技术水平不高，所以文中的很多言论都只是我个人根据网上资料的理解，很多方法和技术也都是来自其他众多大牛们，我只是为了记录和整理折腾了一下方便我矿的童鞋们，顺便也能听取大家的建议和指教，更深入地了解相关的专业知识。不妥之处，还请各位包涵指点。</li>
<li>博主本人的水平有限，对于未解决的问题，希望能和大家一起讨论交流</li>
</ul>
<a id="more"></a>
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><ul>
<li>虽然我的初衷确实是为了免费上网，但IPV6本身并不是用来免费上网的。希望感兴趣同学能深入了解和研究IPV6相关内容。</li>
<li>转载请征询本人意见。</li>
<li>涉嫌侵权知会本人删除。</li>
</ul>
<ul>
<li><strong>本集仅供技术交流，不得利用本文提及的相关技术进行任何不法行为、发表任何不正当言论以及谋取任何形式的商业利益!</strong></li>
</ul>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="理论篇"><a href="#理论篇" class="headerlink" title="理论篇"></a>理论篇</h3><blockquote>
<ul>
<li><a href="https://aod321.github.io/post/knowaboutipv6/" target="_blank" rel="noopener">了解IPV6</a></li>
<li><del>博主学校的IPV6网络结构浅析</del></li>
</ul>
</blockquote>
<h3 id="实践篇"><a href="#实践篇" class="headerlink" title="实践篇"></a>实践篇</h3><blockquote>
<ul>
<li>十年窗下无人问，<a href="https://aod321.github.io/post/v6resource/" target="_blank" rel="noopener">V6资源介绍</a></li>
<li>一朝成名天下知，<a href="https://aod321.github.io/post/basicipv6/" target="_blank" rel="noopener">IPV6初识</a></li>
<li>路漫漫其修远兮，IPV6常规化探索（转V4）</li>
<li>吾将上下而求索，充分利用IPV6带宽</li>
<li>雄关漫道真如铁，基于Openwrt的IPV6无线转发</li>
<li>而今迈步从头越，伪双栈-IPV6穿透</li>
</ul>
</blockquote>
<h3 id="探讨篇"><a href="#探讨篇" class="headerlink" title="探讨篇"></a>探讨篇</h3><blockquote>
<ul>
<li>国内的IPV6服务器</li>
<li>游戏低延时</li>
</ul>
</blockquote>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p><a href="http://lixingcong.github.io" target="_blank" rel="noopener">黎醒聪的博客</a><br><a href="http://ygcaicn.github.io" target="_blank" rel="noopener">蔡亚刚的博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;本文仅仅为探索过程的一个整理，针对：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过pppoe 用户名后面加@ipv6等后缀拨号获得单栈道IPV6地址的环境&lt;/li&gt;
&lt;li&gt;不对IPV6地址进行计费和流量与访问限制的高校&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;本文相当于是博文集的序言和目录，相关内容正在持续更新中。- 由于我技术水平不高，所以文中的很多言论都只是我个人根据网上资料的理解，很多方法和技术也都是来自其他众多大牛们，我只是为了记录和整理折腾了一下方便我矿的童鞋们，顺便也能听取大家的建议和指教，更深入地了解相关的专业知识。不妥之处，还请各位包涵指点。&lt;/li&gt;
&lt;li&gt;博主本人的水平有限，对于未解决的问题，希望能和大家一起讨论交流&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IPV6" scheme="http://blog.yinzi.me/categories/IPV6/"/>
    
    
      <category term="IPV6" scheme="http://blog.yinzi.me/tags/IPV6/"/>
    
  </entry>
  
  <entry>
    <title>V6初识</title>
    <link href="http://blog.yinzi.me/post/basicipv6/"/>
    <id>http://blog.yinzi.me/post/basicipv6/</id>
    <published>2018-01-31T11:00:32.000Z</published>
    <updated>2021-03-03T07:03:52.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h2><p>利用IPV6最直接的方式便是访问支持IPV6的站点，而不同高校获取IPV6地址方式不一样，很多都是上层交换机直接分配双栈的，所以只要简单配置获取一下V6公网地址就可以享受到相应的免流服务，有的学校则需要通过PPP验证来获取IPV6地址。</p>
<p>本章将演示如何在本地电脑上利用IPV6服务，首先讲演示如何通过PPP验证获取IPV6地址（其他高校需要具体问题具体分析，仅供参考），接着在获取到可用的IPV6公网地址以后对纯IPV6访问方式作简单的介绍与演示。</p>
<h2 id="主要要求"><a href="#主要要求" class="headerlink" title="主要要求"></a>主要要求</h2><blockquote>
<ul>
<li>装有Win7/Win8/Win10 系统的电脑一台</li>
<li>网线</li>
<li>对IPV6的基本应用有初步的了解。</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h2><p>本章视频演示</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/P9CM4CA9kJg" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<h2 id="以下是图文教程"><a href="#以下是图文教程" class="headerlink" title="#以下是图文教程"></a>#以下是图文教程</h2><h2 id="通过PPPOE方式获取IPV6地址"><a href="#通过PPPOE方式获取IPV6地址" class="headerlink" title="通过PPPOE方式获取IPV6地址"></a>通过PPPOE方式获取IPV6地址</h2><p>步骤(请使用WIN7及以上版本系统)</p>
<p>1.由于本校IPV6在宿舍是通过电信的通道走的，</p>
<p>所以请<em>先用网线连接电信的网口</em>(每个人桌子上面或者下面应该都有)</p>
<p>2.新建拨号</p>
<p>网络-属性-添加新的连接或网络</p>
<p><img src="/post/basicipv6/1-1.png" alt="image1-1"> </p>
<p><img src="/post/basicipv6/1-2.png" alt="image1-2"></p>
<p>Win10用户也可以选择从在新的设置页面里选择建立新的连接如图所示</p>
<p><img src="/post/basicipv6/1.png" alt="image1"></p>
<p>3.在弹出的窗口选择连接到Internet 如图</p>
<p><img src="/post/basicipv6/2.png" alt="image2"></p>
<p>4.接着选择 宽带（PPPOE）</p>
<p><img src="/post/basicipv6/3.png" alt="image3"></p>
<p>5.重点来了，输入用户名和密码时</p>
<p>注意用户名的格式:<em>任意字符加上@ipv6后缀</em></p>
<p>，<em>密码可以随意填写</em>。如图所示</p>
<p><img src="/post/basicipv6/4.png" alt="image4"></p>
<p>6.选择跳过，然后关闭</p>
<p><img src="/post/basicipv6/5.png" alt="image5"><br>7.然后找到刚才新建的拨号，点击连接即可。</p>
<p><img src="/post/basicipv6/6.png" alt="image6"></p>
<p>8.设置一下Google的IPV6 DNS就可以访问支持IPV6的网页了</p>
<blockquote>
<ul>
<li>2001:4860:4860::8888</li>
<li>2001:4860:4860::8844</li>
</ul>
</blockquote>
<p>注：博主以前还见过有人说DNS设置成</p>
<blockquote>
<p>2001:778::37 </p>
</blockquote>
<p>就可以访问像QQ邮箱之类的V4地址网站。<br>这个DNS是个DNS64的通道，博主以前也用过，<em>目前测试这个通道已经失效了。</em></p>
<h2 id="访问纯IPV6资源"><a href="#访问纯IPV6资源" class="headerlink" title="访问纯IPV6资源"></a>访问纯IPV6资源</h2><p>纯IPV6可以直接访问站点不多，目前可以访问哪些资源请参考上一章<br><a href="https://aod321.github.io/post/v6resource/" target="_blank" rel="noopener">V6资源介绍</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内容介绍&quot;&gt;&lt;a href=&quot;#内容介绍&quot; class=&quot;headerlink&quot; title=&quot;内容介绍&quot;&gt;&lt;/a&gt;内容介绍&lt;/h2&gt;&lt;p&gt;利用IPV6最直接的方式便是访问支持IPV6的站点，而不同高校获取IPV6地址方式不一样，很多都是上层交换机直接分配双栈的，所以只要简单配置获取一下V6公网地址就可以享受到相应的免流服务，有的学校则需要通过PPP验证来获取IPV6地址。&lt;/p&gt;
&lt;p&gt;本章将演示如何在本地电脑上利用IPV6服务，首先讲演示如何通过PPP验证获取IPV6地址（其他高校需要具体问题具体分析，仅供参考），接着在获取到可用的IPV6公网地址以后对纯IPV6访问方式作简单的介绍与演示。&lt;/p&gt;
&lt;h2 id=&quot;主要要求&quot;&gt;&lt;a href=&quot;#主要要求&quot; class=&quot;headerlink&quot; title=&quot;主要要求&quot;&gt;&lt;/a&gt;主要要求&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;装有Win7/Win8/Win10 系统的电脑一台&lt;/li&gt;
&lt;li&gt;网线&lt;/li&gt;
&lt;li&gt;对IPV6的基本应用有初步的了解。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="IPV6" scheme="http://blog.yinzi.me/categories/IPV6/"/>
    
    
      <category term="IPV6" scheme="http://blog.yinzi.me/tags/IPV6/"/>
    
  </entry>
  
  <entry>
    <title>V6资源介绍</title>
    <link href="http://blog.yinzi.me/post/v6resource/"/>
    <id>http://blog.yinzi.me/post/v6resource/</id>
    <published>2018-01-31T10:58:21.000Z</published>
    <updated>2021-03-03T07:03:52.241Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要整理一下博主目前所知道的支持纯V6访问的站点，不定期持续更新，欢迎各位补充~</p>
<blockquote>
<ul>
<li><a href="https://ipv6.google.com" target="_blank" rel="noopener">Google</a></li>
<li><a href="https://www.youtube.com" target="_blank" rel="noopener">Youtube</a></li>
<li><a href="https://www.facebook.com" target="_blank" rel="noopener">Facebook</a></li>
<li><a href="http://tv.byr.cn" target="_blank" rel="noopener">北邮人电视直播</a></li>
<li><a href="http://bt.neu6.edu.cn/" target="_blank" rel="noopener">六维空间</a></li>
<li><a href="https://npupt.com/" target="_blank" rel="noopener">蒲公英PT站</a></li>
<li><a href="http://pt.zhixing.bjtu.edu.cn/" target="_blank" rel="noopener">北交知行PT站</a></li>
<li><a href="https://pt.sjtu.edu.cn" target="_blank" rel="noopener">上交葡萄PT站</a></li>
<li><a href="http://bt.byr.cn" target="_blank" rel="noopener">北邮人BT下载站</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要整理一下博主目前所知道的支持纯V6访问的站点，不定期持续更新，欢迎各位补充~&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ipv6.google.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Goo
    
    </summary>
    
      <category term="IPV6" scheme="http://blog.yinzi.me/categories/IPV6/"/>
    
    
      <category term="IPV6" scheme="http://blog.yinzi.me/tags/IPV6/"/>
    
  </entry>
  
  <entry>
    <title>了解IPV6</title>
    <link href="http://blog.yinzi.me/post/knowaboutipv6/"/>
    <id>http://blog.yinzi.me/post/knowaboutipv6/</id>
    <published>2018-01-18T16:00:00.000Z</published>
    <updated>2021-03-03T07:03:52.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IPV6是什么"><a href="#IPV6是什么" class="headerlink" title="IPV6是什么"></a>IPV6是什么</h2><p>为了通过互联网进行通信，电脑和其他设备必须有发送者和接收者地址，<br>这些数字地址称为互联网协议地址也就是我们常说的IP地址，常见的IP地址分为<br>IPv4与IPv6两大类，其中IPV4地址就是我们平时所熟知的IP地址，<br>而IPV6则为网际协议第6版，是网际协议(IP)的最新版本。</p>
<a id="more"></a>
<h2 id="为什么要发展IPV6"><a href="#为什么要发展IPV6" class="headerlink" title="为什么要发展IPV6"></a>为什么要发展IPV6</h2><p>随着互联网的普及以及使用人数大幅增长，人们对IP<br>地址的需求也与日俱增。目前广泛采用的IPV4为32位地址，因此地址空间中只有4,294,967,296（$ 2^{32} $）个地址，况且这其中还会有<br>一些用于特殊用途的保留地址，如专用网络（约1800万个地址）和多播地址（约2.7亿个地址），这减少了可在互联网上路由的地址数量。<br>随着地址不断被分配给最终用户，IPv4地址枯竭问题也在随之产生。互联网工程任务组为了推迟这个问题的发生，推出了NAT和CIDR。但是这些过渡方案皆无法阻止地址枯竭问题的发生，只能减缓它的发生速度，最终的解决方案，仍然需要转换到IPv6。</p>
<p>IPV6采用128位地址，地址空间具有 $ 2ˆ{128} $<br>个地址，这个数字非常大，足以地球上每一粒沙子分配一个IPV6地址，由此从根本上解决了IP地址不够用的问题。</p>
<h2 id="关于IPV6的一些补充说明"><a href="#关于IPV6的一些补充说明" class="headerlink" title="关于IPV6的一些补充说明"></a>关于IPV6的一些补充说明</h2><blockquote>
<ul>
<li>IPV6不等于免费上网和高速上网</li>
</ul>
</blockquote>
<p>V6的PT资源下载站、不计费上网等相关内容和教程在网上到处都是，容易给不明情况的人造成一种误解，即IPV6技术就是一种高速网络、免费网络技术。<br>这都是不对的，所谓的高速下载和不计费，不过是因为国内V6的发展状况导致的临时现象罢了。</p>
<p>由于现在国内V6主要是用的人相对较少，<br>链路更加专用，所以速度自然就显得更快一些，<br>估计是因为受众小，很多部署V6的高校暂时懒得针对V6进行计费，所以才有所谓的免费上网。不过据说有些高校已经针对V6流量进行单独计费了,这点博主不大清楚，本文主要针对和博主学校目前的网络状况进行探讨。<br>更多的只是整理一下自己折腾的过程</p>
<blockquote>
<ul>
<li>严格来讲本集讨论的是6to4和4to6的各种实现过程</li>
</ul>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zh.wikipedia.org/wiki/IPv6" target="_blank" rel="noopener">Wikipedia</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IPV6是什么&quot;&gt;&lt;a href=&quot;#IPV6是什么&quot; class=&quot;headerlink&quot; title=&quot;IPV6是什么&quot;&gt;&lt;/a&gt;IPV6是什么&lt;/h2&gt;&lt;p&gt;为了通过互联网进行通信，电脑和其他设备必须有发送者和接收者地址，&lt;br&gt;这些数字地址称为互联网协议地址也就是我们常说的IP地址，常见的IP地址分为&lt;br&gt;IPv4与IPv6两大类，其中IPV4地址就是我们平时所熟知的IP地址，&lt;br&gt;而IPV6则为网际协议第6版，是网际协议(IP)的最新版本。&lt;/p&gt;
    
    </summary>
    
      <category term="IPV6" scheme="http://blog.yinzi.me/categories/IPV6/"/>
    
    
      <category term="IPV6" scheme="http://blog.yinzi.me/tags/IPV6/"/>
    
  </entry>
  
  <entry>
    <title>为树莓派3安装raspbian系统与LCD屏幕驱动</title>
    <link href="http://blog.yinzi.me/post/rpi3-install_lcddivers/"/>
    <id>http://blog.yinzi.me/post/rpi3-install_lcddivers/</id>
    <published>2017-01-11T16:00:00.000Z</published>
    <updated>2021-03-03T07:25:38.458Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始着手玩自己的树莓派3，首先我选择给自己的树莓派装一个raspbian系统。</p>
<h2 id="需要准备的物品"><a href="#需要准备的物品" class="headerlink" title="需要准备的物品"></a>需要准备的物品</h2><ul>
<li>树莓派</li>
<li>SD卡以及读卡器</li>
<li>网线以及路由器</li>
</ul>
<a id="more"></a>
<h2 id="为树莓派3安装raspbian系统"><a href="#为树莓派3安装raspbian系统" class="headerlink" title="为树莓派3安装raspbian系统"></a>为树莓派3安装raspbian系统</h2><p><strong>步骤汇总</strong></p>
<ul>
<li>下载镜像包</li>
<li>准备一张SD卡插入读卡器，将读卡器插入电脑，使用<a href="https://sourceforge.net/projects/win32diskimager/" target="_blank" rel="noopener">Win32DiskImager</a>工具将镜像包烧入</li>
<li>将SD卡插入树莓派，加电启动</li>
<li>查看树莓派分配的IP地址</li>
<li>管理树莓派</li>
</ul>
<h3 id="第一步、下载系统镜像包"><a href="#第一步、下载系统镜像包" class="headerlink" title="第一步、下载系统镜像包"></a>第一步、下载系统镜像包</h3><p>首先去树莓派官网下载最新的<a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">raspbian镜像包</a>，得到一个ZIP文件。</p>
<h3 id="第二步、烧写"><a href="#第二步、烧写" class="headerlink" title="第二步、烧写"></a>第二步、烧写</h3><p><strong>解压上一步下载好的镜像包，得到.img后缀的文件</strong>。将准备好的读卡器插入电脑，打开Win32DiskImager软件，如图所示。<br><img src="http://1.bp.blogspot.com/-mCG2Zsy-rLs/T9amHA1ICKI/AAAAAAAAEbc/YNOPUFOq3ek/s1600/Win32%2BDisk%2BImager.PNG" alt="Win32DiskImager"></p>
<p>点击那个蓝色的小按钮选择img文件，然后确保Device内是你读卡器的盘符后点Write开始烧录。</p>
<h3 id="第三步、无显示器管理树莓派"><a href="#第三步、无显示器管理树莓派" class="headerlink" title="第三步、无显示器管理树莓派"></a>第三步、无显示器管理树莓派</h3><p>给树莓派供电后，用网线将树莓派插到路由器的LAN口，然后进路由器查看路由器给树莓派分配的IP地址。用putty工具连接树莓派，默认用户名为pi，密码是raspberry。</p>
<blockquote>
<p>在Linux系统上,一般使用ssh pi@树莓派的ip地址 命令来直接连接树莓派。Windows底下一般使用putty，也有用SecureCRT的，看个人习惯。</p>
</blockquote>
<h2 id="安装树莓派LCD屏幕驱动"><a href="#安装树莓派LCD屏幕驱动" class="headerlink" title="安装树莓派LCD屏幕驱动"></a>安装树莓派LCD屏幕驱动</h2><p>成功进入树莓派的终端以后，我还需要将买来的微雪家的3.5寸LCD驱动起来。参考<a href="http://www.waveshare.net/wiki/3.5inch_RPi_LCD_(A" target="_blank" rel="noopener">官网</a>)的步骤，整理如下。</p>
<ul>
<li><a href="http://www.waveshare.net/w/upload/9/95/LCD-show-160813.tar.gz" target="_blank" rel="noopener">下载驱动</a></li>
<li>安装驱动</li>
</ul>
<h3 id="第一步、将下载的LCD驱动文件上传到树莓派上"><a href="#第一步、将下载的LCD驱动文件上传到树莓派上" class="headerlink" title="第一步、将下载的LCD驱动文件上传到树莓派上"></a>第一步、将下载的LCD驱动文件上传到树莓派上</h3><p>利用<a href="https://winscp.net/download/WinSCP-5.9.2-Setup.exe" target="_blank" rel="noopener">winscp</a>工具连接树莓派，将文件拉到/boot目录即可。</p>
<blockquote>
<p>linux系统下可以直接使用scp命令。需要注意的是，使用scp命令时，为了规避权限的问题，建议现将文件上传到/tmp中，然后再复制到需要的目录。假设文件存在本地的/tmp目录中，使用示例如下</p>
<p>在本地输入</p>
<p> <code>scp /tmp/LCD-show-160813.tar.gz pi@192.168.41.214:/tmp/LCD-show-160813.tar.gz</code></p>
<p>其中<code>192.168.41.214</code>为树莓派IP地址，如此即可将文件上传到树莓派的/tmp目录中，然后只要将文件移动到／boot目录</p>
<p><code>mv LCD-show-160813.tar.gz ／boot／</code></p>
</blockquote>
<p>成功上传到/boot目录以后，执行以下操作</p>
<pre><code>sudo tar xzvf /boot/LCD-show-YYMMDD.tar.gz
cd LCD-show/
sudo ./LCD35-show
</code></pre><p>树莓派会自动重启，重启后即可正常使用。</p>
<blockquote>
<p>如果比较懒，也可以直接使用LCD厂商提供的装好驱动的镜像，烧进去就能显像，适合新手。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开始着手玩自己的树莓派3，首先我选择给自己的树莓派装一个raspbian系统。&lt;/p&gt;
&lt;h2 id=&quot;需要准备的物品&quot;&gt;&lt;a href=&quot;#需要准备的物品&quot; class=&quot;headerlink&quot; title=&quot;需要准备的物品&quot;&gt;&lt;/a&gt;需要准备的物品&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;树莓派&lt;/li&gt;
&lt;li&gt;SD卡以及读卡器&lt;/li&gt;
&lt;li&gt;网线以及路由器&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Diy" scheme="http://blog.yinzi.me/categories/Diy/"/>
    
    
      <category term="树莓派入门" scheme="http://blog.yinzi.me/tags/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Centos7搭建shadowsocksR</title>
    <link href="http://blog.yinzi.me/post/centos-installssr/"/>
    <id>http://blog.yinzi.me/post/centos-installssr/</id>
    <published>2016-12-03T16:00:00.000Z</published>
    <updated>2021-03-03T07:03:52.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是在免费学习机房分享的时候现场编写的，现在整理一下顺便发出来，其实就是搬的brewa11的github上的wiki,感兴趣的同学可以去原文看。</p>
<p>本文仅用来整理自己的步骤。</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h3><blockquote>
<p>Shadowsocks（中文名称：影梭）是使用Python、C++、C#等语言开发的、基于Apache许可证的开放源代码软件，用于保护网络流量、加密数据传输。Shadowsocks使用Socks5代理方式。<br>Shadowsocks分为服务器端和客户端。在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。<br>在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。在2015年8月22日，Shadowsocks原作者Clowwindy称受到了中国政府的压力，宣布停止维护此项目并移除其用户页面所载的源代码。[2][3]</p>
</blockquote>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/8/8d/Shadowsocks_logo.png" alt="Shadowsocks"></p>
<h3 id="Shadowsocks-RSS"><a href="#Shadowsocks-RSS" class="headerlink" title="Shadowsocks-RSS"></a>Shadowsocks-RSS</h3><p>Shadowsocks原本停止维护后，由@breakwa11继续参与维护的一个shadowsocks的版本。</p>
<h2 id="搭建方法"><a href="#搭建方法" class="headerlink" title="搭建方法"></a>搭建方法</h2><ul>
<li>脚本一键安装</li>
</ul>
<p>网上有很多网友自己制作的省心的一键搭建脚本。如果只是想要搭建不想细究和维护，可以考虑使用一键脚本。但手动可以帮助我们了解它。<br>如：<a href="https://shadowsocks.be/9.html" target="_blank" rel="noopener">秋水逸冰的一键脚本</a><br>使用方法参照原文博客，不再赘述。如果只想要有个能用的SSR，到这里就可以止步了。</p>
<ul>
<li>手动安装<br>手动安装的方法原作者的博客已经整理的非常详细了，可以参考<br><a href="https://github.com/breakwa11/shadowsocks-rss/wiki/Server-Setup" target="_blank" rel="noopener">Server-Setup</a><br>在这里针对CentOS7简单地记录一下过程。</li>
</ul>
<h2 id="手动安装的步骤"><a href="#手动安装的步骤" class="headerlink" title="手动安装的步骤"></a>手动安装的步骤</h2><h3 id="需要条件"><a href="#需要条件" class="headerlink" title="需要条件"></a>需要条件</h3><ul>
<li><p>有一台装有CentOS7且接入互联网的服务器。</p>
<p> 一般都是VPS。如果是用来查阅墙外资料的话推荐国外vps，推荐Digitalocean，这家可以申请github学生优惠包，一年才5$，比较划算。DO家的新加坡线路对移动用户还是比较友好的。</p>
<p> 有如果是单纯用来学习如何搭建的话国内一些厂商的学生机还是比较便宜的，比如腾讯云的1元/月，阿里云的9.9/月等等，都足够用来学学网络编程或者搭建自己的主页使用了。</p>
</li>
<li><p>有一定的Linux系统知识：ls、cd、wget、git</p>
</li>
<li>有爱折腾的精神</li>
</ul>
<h3 id="具体操作步骤"><a href="#具体操作步骤" class="headerlink" title="具体操作步骤"></a>具体操作步骤</h3><ul>
<li><p>连接上VPS，ssh</p>
</li>
<li><p>输入命令</p>
<blockquote>
<p><code>yum install git</code><br><code>git clone -b manyuser https://github.com/shadowsocksr/shadowsocksr.git</code> </p>
</blockquote>
</li>
</ul>
<p>执行完毕后此目录会新建一个shadowsocksr目录，其中根目录的是多用户版（即数据库版，个人用户请忽略这个），子目录中的是单用户版(即shadowsocksr/shadowsocks)。</p>
<p>根目录即 ./shadowsocksr</p>
<p>子目录即 ./shadowsocksr/shadowsocks</p>
<p>进入根目录初始化配置(假设根目录在~/shadowsocksr，如果不是，命令需要适当调整)：</p>
<blockquote>
<p><code>cd ~/shadowsocksr</code><br><code>bash initcfg.sh</code></p>
</blockquote>
<p>以下步骤要进入子目录：</p>
<blockquote>
<p><code>cd ~/shadowsocksr/shadowsocks</code></p>
</blockquote>
<p>修改user-config.json中的server_port，password等字段，具体可参见：<br><a href="https://github.com/breakwa11/shadowsocks-rss/wiki/config.json" target="_blank" rel="noopener">config.json</a></p>
<blockquote>
<p><code>python server.py</code></p>
</blockquote>
<p>如果要在后台运行：</p>
<blockquote>
<p><code>python server.py -d start</code></p>
<p><code>python server.py -d stop/restart</code></p>
</blockquote>
<p>防火墙设置</p>
<p>运行server.py后发现客户端仍然连接不上，因为指定端口没有开放。<br>CentOS7以后默认防火墙从原来的iptables变成了firewalld，开放端口的命令如下:</p>
<blockquote>
<p><code>firewall-cmd --zone=public --add-port=端口/tcp --permanent</code></p>
</blockquote>
<p>把端口换成自行设置的ServerPort即可。</p>
<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><p>以上步骤完成后，应该就可以愉快地使用ssr了，不过每次开机都需要手动运行比较麻烦，这里还需要配置一下开机自启。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=ShadowsocksR server</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/shadowsocks.pid</span><br><span class="line">ExecStart=/usr/bin/python /usr/local/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocks.pid -c /etc/shadowsocks.json -d start</span><br><span class="line">ExecStop=/usr/bin/python /usr/local/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocks.pid -c /etc/shadowsocks.json -d stop</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>请将上述脚本保存为/etc/systemd/system/shadowsocks.service</p>
<p>并执行systemctl enable shadowsocks.service &amp;&amp; systemctl start shadowsocks.service</p>
<p>–</p>
<h3 id="Done-Enjoy-it"><a href="#Done-Enjoy-it" class="headerlink" title="Done!Enjoy it ~"></a>Done!Enjoy it ~</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文是在免费学习机房分享的时候现场编写的，现在整理一下顺便发出来，其实就是搬的brewa11的github上的wiki,感兴趣的同学可以去原文看。&lt;/p&gt;
&lt;p&gt;本文仅用来整理自己的步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机相关技术" scheme="http://blog.yinzi.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Network" scheme="http://blog.yinzi.me/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>DELL inspiron 7447 黑苹果折腾记录</title>
    <link href="http://blog.yinzi.me/post/7447-hackintosh/"/>
    <id>http://blog.yinzi.me/post/7447-hackintosh/</id>
    <published>2016-04-04T16:00:00.000Z</published>
    <updated>2021-03-03T07:03:52.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>作为一名穷逼学生总是想蹭点生活费花花。奈何生性懒惰，体质孱弱，洗不了盘子，发不了传单。</p>
<p>前一段时间买了个几块钱的APP玩顿感肉疼的同时突然觉得也许写个APP啥的挂在appstore上卖是个发家致富的好方法~q(≧▽≦q)</p>
<p>于是雄心勃勃的要去学Swift(●’◡’●)，第一步，我需要一个Mac OS系统</p>
<h2 id="Mac-系统获得方案"><a href="#Mac-系统获得方案" class="headerlink" title="Mac 系统获得方案"></a>Mac 系统获得方案</h2><a id="more"></a>
<blockquote>
<ul>
<li>方案1 土豪专属，直接买一台MacBook Air/Pro</li>
</ul>
</blockquote>
<p><img src="http://images.apple.com/macbook-air/images/overview_hero_hero_2x.jpg" alt="MacBook Air"><br>（╯－＿－）╯╧╧，看到这价格我内心是绝然崩溃的，我只是想水一波零花钱，这么一来我连成本都收不回来啦~</p>
<blockquote>
<p>方案2 懒人必备，虚拟机安装OS X</p>
</blockquote>
<p>这个方案确实方便省时成本低，想尝试的同学可以参考我的帖子。<br><a href="http://fcc.cumt.edu.cn/forum.php?mod=viewthread&amp;tid=58" target="_blank" rel="noopener">虚拟机安装Mac OS</a></p>
<p>但是这个方法最大的缺点就是虚拟显卡带不起来水果的图形加速，于是你一点启动器就各种卡顿，</p>
<p>本人强迫症，不能忍不能忍（╯－＿－）╯╧╧</p>
<blockquote>
<ul>
<li>方案3 屌丝逆袭，普通PC机上装Mac OS</li>
</ul>
</blockquote>
<p>首先看看什么叫黑苹果</p>
<blockquote>
<p>黑苹果 （操作系统）<br>自从苹果采用Intel的处理器，OS X被黑客破解后可以安装在Intel CPU与部分AMD CPU的机器上。从而出现了一大批未购买苹果机而使用苹果操作系统的机器，被称为黑苹果(Hackintosh)；在Mac苹果机上面安装原版Mac系统的被称为白苹果（Macintosh），与黑苹果相对。<br>注：摘自百度百科</p>
</blockquote>
<p>本次安装黑苹果将使用一个叫做Clover的引导，这是一个开源的EFI bootloader引导项目，支持OSX的启动和参数更改，具体请参看</p>
<p><a href="https://sourceforge.net/projects/cloverefiboot/" target="_blank" rel="noopener">Clvoer efi bootloader</a></p>
<p>以安装<em>OS X 10.11.3 EI Captin</em>系统为例</p>
<h2 id="开始折腾"><a href="#开始折腾" class="headerlink" title="开始折腾"></a>开始折腾</h2><h2 id="配置单以及驱动情况"><a href="#配置单以及驱动情况" class="headerlink" title="配置单以及驱动情况"></a>配置单以及驱动情况</h2><blockquote>
<ul>
<li><p>电脑品牌：戴尔灵越7447 Dell Inspiron 7447</p>
</li>
<li><p>CPU：I5-4200H Haswell架构</p>
</li>
<li>内存：4G+4G</li>
<li>系统：Win10 1151 updated</li>
<li>硬盘：128SSD+1024GBHHD</li>
<li>核心显卡：Intel(R)HD Graphics 4600 (完美驱动支持HDMI输出)</li>
<li>独立显卡（双显卡笔记本独显无解）：NVDIA GTX850M </li>
</ul>
<p><strong>注意，采用双显卡的笔记本只可能驱动核显，除非部分笔记本出厂的时候在硬件上屏蔽核显。</strong> </p>
<ul>
<li><p>声卡： Realtek ALC255(仿冒为Applehda.kext完美驱动)</p>
</li>
<li><p>无线网卡：原：Intel AC无线网卡(无解) 更换为:BCM94352（支持蓝牙4.0，直接安装驱动即可）</p>
</li>
<li><p>有线网卡：板载网卡，免驱</p>
</li>
<li><p>分区表：UEFI+GPT</p>
</li>
</ul>
</blockquote>
<h2 id="步骤一、制作安装U盘"><a href="#步骤一、制作安装U盘" class="headerlink" title="步骤一、制作安装U盘"></a>步骤一、制作安装U盘</h2><p>首先下载一个带Clover引导的OSX 10.11.3的包，这里推荐下载网友制作好的，方便省心。</p>
<p><a href="http://bbs.pcbeta.com/viewthread-1670310-1-1.html" target="_blank" rel="noopener">远景技术论坛下载地址</a></p>
<p>下载其中的<em>USB_Clover_Install_OS_X_El_10.11.3_15D21.dmg</em></p>
<p>然后<strong>以管理员身份运行</strong><a href="http://www.acutesystems.com/scrtm.htm" target="_blank" rel="noopener">transmac</a>工具，如图所示</p>
<p><img src="http://www.acutesystems.com/images/tmscr.gif" alt="transmac"></p>
<p>然后右键点击 U盘，选择Restore from image这个项，然后选中下载，选择dmg映像，确定。这个过程如果U盘一般的话，应该需要20多分钟，请耐心等待。（务必注意事先备份U盘数据）</p>
<p>等制作完毕后，我们的准备工作就算是做好啦。</p>
<h2 id="步骤二、安装系统，结束此步基本就成功了一大半"><a href="#步骤二、安装系统，结束此步基本就成功了一大半" class="headerlink" title="步骤二、安装系统，结束此步基本就成功了一大半"></a>步骤二、安装系统，结束此步基本就成功了一大半</h2><p>进入U盘，U盘制作完毕后，重启计算机，开机的时候按F12 (戴尔多为F12)，进入boot menu，选择U盘所对应的EFI启动项启动。如图所示<br><img src="/post/7447-hackintosh/../../../img/bootmenu.png" alt="bootmenu"></p>
<p>进入以后出现clover引导界面，和我不一样的是因为主题不一样的原因，clover可以自己更换主题，很炫酷有木有~q(≧▽≦q)<br><img src="http://cdn.pcbeta.attachment.inimc.com/data/attachment/album/201403/02/13595029lk2q26fxf36s2s.png" alt="clover引导界面"><br>大概像这样，图片上的选择很多是因为硬盘里装的系统多，实际安装的时候不会出现这么多选项的，</p>
<p>找到一个叫boot os x install from os x eicaptin后，</p>
<p><strong>按空格进入选择菜单</strong></p>
<p>选择verbose mode(啰嗦模式，如果过程出错可以根据相关信息查找资料修改config.plist)</p>
<p>这个安装过程因人而异，有的电脑改都不用改直接就能装，有的电脑比如我的,会出现秒重启的现象，出现这种现象，只要打开U盘中clvoer目录先的config.plist，将其中kernalPM改为ture即可。</p>
<p>其它的错误请大家根据报错信息到各大论坛上发帖求助。一定要沉住气，有耐心，过了这一步，基本上就成功80%,只剩下一些驱动问题。</p>
<p>等加载过程完毕后，将会出现OS X的安装界面（这多半是个好兆头），如图，安装前需要先打开工具里的磁盘工具<br><img src="http://images.weiphone.net/data/attachment/forum/201401/09/100220nr44orrv8farro0c.jpg" alt="磁盘工具"><br>———————————2016年7月23日更新—————————<br>-<br>虽然最近先是忙考试又是电设的，不过自己写的博文跪着也得更新完呀QAQ<br><img src="/post/7447-hackintosh/Disk.png" alt="磁盘工具"><br>如图，直接把整块硬盘点抹除（好吧，其实可以分区，不过讲起来好麻烦，我就偷偷懒）。嗯，回到安装页面，选择那个分区点安装就好，安装的剩下步骤没什么好说的了，跟着提示走就好。</p>
<h2 id="步骤三、完善驱动"><a href="#步骤三、完善驱动" class="headerlink" title="步骤三、完善驱动"></a>步骤三、完善驱动</h2><p>装完以后终于可以进去美美哒的Mac OS啦，不过先不要高兴的太早，现在这个Mac各个部分的驱动都还没有安装，wifi、电源管理、关机、亮度调整、声音等等都需要调整，是不是听着就头大了呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动机&quot;&gt;&lt;a href=&quot;#动机&quot; class=&quot;headerlink&quot; title=&quot;动机&quot;&gt;&lt;/a&gt;动机&lt;/h2&gt;&lt;p&gt;作为一名穷逼学生总是想蹭点生活费花花。奈何生性懒惰，体质孱弱，洗不了盘子，发不了传单。&lt;/p&gt;
&lt;p&gt;前一段时间买了个几块钱的APP玩顿感肉疼的同时突然觉得也许写个APP啥的挂在appstore上卖是个发家致富的好方法~q(≧▽≦q)&lt;/p&gt;
&lt;p&gt;于是雄心勃勃的要去学Swift(●’◡’●)，第一步，我需要一个Mac OS系统&lt;/p&gt;
&lt;h2 id=&quot;Mac-系统获得方案&quot;&gt;&lt;a href=&quot;#Mac-系统获得方案&quot; class=&quot;headerlink&quot; title=&quot;Mac 系统获得方案&quot;&gt;&lt;/a&gt;Mac 系统获得方案&lt;/h2&gt;
    
    </summary>
    
      <category term="计算机相关技术" scheme="http://blog.yinzi.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac OS" scheme="http://blog.yinzi.me/tags/Mac-OS/"/>
    
  </entry>
  
</feed>
