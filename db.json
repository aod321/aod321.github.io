{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/public","path":"public","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"source/assets/img/alipay.jpeg","path":"assets/img/alipay.jpeg","modified":0,"renderable":0},{"_id":"source/assets/img/favicon.png","path":"assets/img/favicon.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/assets/img/Disk.png","path":"assets/img/Disk.png","modified":0,"renderable":0},{"_id":"source/assets/img/wechat.jpeg","path":"assets/img/wechat.jpeg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"a1887e12561eb30d9eac11dde1c71cda0e21740c","modified":1592369316077},{"_id":"source/public","hash":"b858f82b0bff4ab3a4ed784a47221469ebe411fe","modified":1592329792707},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1592329792870},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1592329792871},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1592329792871},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1592329792871},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1592329792871},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1592329792871},{"_id":"themes/yilia/_config.yml","hash":"a92938580e7701c862d18f3138c794d6311afad7","modified":1592329792871},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1592329792871},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1592329792882},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1592329792897},{"_id":"source/_posts/.DS_Store","hash":"f9a7e2e81f21d60aede01eb42516fd79de49ef4d","modified":1592329792699},{"_id":"source/_posts/Centos 7部署VMESS+TCP+TLS.md","hash":"ff3e3b6bd4ae7d92768f01418f8014b82d0d0cc8","modified":1592375151581},{"_id":"source/_posts/DELL inprison 7447 黑苹果折腾记录.md","hash":"5b3ac9ecc71f197fa3383beaf20509ea57abaf20","modified":1592329792700},{"_id":"source/_posts/Centos7搭建shadowsocksR.md","hash":"cf2933154ef45e8a1dc6c89eaf330ffa2c940d3d","modified":1592329792699},{"_id":"source/_posts/Kdatacenter迁移记录.md","hash":"67959d0ab9262bfdeda0dd1af33b99027a5c4d9e","modified":1592373559610},{"_id":"source/_posts/LT3757学习笔记.md","hash":"5606bccc1b356f2229924c05138910a62454c72b","modified":1592329792700},{"_id":"source/_posts/V6初识.md","hash":"3cd964ce764c7d607c231e27983b9ac163da493b","modified":1592329792701},{"_id":"source/_posts/V6资源介绍-1.md","hash":"dc9515137a7324bbf8e862c8a1e0f60d7b659594","modified":1592329792703},{"_id":"source/_posts/ipv6折腾集.md","hash":"fd6b4458f3e7cf90d1a9531e533f77c824f70ae2","modified":1592329792704},{"_id":"source/_posts/了解ipv6.md","hash":"e200ae805ed60ecfda3a36afb46c64261e0c6a28","modified":1592329792704},{"_id":"source/_posts/树莓派的系统安装与使用.md","hash":"c2cbf7625befbe37022732bfb7ef0c700baccdfd","modified":1592329792704},{"_id":"source/assets/.DS_Store","hash":"9da10a9e70aae078526697231568d0a83fd6cc54","modified":1592329792704},{"_id":"source/others/DELL inprison 7447 黑苹果折腾记录.md","hash":"c2c586f60512eb02ea025ed36ffa456b47edc229","modified":1592329792706},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1592329792872},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1592329792872},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1592329792872},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1592329792872},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1592329792873},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1592329792872},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1592329792872},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1592329792881},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1592329792881},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1592329792881},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1592329792881},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1592329792882},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1592329792881},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1592329792882},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1592329792896},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1592329792897},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1592329792882},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1592329792893},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1592329792880},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1592329792896},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1592329792897},{"_id":"source/_posts/V6初识/1-1.png","hash":"4606bb8b468744cbdd879f8d90ef9e34c583e21c","modified":1592329792701},{"_id":"source/_posts/V6初识/1-2.png","hash":"96091d36dc151fd83b5523f625387376ad305c3f","modified":1592329792701},{"_id":"source/_posts/V6初识/2.png","hash":"d151d85e508dd6346f5213f51240e25e6bc5cea5","modified":1592329792702},{"_id":"source/_posts/V6初识/1.png","hash":"e2d4e87d3427b3fa9b9dce722a14494d5aeabe64","modified":1592329792702},{"_id":"source/_posts/V6初识/3.png","hash":"ed6eebeda87c14a5d71c004d95dc737ece72ba14","modified":1592329792702},{"_id":"source/_posts/V6初识/4.png","hash":"674a8d86d55bf187c81cd4f5c7ec47892d1a3ba9","modified":1592329792703},{"_id":"source/_posts/V6初识/5.png","hash":"657b7abe953ff36c32b67d4ef99a95cfde00b6a4","modified":1592329792703},{"_id":"source/_posts/V6初识/6.png","hash":"6f4f5a498249720ea85191f1754521c464577cab","modified":1592329792703},{"_id":"source/_posts/V6资源介绍-1/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1592329792704},{"_id":"source/assets/img/.DS_Store","hash":"4a10f4eef0064fa635e4aa52aea139b6baf4aa9e","modified":1592329792705},{"_id":"source/assets/img/alipay.jpeg","hash":"61c9880cae031f74ab40ab320d8c2c5cc90ce2dc","modified":1592329792705},{"_id":"source/assets/img/favicon.png","hash":"0114e4779f7412d5163fb381999b1863620bb8de","modified":1592329792706},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1592329792873},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1592329792873},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1592329792874},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1592329792874},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1592329792874},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1592329792875},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1592329792875},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1592329792875},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1592329792875},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1592329792876},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1592329792876},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1592329792876},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1592329792876},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1592329792876},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1592329792881},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1592329792881},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1592329792893},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1592329792893},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1592329792894},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1592329792894},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1592329792894},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1592329792895},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1592329792895},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1592329792895},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1592329792895},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1592329792882},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1592329792883},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1592329792883},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1592329792883},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1592329792883},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1592329792883},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1592329792884},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1592329792884},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1592329792884},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1592329792886},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1592329792887},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1592329792887},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1592329792887},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1592329792887},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1592329792888},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1592329792888},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1592329792888},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1592329792889},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1592329792889},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1592329792889},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1592329792889},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1592329792889},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1592329792889},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1592329792889},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1592329792890},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1592329792890},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1592329792890},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1592329792890},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1592329792891},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1592329792891},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1592329792891},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1592329792891},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1592329792891},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1592329792892},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1592329792892},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1592329792892},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1592329792892},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1592329792892},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1592329792893},{"_id":"source/assets/img/Disk.png","hash":"07bf1decd91b2b77cf79e16a8df0979a83ad472e","modified":1592329792705},{"_id":"source/assets/img/wechat.jpeg","hash":"cdc2fa310e8dab9ad247303c0d9746d605a98c58","modified":1592329792706},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1592329792880},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1592329792877},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1592329792877},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1592329792877},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1592329792878},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1592329792878},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1592329792878},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1592329792878},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1592329792879},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1592329792879},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1592329792879},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1592329792884},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1592329792884},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1592329792885},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1592329792885},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1592329792885},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1592329792886},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1592329792886},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1592329792887},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1592329792888},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1592329792888},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1592329792888},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1592329792887},{"_id":"source/_posts/image-20200617134054455.png","hash":"5a53062c0680bf0bacb7250afa604cd8941205dd","modified":1592372454455},{"_id":"source/_posts/image-20200617134052546.png","hash":"5a53062c0680bf0bacb7250afa604cd8941205dd","modified":1592372452547},{"_id":"public/atom.xml","hash":"60870b24643309bc2c8384b08cb8ee535dc1cc67","modified":1592375168001},{"_id":"public/content.json","hash":"561b0bcbd29b85c4bc0e08c16a151747ebea314a","modified":1592374523463},{"_id":"public/sitemap.xml","hash":"514e87b66f7083cf8425afab9fcceb221c999fc6","modified":1592375168052},{"_id":"public/others/DELL inprison 7447 黑苹果折腾记录.html","hash":"993b0577cebd6d5e72a02c38f3ab040e53f7b0ee","modified":1592373757723},{"_id":"public/post/deeply_vmess_ws_tls_on_centos7/index.html","hash":"ce841da2099e6ee7a2ab954c53fa5e1c2e7b3dfd","modified":1592373991372},{"_id":"public/post/record_of_my_migration/index.html","hash":"6b67a723feb805c577342d7bd93ac4da7efd2dc2","modified":1592374523816},{"_id":"public/post/electric/index.html","hash":"f2b94a802fc7c8ab56c9f5d25d2988c086a85987","modified":1592373757723},{"_id":"public/post/funwithIPV6/index.html","hash":"4c52949072c5060200d98bae1db0e3c4dcf40fa9","modified":1592373757724},{"_id":"public/post/basicipv6/index.html","hash":"7b07afb112385e64127b8d5987c3f9c55da0565f","modified":1592373757724},{"_id":"public/post/v6resource/index.html","hash":"cb72a86e1773547cdd0297e946a21fe808d10bd6","modified":1592373757724},{"_id":"public/post/rpi3-install_lcddivers/index.html","hash":"11b36e2ad18bd0b36019020332d230e461c55338","modified":1592373757725},{"_id":"public/post/knowaboutipv6/index.html","hash":"cd25607441493fbceed2e8ed20f83a08c82b2e03","modified":1592373757725},{"_id":"public/post/centos-installssr/index.html","hash":"6f330b30113facbbec8337a9e52fc7e7c1104ef7","modified":1592373757725},{"_id":"public/post/7447-hackintosh/index.html","hash":"daf8dc6125343c3899b61645ce305790ae278721","modified":1592373757725},{"_id":"public/archives/index.html","hash":"39e884566dd4116d456f64e99ecbf72ea4e9ba69","modified":1592374523848},{"_id":"public/archives/2016/index.html","hash":"6bc5eab3c93d7f57aa131f2e0d5d83879428c231","modified":1592373757726},{"_id":"public/archives/2016/04/index.html","hash":"e842bcc96c882db47972cdb85e6f11e40c28a50e","modified":1592373757726},{"_id":"public/archives/2016/12/index.html","hash":"c4bb47bdb42da49681f3f899d5b34c2f28d2376a","modified":1592373757726},{"_id":"public/archives/2017/index.html","hash":"630ed00d88f4258877f59084f1637dce8cac4ea5","modified":1592373757726},{"_id":"public/archives/2017/01/index.html","hash":"54a1bab5c65dad87b6ccdaeff1c361ea21798aca","modified":1592373757727},{"_id":"public/archives/2018/index.html","hash":"9c74efcc435386d4cd43f4bf9a3d572e97435235","modified":1592373757727},{"_id":"public/archives/2018/01/index.html","hash":"6b6a1f7bb66bcb1abf02cd4e9a41192e83ba805b","modified":1592373757727},{"_id":"public/archives/2018/02/index.html","hash":"4279fc10b28af4424b8c04661ffe2f9bbcef9b43","modified":1592373757728},{"_id":"public/archives/2018/07/index.html","hash":"4edcb9856b1b793dc15b95badc5f8f79412e51ac","modified":1592373757729},{"_id":"public/archives/2020/index.html","hash":"b02e232b66c9d02787b61e8f0feff4eff8beffc9","modified":1592374523849},{"_id":"public/archives/2020/06/index.html","hash":"077f822f18416a1c5c13ec5c1525117c057d06ca","modified":1592374523850},{"_id":"public/categories/计算机网络/index.html","hash":"8dcf67e104a9c1c3af050391cd28711b4b4123c1","modified":1592374523851},{"_id":"public/categories/计算机相关技术/index.html","hash":"1abaf69e7e0f5e182f60d794753c308af4bd6033","modified":1592373757730},{"_id":"public/categories/电子/index.html","hash":"494004785325dc368b47ff08b817d3fe5f755ec4","modified":1592373757730},{"_id":"public/categories/IPV6/index.html","hash":"1fc44a13334532349feb8ffea64aaafe91be2980","modified":1592373757731},{"_id":"public/categories/Diy/index.html","hash":"0cfc2112f9ccc2bb5ced86bbca2c3c86e685bdda","modified":1592373757731},{"_id":"public/index.html","hash":"c7acea26e99a5522f808ffeb9fad055cacf7ac40","modified":1592374523851},{"_id":"public/tags/Network/index.html","hash":"6b41904d70b5c9a2ecd44370d769b5694fecf8fe","modified":1592374523851},{"_id":"public/tags/Mac-OS/index.html","hash":"54fb070288ea34320f1face83145649fdb2c2fc0","modified":1592373757733},{"_id":"public/tags/电子/index.html","hash":"51881cf13de08ce11b7194de955eb7baf2df11cb","modified":1592373757733},{"_id":"public/tags/IPV6/index.html","hash":"d0ce32a5274088f0fbb3fedf4414f17ea4524f28","modified":1592373757733},{"_id":"public/tags/树莓派入门/index.html","hash":"002a236129c05e3f9196650115bbd8819f071544","modified":1592373757733},{"_id":"public/public","hash":"b858f82b0bff4ab3a4ed784a47221469ebe411fe","modified":1592373757741},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1592373757741},{"_id":"public/assets/img/favicon.png","hash":"0114e4779f7412d5163fb381999b1863620bb8de","modified":1592373757741},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1592373757742},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1592373757742},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1592373757742},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1592373757742},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1592373757742},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1592373757742},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1592373757742},{"_id":"public/post/basicipv6/1-1.png","hash":"4606bb8b468744cbdd879f8d90ef9e34c583e21c","modified":1592373757742},{"_id":"public/post/basicipv6/1-2.png","hash":"96091d36dc151fd83b5523f625387376ad305c3f","modified":1592373757742},{"_id":"public/post/basicipv6/1.png","hash":"e2d4e87d3427b3fa9b9dce722a14494d5aeabe64","modified":1592373757743},{"_id":"public/post/basicipv6/3.png","hash":"ed6eebeda87c14a5d71c004d95dc737ece72ba14","modified":1592373757743},{"_id":"public/post/basicipv6/2.png","hash":"d151d85e508dd6346f5213f51240e25e6bc5cea5","modified":1592373757743},{"_id":"public/post/basicipv6/4.png","hash":"674a8d86d55bf187c81cd4f5c7ec47892d1a3ba9","modified":1592373757743},{"_id":"public/post/basicipv6/5.png","hash":"657b7abe953ff36c32b67d4ef99a95cfde00b6a4","modified":1592373757743},{"_id":"public/post/basicipv6/6.png","hash":"6f4f5a498249720ea85191f1754521c464577cab","modified":1592373757743},{"_id":"public/assets/img/alipay.jpeg","hash":"61c9880cae031f74ab40ab320d8c2c5cc90ce2dc","modified":1592373757751},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1592373757752},{"_id":"public/assets/img/Disk.png","hash":"07bf1decd91b2b77cf79e16a8df0979a83ad472e","modified":1592373757752},{"_id":"public/assets/img/wechat.jpeg","hash":"cdc2fa310e8dab9ad247303c0d9746d605a98c58","modified":1592373757752},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1592373757763},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1592373757764},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1592373757764},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1592373757764},{"_id":"public/post/depoly_vmess_tcp_tls_on_centos7/index.html","hash":"4b6fa733094fb26ffddc03de7628a45426cc0585","modified":1592375168740}],"Category":[{"name":"计算机网络","_id":"ckbiy7xzg00035ojsmjp3go2g"},{"name":"计算机相关技术","_id":"ckbiy7xzp00085ojstk35m0j4"},{"name":"电子","_id":"ckbiy7y0c000o5ojs0a20njuh"},{"name":"IPV6","_id":"ckbiy7y0e000t5ojsam32etv6"},{"name":"Diy","_id":"ckbiy7y0k00185ojs6tch22tr"}],"Data":[],"Page":[{"layout":"Mac OS","title":"DELL inspiron 7447 黑苹果折腾记录","_content":"动机\n---\n作为一名穷逼学生总是想蹭点生活费花花。奈何生性懒惰，体质孱弱，洗不了盘子，发不了传单。\n\n前一段时间买了个几块钱的APP玩顿感肉疼的同时突然觉得也许写个APP啥的挂在appstore上卖是个发家致富的好方法~q(≧▽≦q)\n\n于是雄心勃勃的要去学Swift(●'◡'●)，第一步，我需要一个Mac OS系统\nMac 系统获得方案\n---\n\n> * 方案1 土豪专属，直接买一台MacBook Air/Pro\n\n![MacBook Air](http://images.apple.com/macbook-air/images/overview_hero_hero_2x.jpg)\n（╯－＿－）╯╧╧，看到这价格我内心是绝然崩溃的，我只是想水一波零花钱，这么一来我连成本都收不回来啦~\n>方案2 懒人必备，虚拟机安装OS X\n\n这个方案确实方便省时成本低，想尝试的同学可以参考我的帖子。\n[虚拟机安装Mac OS](http://fcc.cumt.edu.cn/forum.php?mod=viewthread&tid=58)\n\n但是这个方法最大的缺点就是虚拟显卡带不起来水果的图形加速，于是你一点启动器就各种卡顿，\n\n本人强迫症，不能忍不能忍（╯－＿－）╯╧╧\n> * 方案3 屌丝逆袭，普通PC机上装Mac OS\n\n首先看看什么叫黑苹果\n>黑苹果 （操作系统） \n自从苹果采用Intel的处理器，OS X被黑客破解后可以安装在Intel CPU与部分AMD CPU的机器上。从而出现了一大批未购买苹果机而使用苹果操作系统的机器，被称为黑苹果(Hackintosh)；在Mac苹果机上面安装原版Mac系统的被称为白苹果（Macintosh），与黑苹果相对。\n注：摘自百度百科\n\n本次安装黑苹果将使用一个叫做Clover的引导，这是一个开源的EFI bootloader引导项目，支持OSX的启动和参数更改，具体请参看\n\n[Clvoer efi bootloader](https://sourceforge.net/projects/cloverefiboot/)\n\n\n以安装*OS X 10.11.3 EI Captin*系统为例\n\n开始折腾\n----\n配置单以及驱动情况\n----\n> * 电脑品牌：戴尔灵越7447 Dell Inspiron 7447\n\n> * CPU：I5-4200H Haswell架构\n> * 内存：4G+4G\n> * 系统：Win10 1151 updated\n> * 硬盘：128SSD+1024GBHHD\n> * 核心显卡：Intel(R)HD Graphics 4600 (完美驱动支持HDMI输出)\n> * 独立显卡（双显卡笔记本独显无解）：NVDIA GTX850M \n\n>**注意，采用双显卡的笔记本只可能驱动核显，除非部分笔记本出厂的时候在硬件上屏蔽核显。** \n\n> * 声卡： Realtek ALC255(仿冒为Applehda.kext完美驱动)\n \n> * 无线网卡：原：Intel AC无线网卡(无解) 更换为:BCM94352（支持蓝牙4.0，直接安装驱动即可）\n\n> * 有线网卡：板载网卡，免驱\n \n> * 分区表：UEFI+GPT\n\n步骤一、制作安装U盘\n---\n首先下载一个带Clover引导的OSX 10.11.3的包，这里推荐下载网友制作好的，方便省心。\n\n[远景技术论坛下载地址](http://bbs.pcbeta.com/viewthread-1670310-1-1.html)\n\n下载其中的*USB_Clover_Install_OS_X_El_10.11.3_15D21.dmg*\n\n然后**以管理员身份运行**[transmac](http://www.acutesystems.com/scrtm.htm)工具，如图所示\n\n![transmac](http://www.acutesystems.com/images/tmscr.gif)\n\n然后右键点击 U盘，选择Restore from image这个项，然后选中下载，选择dmg映像，确定。这个过程如果U盘一般的话，应该需要20多分钟，请耐心等待。（务必注意事先备份U盘数据）\n\n等制作完毕后，我们的准备工作就算是做好啦。\n\n步骤二、安装系统，结束此步基本就成功了一大半\n---\n进入U盘，U盘制作完毕后，重启计算机，开机的时候按F12 (戴尔多为F12)，进入boot menu，选择U盘所对应的EFI启动项启动。如图所示\n![bootmenu](../../../../img/bootmenu.png)\n\n进入以后出现clover引导界面，和我不一样的是因为主题不一样的原因，clover可以自己更换主题，很炫酷有木有~q(≧▽≦q)\n![clover引导界面](http://cdn.pcbeta.attachment.inimc.com/data/attachment/album/201403/02/13595029lk2q26fxf36s2s.png)\n大概像这样，图片上的选择很多是因为硬盘里装的系统多，实际安装的时候不会出现这么多选项的，\n\n找到一个叫boot os x install from os x eicaptin后，\n\n**按空格进入选择菜单**\n\n选择verbose mode(啰嗦模式，如果过程出错可以根据相关信息查找资料修改config.plist)\n\n这个安装过程因人而异，有的电脑改都不用改直接就能装，有的电脑比如我的,会出现秒重启的现象，出现这种现象，只要打开U盘中clvoer目录先的config.plist，将其中kernalPM改为ture即可。\n\n其它的错误请大家根据报错信息到各大论坛上发帖求助。一定要沉住气，有耐心，过了这一步，基本上就成功80%,只剩下一些驱动问题。\n\n等加载过程完毕后，将会出现OS X的安装界面（这多半是个好兆头），如图，安装前需要先打开工具里的磁盘工具\n![磁盘工具](http://images.weiphone.net/data/attachment/forum/201401/09/100220nr44orrv8farro0c.jpg)\n---------------------------------2016年7月23日更新---------------------------\n-\n虽然最近先是忙考试又是电设的，不过自己写的博文跪着也得更新完呀QAQ\n![磁盘工具](/img/Disk.png)\n如图，直接把整块硬盘点抹除（好吧，其实可以分区，不过讲起来好麻烦，我就偷偷懒）。嗯，回到安装页面，选择那个分区点安装就好，安装的剩下步骤没什么好说的了，跟着提示走就好。\n\n步骤三、完善驱动\n---\n装完以后终于可以进去美美哒的Mac OS啦，不过先不要高兴的太早，现在这个Mac各个部分的驱动都还没有安装，wifi、电源管理、关机、亮度调整、声音等等都需要调整，是不是听着就头大了呢？\n","source":"others/DELL inprison 7447 黑苹果折腾记录.md","raw":"---\nlayout: Mac OS\ntitle: DELL inspiron 7447 黑苹果折腾记录\n\n---\n动机\n---\n作为一名穷逼学生总是想蹭点生活费花花。奈何生性懒惰，体质孱弱，洗不了盘子，发不了传单。\n\n前一段时间买了个几块钱的APP玩顿感肉疼的同时突然觉得也许写个APP啥的挂在appstore上卖是个发家致富的好方法~q(≧▽≦q)\n\n于是雄心勃勃的要去学Swift(●'◡'●)，第一步，我需要一个Mac OS系统\nMac 系统获得方案\n---\n\n> * 方案1 土豪专属，直接买一台MacBook Air/Pro\n\n![MacBook Air](http://images.apple.com/macbook-air/images/overview_hero_hero_2x.jpg)\n（╯－＿－）╯╧╧，看到这价格我内心是绝然崩溃的，我只是想水一波零花钱，这么一来我连成本都收不回来啦~\n>方案2 懒人必备，虚拟机安装OS X\n\n这个方案确实方便省时成本低，想尝试的同学可以参考我的帖子。\n[虚拟机安装Mac OS](http://fcc.cumt.edu.cn/forum.php?mod=viewthread&tid=58)\n\n但是这个方法最大的缺点就是虚拟显卡带不起来水果的图形加速，于是你一点启动器就各种卡顿，\n\n本人强迫症，不能忍不能忍（╯－＿－）╯╧╧\n> * 方案3 屌丝逆袭，普通PC机上装Mac OS\n\n首先看看什么叫黑苹果\n>黑苹果 （操作系统） \n自从苹果采用Intel的处理器，OS X被黑客破解后可以安装在Intel CPU与部分AMD CPU的机器上。从而出现了一大批未购买苹果机而使用苹果操作系统的机器，被称为黑苹果(Hackintosh)；在Mac苹果机上面安装原版Mac系统的被称为白苹果（Macintosh），与黑苹果相对。\n注：摘自百度百科\n\n本次安装黑苹果将使用一个叫做Clover的引导，这是一个开源的EFI bootloader引导项目，支持OSX的启动和参数更改，具体请参看\n\n[Clvoer efi bootloader](https://sourceforge.net/projects/cloverefiboot/)\n\n\n以安装*OS X 10.11.3 EI Captin*系统为例\n\n开始折腾\n----\n配置单以及驱动情况\n----\n> * 电脑品牌：戴尔灵越7447 Dell Inspiron 7447\n\n> * CPU：I5-4200H Haswell架构\n> * 内存：4G+4G\n> * 系统：Win10 1151 updated\n> * 硬盘：128SSD+1024GBHHD\n> * 核心显卡：Intel(R)HD Graphics 4600 (完美驱动支持HDMI输出)\n> * 独立显卡（双显卡笔记本独显无解）：NVDIA GTX850M \n\n>**注意，采用双显卡的笔记本只可能驱动核显，除非部分笔记本出厂的时候在硬件上屏蔽核显。** \n\n> * 声卡： Realtek ALC255(仿冒为Applehda.kext完美驱动)\n \n> * 无线网卡：原：Intel AC无线网卡(无解) 更换为:BCM94352（支持蓝牙4.0，直接安装驱动即可）\n\n> * 有线网卡：板载网卡，免驱\n \n> * 分区表：UEFI+GPT\n\n步骤一、制作安装U盘\n---\n首先下载一个带Clover引导的OSX 10.11.3的包，这里推荐下载网友制作好的，方便省心。\n\n[远景技术论坛下载地址](http://bbs.pcbeta.com/viewthread-1670310-1-1.html)\n\n下载其中的*USB_Clover_Install_OS_X_El_10.11.3_15D21.dmg*\n\n然后**以管理员身份运行**[transmac](http://www.acutesystems.com/scrtm.htm)工具，如图所示\n\n![transmac](http://www.acutesystems.com/images/tmscr.gif)\n\n然后右键点击 U盘，选择Restore from image这个项，然后选中下载，选择dmg映像，确定。这个过程如果U盘一般的话，应该需要20多分钟，请耐心等待。（务必注意事先备份U盘数据）\n\n等制作完毕后，我们的准备工作就算是做好啦。\n\n步骤二、安装系统，结束此步基本就成功了一大半\n---\n进入U盘，U盘制作完毕后，重启计算机，开机的时候按F12 (戴尔多为F12)，进入boot menu，选择U盘所对应的EFI启动项启动。如图所示\n![bootmenu](../../../../img/bootmenu.png)\n\n进入以后出现clover引导界面，和我不一样的是因为主题不一样的原因，clover可以自己更换主题，很炫酷有木有~q(≧▽≦q)\n![clover引导界面](http://cdn.pcbeta.attachment.inimc.com/data/attachment/album/201403/02/13595029lk2q26fxf36s2s.png)\n大概像这样，图片上的选择很多是因为硬盘里装的系统多，实际安装的时候不会出现这么多选项的，\n\n找到一个叫boot os x install from os x eicaptin后，\n\n**按空格进入选择菜单**\n\n选择verbose mode(啰嗦模式，如果过程出错可以根据相关信息查找资料修改config.plist)\n\n这个安装过程因人而异，有的电脑改都不用改直接就能装，有的电脑比如我的,会出现秒重启的现象，出现这种现象，只要打开U盘中clvoer目录先的config.plist，将其中kernalPM改为ture即可。\n\n其它的错误请大家根据报错信息到各大论坛上发帖求助。一定要沉住气，有耐心，过了这一步，基本上就成功80%,只剩下一些驱动问题。\n\n等加载过程完毕后，将会出现OS X的安装界面（这多半是个好兆头），如图，安装前需要先打开工具里的磁盘工具\n![磁盘工具](http://images.weiphone.net/data/attachment/forum/201401/09/100220nr44orrv8farro0c.jpg)\n---------------------------------2016年7月23日更新---------------------------\n-\n虽然最近先是忙考试又是电设的，不过自己写的博文跪着也得更新完呀QAQ\n![磁盘工具](/img/Disk.png)\n如图，直接把整块硬盘点抹除（好吧，其实可以分区，不过讲起来好麻烦，我就偷偷懒）。嗯，回到安装页面，选择那个分区点安装就好，安装的剩下步骤没什么好说的了，跟着提示走就好。\n\n步骤三、完善驱动\n---\n装完以后终于可以进去美美哒的Mac OS啦，不过先不要高兴的太早，现在这个Mac各个部分的驱动都还没有安装，wifi、电源管理、关机、亮度调整、声音等等都需要调整，是不是听着就头大了呢？\n","date":"2020-06-16T17:49:52.706Z","updated":"2020-06-16T17:49:52.706Z","path":"others/DELL inprison 7447 黑苹果折腾记录.html","comments":1,"_id":"ckbiy7xza00015ojsqb3gavx4","content":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>作为一名穷逼学生总是想蹭点生活费花花。奈何生性懒惰，体质孱弱，洗不了盘子，发不了传单。</p>\n<p>前一段时间买了个几块钱的APP玩顿感肉疼的同时突然觉得也许写个APP啥的挂在appstore上卖是个发家致富的好方法~q(≧▽≦q)</p>\n<p>于是雄心勃勃的要去学Swift(●’◡’●)，第一步，我需要一个Mac OS系统</p>\n<h2 id=\"Mac-系统获得方案\"><a href=\"#Mac-系统获得方案\" class=\"headerlink\" title=\"Mac 系统获得方案\"></a>Mac 系统获得方案</h2><blockquote>\n<ul>\n<li>方案1 土豪专属，直接买一台MacBook Air/Pro</li>\n</ul>\n</blockquote>\n<p><img src=\"http://images.apple.com/macbook-air/images/overview_hero_hero_2x.jpg\" alt=\"MacBook Air\"><br>（╯－＿－）╯╧╧，看到这价格我内心是绝然崩溃的，我只是想水一波零花钱，这么一来我连成本都收不回来啦~</p>\n<blockquote>\n<p>方案2 懒人必备，虚拟机安装OS X</p>\n</blockquote>\n<p>这个方案确实方便省时成本低，想尝试的同学可以参考我的帖子。<br><a href=\"http://fcc.cumt.edu.cn/forum.php?mod=viewthread&amp;tid=58\" target=\"_blank\" rel=\"noopener\">虚拟机安装Mac OS</a></p>\n<p>但是这个方法最大的缺点就是虚拟显卡带不起来水果的图形加速，于是你一点启动器就各种卡顿，</p>\n<p>本人强迫症，不能忍不能忍（╯－＿－）╯╧╧</p>\n<blockquote>\n<ul>\n<li>方案3 屌丝逆袭，普通PC机上装Mac OS</li>\n</ul>\n</blockquote>\n<p>首先看看什么叫黑苹果</p>\n<blockquote>\n<p>黑苹果 （操作系统）<br>自从苹果采用Intel的处理器，OS X被黑客破解后可以安装在Intel CPU与部分AMD CPU的机器上。从而出现了一大批未购买苹果机而使用苹果操作系统的机器，被称为黑苹果(Hackintosh)；在Mac苹果机上面安装原版Mac系统的被称为白苹果（Macintosh），与黑苹果相对。<br>注：摘自百度百科</p>\n</blockquote>\n<p>本次安装黑苹果将使用一个叫做Clover的引导，这是一个开源的EFI bootloader引导项目，支持OSX的启动和参数更改，具体请参看</p>\n<p><a href=\"https://sourceforge.net/projects/cloverefiboot/\" target=\"_blank\" rel=\"noopener\">Clvoer efi bootloader</a></p>\n<p>以安装<em>OS X 10.11.3 EI Captin</em>系统为例</p>\n<h2 id=\"开始折腾\"><a href=\"#开始折腾\" class=\"headerlink\" title=\"开始折腾\"></a>开始折腾</h2><h2 id=\"配置单以及驱动情况\"><a href=\"#配置单以及驱动情况\" class=\"headerlink\" title=\"配置单以及驱动情况\"></a>配置单以及驱动情况</h2><blockquote>\n<ul>\n<li><p>电脑品牌：戴尔灵越7447 Dell Inspiron 7447</p>\n</li>\n<li><p>CPU：I5-4200H Haswell架构</p>\n</li>\n<li>内存：4G+4G</li>\n<li>系统：Win10 1151 updated</li>\n<li>硬盘：128SSD+1024GBHHD</li>\n<li>核心显卡：Intel(R)HD Graphics 4600 (完美驱动支持HDMI输出)</li>\n<li>独立显卡（双显卡笔记本独显无解）：NVDIA GTX850M </li>\n</ul>\n<p><strong>注意，采用双显卡的笔记本只可能驱动核显，除非部分笔记本出厂的时候在硬件上屏蔽核显。</strong> </p>\n<ul>\n<li><p>声卡： Realtek ALC255(仿冒为Applehda.kext完美驱动)</p>\n</li>\n<li><p>无线网卡：原：Intel AC无线网卡(无解) 更换为:BCM94352（支持蓝牙4.0，直接安装驱动即可）</p>\n</li>\n<li><p>有线网卡：板载网卡，免驱</p>\n</li>\n<li><p>分区表：UEFI+GPT</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"步骤一、制作安装U盘\"><a href=\"#步骤一、制作安装U盘\" class=\"headerlink\" title=\"步骤一、制作安装U盘\"></a>步骤一、制作安装U盘</h2><p>首先下载一个带Clover引导的OSX 10.11.3的包，这里推荐下载网友制作好的，方便省心。</p>\n<p><a href=\"http://bbs.pcbeta.com/viewthread-1670310-1-1.html\" target=\"_blank\" rel=\"noopener\">远景技术论坛下载地址</a></p>\n<p>下载其中的<em>USB_Clover_Install_OS_X_El_10.11.3_15D21.dmg</em></p>\n<p>然后<strong>以管理员身份运行</strong><a href=\"http://www.acutesystems.com/scrtm.htm\" target=\"_blank\" rel=\"noopener\">transmac</a>工具，如图所示</p>\n<p><img src=\"http://www.acutesystems.com/images/tmscr.gif\" alt=\"transmac\"></p>\n<p>然后右键点击 U盘，选择Restore from image这个项，然后选中下载，选择dmg映像，确定。这个过程如果U盘一般的话，应该需要20多分钟，请耐心等待。（务必注意事先备份U盘数据）</p>\n<p>等制作完毕后，我们的准备工作就算是做好啦。</p>\n<h2 id=\"步骤二、安装系统，结束此步基本就成功了一大半\"><a href=\"#步骤二、安装系统，结束此步基本就成功了一大半\" class=\"headerlink\" title=\"步骤二、安装系统，结束此步基本就成功了一大半\"></a>步骤二、安装系统，结束此步基本就成功了一大半</h2><p>进入U盘，U盘制作完毕后，重启计算机，开机的时候按F12 (戴尔多为F12)，进入boot menu，选择U盘所对应的EFI启动项启动。如图所示<br><img src=\"../../../../img/bootmenu.png\" alt=\"bootmenu\"></p>\n<p>进入以后出现clover引导界面，和我不一样的是因为主题不一样的原因，clover可以自己更换主题，很炫酷有木有~q(≧▽≦q)<br><img src=\"http://cdn.pcbeta.attachment.inimc.com/data/attachment/album/201403/02/13595029lk2q26fxf36s2s.png\" alt=\"clover引导界面\"><br>大概像这样，图片上的选择很多是因为硬盘里装的系统多，实际安装的时候不会出现这么多选项的，</p>\n<p>找到一个叫boot os x install from os x eicaptin后，</p>\n<p><strong>按空格进入选择菜单</strong></p>\n<p>选择verbose mode(啰嗦模式，如果过程出错可以根据相关信息查找资料修改config.plist)</p>\n<p>这个安装过程因人而异，有的电脑改都不用改直接就能装，有的电脑比如我的,会出现秒重启的现象，出现这种现象，只要打开U盘中clvoer目录先的config.plist，将其中kernalPM改为ture即可。</p>\n<p>其它的错误请大家根据报错信息到各大论坛上发帖求助。一定要沉住气，有耐心，过了这一步，基本上就成功80%,只剩下一些驱动问题。</p>\n<p>等加载过程完毕后，将会出现OS X的安装界面（这多半是个好兆头），如图，安装前需要先打开工具里的磁盘工具<br><img src=\"http://images.weiphone.net/data/attachment/forum/201401/09/100220nr44orrv8farro0c.jpg\" alt=\"磁盘工具\"><br>———————————2016年7月23日更新—————————<br>-<br>虽然最近先是忙考试又是电设的，不过自己写的博文跪着也得更新完呀QAQ<br><img src=\"/img/Disk.png\" alt=\"磁盘工具\"><br>如图，直接把整块硬盘点抹除（好吧，其实可以分区，不过讲起来好麻烦，我就偷偷懒）。嗯，回到安装页面，选择那个分区点安装就好，安装的剩下步骤没什么好说的了，跟着提示走就好。</p>\n<h2 id=\"步骤三、完善驱动\"><a href=\"#步骤三、完善驱动\" class=\"headerlink\" title=\"步骤三、完善驱动\"></a>步骤三、完善驱动</h2><p>装完以后终于可以进去美美哒的Mac OS啦，不过先不要高兴的太早，现在这个Mac各个部分的驱动都还没有安装，wifi、电源管理、关机、亮度调整、声音等等都需要调整，是不是听着就头大了呢？</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>作为一名穷逼学生总是想蹭点生活费花花。奈何生性懒惰，体质孱弱，洗不了盘子，发不了传单。</p>\n<p>前一段时间买了个几块钱的APP玩顿感肉疼的同时突然觉得也许写个APP啥的挂在appstore上卖是个发家致富的好方法~q(≧▽≦q)</p>\n<p>于是雄心勃勃的要去学Swift(●’◡’●)，第一步，我需要一个Mac OS系统</p>\n<h2 id=\"Mac-系统获得方案\"><a href=\"#Mac-系统获得方案\" class=\"headerlink\" title=\"Mac 系统获得方案\"></a>Mac 系统获得方案</h2><blockquote>\n<ul>\n<li>方案1 土豪专属，直接买一台MacBook Air/Pro</li>\n</ul>\n</blockquote>\n<p><img src=\"http://images.apple.com/macbook-air/images/overview_hero_hero_2x.jpg\" alt=\"MacBook Air\"><br>（╯－＿－）╯╧╧，看到这价格我内心是绝然崩溃的，我只是想水一波零花钱，这么一来我连成本都收不回来啦~</p>\n<blockquote>\n<p>方案2 懒人必备，虚拟机安装OS X</p>\n</blockquote>\n<p>这个方案确实方便省时成本低，想尝试的同学可以参考我的帖子。<br><a href=\"http://fcc.cumt.edu.cn/forum.php?mod=viewthread&amp;tid=58\" target=\"_blank\" rel=\"noopener\">虚拟机安装Mac OS</a></p>\n<p>但是这个方法最大的缺点就是虚拟显卡带不起来水果的图形加速，于是你一点启动器就各种卡顿，</p>\n<p>本人强迫症，不能忍不能忍（╯－＿－）╯╧╧</p>\n<blockquote>\n<ul>\n<li>方案3 屌丝逆袭，普通PC机上装Mac OS</li>\n</ul>\n</blockquote>\n<p>首先看看什么叫黑苹果</p>\n<blockquote>\n<p>黑苹果 （操作系统）<br>自从苹果采用Intel的处理器，OS X被黑客破解后可以安装在Intel CPU与部分AMD CPU的机器上。从而出现了一大批未购买苹果机而使用苹果操作系统的机器，被称为黑苹果(Hackintosh)；在Mac苹果机上面安装原版Mac系统的被称为白苹果（Macintosh），与黑苹果相对。<br>注：摘自百度百科</p>\n</blockquote>\n<p>本次安装黑苹果将使用一个叫做Clover的引导，这是一个开源的EFI bootloader引导项目，支持OSX的启动和参数更改，具体请参看</p>\n<p><a href=\"https://sourceforge.net/projects/cloverefiboot/\" target=\"_blank\" rel=\"noopener\">Clvoer efi bootloader</a></p>\n<p>以安装<em>OS X 10.11.3 EI Captin</em>系统为例</p>\n<h2 id=\"开始折腾\"><a href=\"#开始折腾\" class=\"headerlink\" title=\"开始折腾\"></a>开始折腾</h2><h2 id=\"配置单以及驱动情况\"><a href=\"#配置单以及驱动情况\" class=\"headerlink\" title=\"配置单以及驱动情况\"></a>配置单以及驱动情况</h2><blockquote>\n<ul>\n<li><p>电脑品牌：戴尔灵越7447 Dell Inspiron 7447</p>\n</li>\n<li><p>CPU：I5-4200H Haswell架构</p>\n</li>\n<li>内存：4G+4G</li>\n<li>系统：Win10 1151 updated</li>\n<li>硬盘：128SSD+1024GBHHD</li>\n<li>核心显卡：Intel(R)HD Graphics 4600 (完美驱动支持HDMI输出)</li>\n<li>独立显卡（双显卡笔记本独显无解）：NVDIA GTX850M </li>\n</ul>\n<p><strong>注意，采用双显卡的笔记本只可能驱动核显，除非部分笔记本出厂的时候在硬件上屏蔽核显。</strong> </p>\n<ul>\n<li><p>声卡： Realtek ALC255(仿冒为Applehda.kext完美驱动)</p>\n</li>\n<li><p>无线网卡：原：Intel AC无线网卡(无解) 更换为:BCM94352（支持蓝牙4.0，直接安装驱动即可）</p>\n</li>\n<li><p>有线网卡：板载网卡，免驱</p>\n</li>\n<li><p>分区表：UEFI+GPT</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"步骤一、制作安装U盘\"><a href=\"#步骤一、制作安装U盘\" class=\"headerlink\" title=\"步骤一、制作安装U盘\"></a>步骤一、制作安装U盘</h2><p>首先下载一个带Clover引导的OSX 10.11.3的包，这里推荐下载网友制作好的，方便省心。</p>\n<p><a href=\"http://bbs.pcbeta.com/viewthread-1670310-1-1.html\" target=\"_blank\" rel=\"noopener\">远景技术论坛下载地址</a></p>\n<p>下载其中的<em>USB_Clover_Install_OS_X_El_10.11.3_15D21.dmg</em></p>\n<p>然后<strong>以管理员身份运行</strong><a href=\"http://www.acutesystems.com/scrtm.htm\" target=\"_blank\" rel=\"noopener\">transmac</a>工具，如图所示</p>\n<p><img src=\"http://www.acutesystems.com/images/tmscr.gif\" alt=\"transmac\"></p>\n<p>然后右键点击 U盘，选择Restore from image这个项，然后选中下载，选择dmg映像，确定。这个过程如果U盘一般的话，应该需要20多分钟，请耐心等待。（务必注意事先备份U盘数据）</p>\n<p>等制作完毕后，我们的准备工作就算是做好啦。</p>\n<h2 id=\"步骤二、安装系统，结束此步基本就成功了一大半\"><a href=\"#步骤二、安装系统，结束此步基本就成功了一大半\" class=\"headerlink\" title=\"步骤二、安装系统，结束此步基本就成功了一大半\"></a>步骤二、安装系统，结束此步基本就成功了一大半</h2><p>进入U盘，U盘制作完毕后，重启计算机，开机的时候按F12 (戴尔多为F12)，进入boot menu，选择U盘所对应的EFI启动项启动。如图所示<br><img src=\"../../../../img/bootmenu.png\" alt=\"bootmenu\"></p>\n<p>进入以后出现clover引导界面，和我不一样的是因为主题不一样的原因，clover可以自己更换主题，很炫酷有木有~q(≧▽≦q)<br><img src=\"http://cdn.pcbeta.attachment.inimc.com/data/attachment/album/201403/02/13595029lk2q26fxf36s2s.png\" alt=\"clover引导界面\"><br>大概像这样，图片上的选择很多是因为硬盘里装的系统多，实际安装的时候不会出现这么多选项的，</p>\n<p>找到一个叫boot os x install from os x eicaptin后，</p>\n<p><strong>按空格进入选择菜单</strong></p>\n<p>选择verbose mode(啰嗦模式，如果过程出错可以根据相关信息查找资料修改config.plist)</p>\n<p>这个安装过程因人而异，有的电脑改都不用改直接就能装，有的电脑比如我的,会出现秒重启的现象，出现这种现象，只要打开U盘中clvoer目录先的config.plist，将其中kernalPM改为ture即可。</p>\n<p>其它的错误请大家根据报错信息到各大论坛上发帖求助。一定要沉住气，有耐心，过了这一步，基本上就成功80%,只剩下一些驱动问题。</p>\n<p>等加载过程完毕后，将会出现OS X的安装界面（这多半是个好兆头），如图，安装前需要先打开工具里的磁盘工具<br><img src=\"http://images.weiphone.net/data/attachment/forum/201401/09/100220nr44orrv8farro0c.jpg\" alt=\"磁盘工具\"><br>———————————2016年7月23日更新—————————<br>-<br>虽然最近先是忙考试又是电设的，不过自己写的博文跪着也得更新完呀QAQ<br><img src=\"/img/Disk.png\" alt=\"磁盘工具\"><br>如图，直接把整块硬盘点抹除（好吧，其实可以分区，不过讲起来好麻烦，我就偷偷懒）。嗯，回到安装页面，选择那个分区点安装就好，安装的剩下步骤没什么好说的了，跟着提示走就好。</p>\n<h2 id=\"步骤三、完善驱动\"><a href=\"#步骤三、完善驱动\" class=\"headerlink\" title=\"步骤三、完善驱动\"></a>步骤三、完善驱动</h2><p>装完以后终于可以进去美美哒的Mac OS啦，不过先不要高兴的太早，现在这个Mac各个部分的驱动都还没有安装，wifi、电源管理、关机、亮度调整、声音等等都需要调整，是不是听着就头大了呢？</p>\n"}],"Post":[{"layout":"Network","title":"CentOS7 部署VMESS+TCP+TLS","date":"2020-06-16T16:00:00.000Z","comments":1,"urlname":"depoly_vmess_tcp_tls_on_centos7","_content":"\n# 起因\n\n由于忍不住剁手新入一台韩国Kdatacenter的VPS，从南京联通出去的链路还是不错的，如图所示。\n![image.png](https://i.loli.net/2020/06/17/tvlpqiFUckWEjsQ.png)\n\n于是乎，需要给它重新配置一些东西。默认给的操作系统是CentOS6，我发工单改成了CentOS7。它家工单系统蛮有意思的，我半夜三点钟发居然十分钟后就回复了，看来是有其他时区的客服。\n\n最近发现官方社区出了TCP+TLS的指南，不再是以前的Websocket+TLS，而是参照Trojan的TCP+TLS的思路，用Haproxy作为443前端根据流量特征进行中转，具体来说就是，如果接入流量真的是http流量的话，那么就送到nginx后端，如果是其他流量的话，那么就把它送到v2ray的VMESS端口里。以前的方式是固定web path里的统统用websocket反向代理到VMESS端口。现在这种TCP+TLS的方式根据测试延迟会比以前低一些。\n\n我个人第一想法是感觉额外添加一个Haproxy出来不够美观，如果能够只用V2ray就更加优雅了。感觉应该是可行的，比如用V2ray的任意门，但是仔细想想可能是因目前V2ray的代理在TLS的实现上有问题，所以社区大佬才没有去尝试吧。之后估计V2ray core更新后就可以不用Haproxy了。最近时间紧，我就不要去探索了，2333~\n\n##### 以下所有操作默认都在root用户中执行\n\n# 步骤\n\n### 1.域名解析\n\n我的域名是在Cloudflare上解析的，登录Cloudflare，之后创建A记录到我服务器的IP即可。\n\n### 2.安装nginx\n\n最省事的方法是直接用APT或者YUM装\n\n```shell\nyum update\nyum install -y epel-release\nyum install -y vim\nyum install -y nginx\n```\n\n修改配置`vim /etc/nginx/nginx.conf`，找到server_name这一项，将localhost改为自己的域名\n\n```\nserver\n{\n    listen 80;\n    server_name example.com;\t#记得改成你自己的域名\n    .....\n```\n\n### 3.申请证书\n\n要用正常的TLS得有签名的证书才行，这里我们采用certbot来实现 lets encrypt证书的申请和自动续期\n\n#### 3.1 下载certbot\n\n```shell\nyum install certbot python2-certbot-nginx\n```\n\n#### 3.2 选择Certbot的运行方式\n\n由于我们不需要nginx直接监听443，因此这里建议仅生成证书\n\n```\ncertbot certonly --nginx\n```\n\n成功之后证书存在\n\n```shell\nssl_certificate /etc/letsencrypt/live/your_domain/fullchain.pem; # managed by Certbot\nssl_certificate_key /etc/letsencrypt/live/your_domain/privkey.pem; # managed by Certbot\n```\n\n#### 3.3 设定自动续期\n\n```shell\necho \"0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' && certbot renew -q\" | sudo tee -a /etc/crontab > /dev/null\n```\n\n\n\n### 4.配置Haproxy\n\n#### 4.1 编译openssl 1.1.1\n\n##### 我们需要openssl1.1.1要支持TLS 1.3\n\n安装依赖\n\n```shell\nyum groupinstall 'Development Tools'\n```\n\n下载源码\n\n```shell\nwget https://www.openssl.org/source/openssl-1.1.1g.tar.gz\ntar -xzf openssl-1.1.1g.tar.gz\n```\n\n编译\n\n```shell\ncd openssl-OpenSSL_1_1_1g/\n# 通常可以直接使用config (from Ubuntu 13.04, x64, 本文在CentOS7.3测试通过):\n./config --prefix=/opt/openssl-1.1.1 shared\n#编译\nmake\n#安装\nmake install\n```\n\n\n\n#### 4.2 编译haproxy\n\n源码下载\n\n```shell\nyum install -y make gcc perl pcre-devel zlib-devel pcre2 pcre2-devel\nwget http://www.haproxy.org/download/1.9/src/haproxy-1.9.15.tar.gz\ntar -zxvf haproxy-1.9.15.tar.gz\ncd haproxy-1.9.15/\n```\n\n编译\n\n```shell\nmake TARGET=linux2628 CPU=native USE_PCRE2=1 USE_PCRE2_JIT=1 USE_OPENSSL=1 SSL_LIB=/opt/openssl-1.1.1/lib SSL_INC=/opt/openssl-1.1.1/include USE_ZLIB=1\nmake install\n# Check your sbin path at /usr/local/sbin\ncp haproxy /usr/local/sbin/haproxy\n```\n\n创建配置文件\n\n```shell\nmkdir /etc/haproxy/\nvim /etc/haproxy/haproxy.cfg\n```\n\n代码内容如下\n\n```shell\nglobal\n    log /dev/log local0\n    log /dev/log local1 notice\n    #chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    #user haproxy\n    #group haproxy\n    daemon\n    ca-base /etc/ssl/certs\n    crt-base /etc/ssl/private\n\n    # 仅使用支持 FS 和 AEAD 的加密套件\n    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n    # 禁用 TLS 1.2 之前的 TLS\n    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11\n\n    tune.ssl.default-dh-param 2048\n\ndefaults\n    log global\n    # 我们需要使用 tcp 模式\n    mode tcp\n    option dontlognull\n    timeout connect 5s\n    # 空闲连接等待时间，这里使用与 V2Ray 默认 connIdle 一致的 300s\n    timeout client  300s\n    timeout server  300s\nfrontend tls-in\n    # 监听 443 tls，tfo 根据自身情况决定是否开启，证书放置于 /etc/ssl/private/example.com.pem\n    bind *:443 tfo ssl crt /etc/ssl/private/example.com.pem\n    tcp-request inspect-delay 5s\n    tcp-request content accept if HTTP\n    # 将 HTTP 流量发给 web 后端\n    use_backend web if HTTP\n    # 将其他流量发给 vmess 后端\n    default_backend vmess\n\nbackend web\n    server server1 127.0.0.1:8080\n  \nbackend vmess\n    server server1 127.0.0.1:40001\n```\n\nHaProxy 的证书和密钥放于同一个文件，与 Caddy 和 Nginx 不同，可以使用命令 `cat example.com.crt example.com.key > example.com.pem` 合成证书\n\n修改haproxy系统服务启动脚本：\n\n`vim /etc/systemd/system/haproxy.service `\n\n```shell\n# 确保在[Service]这一栏有这样的一项\n[Service]\nEnvironment=LD_LIBRARY_PATH=/opt/openssl-1.1.1/lib/\n```\n\n测试，首先测试配置是否正确，如果发现错误就根据错误改正\n\n```bash\nhaproxy -db -f /etc/haproxy/haproxy.cfg\n```\n\n运行\n\n```\n/etc/init.d/haproxy start\n```\n\n如果没有任何提示，说明haproxy配置无误，Ctrl+C退出测试。\n\n启动服务\n\n```shell\nsystemctl start haproxy\n#开机自启\nsystemctl enable haproxy\n```\n\n此时输入`netstat -npl |grep 443`可以看到haproxy已经开始监听443端口\n\n```shell\ntcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      23824/haproxy\nunix  2      [ ACC ]     STREAM     LISTENING     290695   23824/haproxy        /run/haproxy/admin.sock.23823.tmp\n```\n\n#### Haproxy常见错误排查\n\n如果提示\n\n```shell\n[ALERT] 168/131339 (22782) : Starting frontend GLOBAL: cannot bind UNIX socket [/run/haproxy/admin.sock]\n```\n\n首先检查443端口是否被占用，先把apache，nginx, caddy关掉，之后的章节会提到，我们会将它的监听端口改为其他端口，用haproxy作实际443监听端口。\n\n使用`netstat -npl |grep 443`检查是否有进程占用443端口。\n\n如果确认没有，但仍然报错，则需要手动创建/run/haproxy/这个目录：\n\n>Haproxy needs to write to `/run/haproxy/admin.sock` but it wont create the directory for you. Create the directory `/run/haproxy/` first or set `stats socket` to a different path.\n\n```shell\nmkdir /run/haproxy/\n```\n\n##### 请注意:\n\n***1.务必先编译openssl 1.1.1再编译haproxy，可以通过`haproxy -vv |grep OpenSSL`查看当前编译时候openssl的版本，如果版本号不对，请指定正确版本的openssl路径后重新编译***\n\n```shell\nhaproxy -vv |grep OpenSSL\n----\nBuilt with OpenSSL version : OpenSSL 1.1.1g  21 Apr 2020\nRunning on OpenSSL version : OpenSSL 1.1.1g  21 Apr 2020\nOpenSSL library supports TLS extensions : yes\nOpenSSL library supports SNI : yes\nOpenSSL library supports : TLSv1.0 TLSv1.1 TLSv1.2 TLSv1.3\n```\n\n\n\n###  配置v2ray服务端\n\n安装\n\n```bash\nbash <(curl -L -s https://install.direct/go.sh)\n```\n配置\n`vim /etc/v2ray/config.json`\n\n内容如下:\n\n```json\n{\n    \"inbounds\": [\n        {\n            \"protocol\": \"vmess\",\n            \"listen\": \"127.0.0.1\",\n            \"port\": 40001,\t# 可以随便写个端口，只要注意一致就行\n            \"settings\": {\n                \"clients\": [\n                    {\n                        \"id\": \"f2435e5c-9ad9-4367-836a-8341117d0a5f\"(请自己生成一个)\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\"\n            }\n        }\n    ],\n    \"outbounds\": [\n        {\n            \"protocol\": \"freedom\"\n        }\n    ]\n}\n```\n\n启动服务\n\n```shell\nsystemctl start v2ray\n#开机自启\nsystemctl enable v2ray\n```\n\n\n\n## 修改nginx服务端配置\n\n`vim /etc/nginx/nginx.conf`\n\n 在 http{} 里面添加，这样我们只用nginx监听普通8080端口即可，因为haproxy那边本地转发前已经解包成了明文了。\n\n```text\nserver {\n  listen 8080;\n  server_name example.com;\t\t#记得改成你自己的域名\n  root /var/www/html;\n}\n```\n\n重启服务端\n\n```shell\nsystemctl restart nginx\n# 开机自启\nsystemctl enable nginx\n```\n\n### 其他\n\n到目前为止，所有的服务就已经搭建完毕了，在浏览器里输入 https:// + 你的域名，  如果能够正常访问，说明haproxy和nginx的链路已经通了，基本上就代表可以用了。VMESS的路一般不会出什么问题，这时候就可以用客户端试一下了。\n\n客户端的配置以及一些延迟测试就不多介绍了，参考[官方社区](https://guide.v2fly.org/advanced/tcp_tls_web.html)吧。\n\n\n# 下一步计划\n\n1.整个一套配置下来还是很繁琐的。我打算之后写一套docker-compose，以方便复用。\n\n2.这个机器有100G硬盘呢，反正暂时又不建站，不如下一步在上面建个图床玩玩\n\n# 参考\n\n1.[CentOS 7 源码编译安装 Nginx](https://www.cnblogs.com/stulzq/p/9291223.html)\n\n2.[TCP + TLS + Web](https://guide.v2fly.org/advanced/tcp_tls_web.html#背景)\n\n3.[HAproxy指南之haproxy编译安装](https://gist.github.com/meanevo/742b61031fdf9ce01e50d4b196a3f31e)\n\n4.[wiki_openssl](https://wiki.openssl.org/index.php/Compilation_and_Installation)\n\n5.[Building HAProxy so that it can use TLSv1.3](https://dnsprivacy.org/wiki/display/DP/Building+HAProxy+so+that+it+can+use+TLSv1.3)\n\n6.[Nginx on CentOS/RHEL 7](https://certbot.eff.org/lets-encrypt/centosrhel7-nginx.html)\n\n7.[HAProxy doesn't start, can not bind UNIX socket](https://stackoverflow.com/questions/30101075/haproxy-doesnt-start-can-not-bind-unix-socket-run-haproxy-admin-sock)\n\n","source":"_posts/Centos 7部署VMESS+TCP+TLS.md","raw":"---\n\nlayout: Network\ntitle: CentOS7 部署VMESS+TCP+TLS\ndate: 2020-06-17\ncomments: true\ncategories: 计算机网络\ntags: Network\nurlname:  depoly_vmess_tcp_tls_on_centos7\n---\n\n# 起因\n\n由于忍不住剁手新入一台韩国Kdatacenter的VPS，从南京联通出去的链路还是不错的，如图所示。\n![image.png](https://i.loli.net/2020/06/17/tvlpqiFUckWEjsQ.png)\n\n于是乎，需要给它重新配置一些东西。默认给的操作系统是CentOS6，我发工单改成了CentOS7。它家工单系统蛮有意思的，我半夜三点钟发居然十分钟后就回复了，看来是有其他时区的客服。\n\n最近发现官方社区出了TCP+TLS的指南，不再是以前的Websocket+TLS，而是参照Trojan的TCP+TLS的思路，用Haproxy作为443前端根据流量特征进行中转，具体来说就是，如果接入流量真的是http流量的话，那么就送到nginx后端，如果是其他流量的话，那么就把它送到v2ray的VMESS端口里。以前的方式是固定web path里的统统用websocket反向代理到VMESS端口。现在这种TCP+TLS的方式根据测试延迟会比以前低一些。\n\n我个人第一想法是感觉额外添加一个Haproxy出来不够美观，如果能够只用V2ray就更加优雅了。感觉应该是可行的，比如用V2ray的任意门，但是仔细想想可能是因目前V2ray的代理在TLS的实现上有问题，所以社区大佬才没有去尝试吧。之后估计V2ray core更新后就可以不用Haproxy了。最近时间紧，我就不要去探索了，2333~\n\n##### 以下所有操作默认都在root用户中执行\n\n# 步骤\n\n### 1.域名解析\n\n我的域名是在Cloudflare上解析的，登录Cloudflare，之后创建A记录到我服务器的IP即可。\n\n### 2.安装nginx\n\n最省事的方法是直接用APT或者YUM装\n\n```shell\nyum update\nyum install -y epel-release\nyum install -y vim\nyum install -y nginx\n```\n\n修改配置`vim /etc/nginx/nginx.conf`，找到server_name这一项，将localhost改为自己的域名\n\n```\nserver\n{\n    listen 80;\n    server_name example.com;\t#记得改成你自己的域名\n    .....\n```\n\n### 3.申请证书\n\n要用正常的TLS得有签名的证书才行，这里我们采用certbot来实现 lets encrypt证书的申请和自动续期\n\n#### 3.1 下载certbot\n\n```shell\nyum install certbot python2-certbot-nginx\n```\n\n#### 3.2 选择Certbot的运行方式\n\n由于我们不需要nginx直接监听443，因此这里建议仅生成证书\n\n```\ncertbot certonly --nginx\n```\n\n成功之后证书存在\n\n```shell\nssl_certificate /etc/letsencrypt/live/your_domain/fullchain.pem; # managed by Certbot\nssl_certificate_key /etc/letsencrypt/live/your_domain/privkey.pem; # managed by Certbot\n```\n\n#### 3.3 设定自动续期\n\n```shell\necho \"0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' && certbot renew -q\" | sudo tee -a /etc/crontab > /dev/null\n```\n\n\n\n### 4.配置Haproxy\n\n#### 4.1 编译openssl 1.1.1\n\n##### 我们需要openssl1.1.1要支持TLS 1.3\n\n安装依赖\n\n```shell\nyum groupinstall 'Development Tools'\n```\n\n下载源码\n\n```shell\nwget https://www.openssl.org/source/openssl-1.1.1g.tar.gz\ntar -xzf openssl-1.1.1g.tar.gz\n```\n\n编译\n\n```shell\ncd openssl-OpenSSL_1_1_1g/\n# 通常可以直接使用config (from Ubuntu 13.04, x64, 本文在CentOS7.3测试通过):\n./config --prefix=/opt/openssl-1.1.1 shared\n#编译\nmake\n#安装\nmake install\n```\n\n\n\n#### 4.2 编译haproxy\n\n源码下载\n\n```shell\nyum install -y make gcc perl pcre-devel zlib-devel pcre2 pcre2-devel\nwget http://www.haproxy.org/download/1.9/src/haproxy-1.9.15.tar.gz\ntar -zxvf haproxy-1.9.15.tar.gz\ncd haproxy-1.9.15/\n```\n\n编译\n\n```shell\nmake TARGET=linux2628 CPU=native USE_PCRE2=1 USE_PCRE2_JIT=1 USE_OPENSSL=1 SSL_LIB=/opt/openssl-1.1.1/lib SSL_INC=/opt/openssl-1.1.1/include USE_ZLIB=1\nmake install\n# Check your sbin path at /usr/local/sbin\ncp haproxy /usr/local/sbin/haproxy\n```\n\n创建配置文件\n\n```shell\nmkdir /etc/haproxy/\nvim /etc/haproxy/haproxy.cfg\n```\n\n代码内容如下\n\n```shell\nglobal\n    log /dev/log local0\n    log /dev/log local1 notice\n    #chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    #user haproxy\n    #group haproxy\n    daemon\n    ca-base /etc/ssl/certs\n    crt-base /etc/ssl/private\n\n    # 仅使用支持 FS 和 AEAD 的加密套件\n    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n    # 禁用 TLS 1.2 之前的 TLS\n    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11\n\n    tune.ssl.default-dh-param 2048\n\ndefaults\n    log global\n    # 我们需要使用 tcp 模式\n    mode tcp\n    option dontlognull\n    timeout connect 5s\n    # 空闲连接等待时间，这里使用与 V2Ray 默认 connIdle 一致的 300s\n    timeout client  300s\n    timeout server  300s\nfrontend tls-in\n    # 监听 443 tls，tfo 根据自身情况决定是否开启，证书放置于 /etc/ssl/private/example.com.pem\n    bind *:443 tfo ssl crt /etc/ssl/private/example.com.pem\n    tcp-request inspect-delay 5s\n    tcp-request content accept if HTTP\n    # 将 HTTP 流量发给 web 后端\n    use_backend web if HTTP\n    # 将其他流量发给 vmess 后端\n    default_backend vmess\n\nbackend web\n    server server1 127.0.0.1:8080\n  \nbackend vmess\n    server server1 127.0.0.1:40001\n```\n\nHaProxy 的证书和密钥放于同一个文件，与 Caddy 和 Nginx 不同，可以使用命令 `cat example.com.crt example.com.key > example.com.pem` 合成证书\n\n修改haproxy系统服务启动脚本：\n\n`vim /etc/systemd/system/haproxy.service `\n\n```shell\n# 确保在[Service]这一栏有这样的一项\n[Service]\nEnvironment=LD_LIBRARY_PATH=/opt/openssl-1.1.1/lib/\n```\n\n测试，首先测试配置是否正确，如果发现错误就根据错误改正\n\n```bash\nhaproxy -db -f /etc/haproxy/haproxy.cfg\n```\n\n运行\n\n```\n/etc/init.d/haproxy start\n```\n\n如果没有任何提示，说明haproxy配置无误，Ctrl+C退出测试。\n\n启动服务\n\n```shell\nsystemctl start haproxy\n#开机自启\nsystemctl enable haproxy\n```\n\n此时输入`netstat -npl |grep 443`可以看到haproxy已经开始监听443端口\n\n```shell\ntcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      23824/haproxy\nunix  2      [ ACC ]     STREAM     LISTENING     290695   23824/haproxy        /run/haproxy/admin.sock.23823.tmp\n```\n\n#### Haproxy常见错误排查\n\n如果提示\n\n```shell\n[ALERT] 168/131339 (22782) : Starting frontend GLOBAL: cannot bind UNIX socket [/run/haproxy/admin.sock]\n```\n\n首先检查443端口是否被占用，先把apache，nginx, caddy关掉，之后的章节会提到，我们会将它的监听端口改为其他端口，用haproxy作实际443监听端口。\n\n使用`netstat -npl |grep 443`检查是否有进程占用443端口。\n\n如果确认没有，但仍然报错，则需要手动创建/run/haproxy/这个目录：\n\n>Haproxy needs to write to `/run/haproxy/admin.sock` but it wont create the directory for you. Create the directory `/run/haproxy/` first or set `stats socket` to a different path.\n\n```shell\nmkdir /run/haproxy/\n```\n\n##### 请注意:\n\n***1.务必先编译openssl 1.1.1再编译haproxy，可以通过`haproxy -vv |grep OpenSSL`查看当前编译时候openssl的版本，如果版本号不对，请指定正确版本的openssl路径后重新编译***\n\n```shell\nhaproxy -vv |grep OpenSSL\n----\nBuilt with OpenSSL version : OpenSSL 1.1.1g  21 Apr 2020\nRunning on OpenSSL version : OpenSSL 1.1.1g  21 Apr 2020\nOpenSSL library supports TLS extensions : yes\nOpenSSL library supports SNI : yes\nOpenSSL library supports : TLSv1.0 TLSv1.1 TLSv1.2 TLSv1.3\n```\n\n\n\n###  配置v2ray服务端\n\n安装\n\n```bash\nbash <(curl -L -s https://install.direct/go.sh)\n```\n配置\n`vim /etc/v2ray/config.json`\n\n内容如下:\n\n```json\n{\n    \"inbounds\": [\n        {\n            \"protocol\": \"vmess\",\n            \"listen\": \"127.0.0.1\",\n            \"port\": 40001,\t# 可以随便写个端口，只要注意一致就行\n            \"settings\": {\n                \"clients\": [\n                    {\n                        \"id\": \"f2435e5c-9ad9-4367-836a-8341117d0a5f\"(请自己生成一个)\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\"\n            }\n        }\n    ],\n    \"outbounds\": [\n        {\n            \"protocol\": \"freedom\"\n        }\n    ]\n}\n```\n\n启动服务\n\n```shell\nsystemctl start v2ray\n#开机自启\nsystemctl enable v2ray\n```\n\n\n\n## 修改nginx服务端配置\n\n`vim /etc/nginx/nginx.conf`\n\n 在 http{} 里面添加，这样我们只用nginx监听普通8080端口即可，因为haproxy那边本地转发前已经解包成了明文了。\n\n```text\nserver {\n  listen 8080;\n  server_name example.com;\t\t#记得改成你自己的域名\n  root /var/www/html;\n}\n```\n\n重启服务端\n\n```shell\nsystemctl restart nginx\n# 开机自启\nsystemctl enable nginx\n```\n\n### 其他\n\n到目前为止，所有的服务就已经搭建完毕了，在浏览器里输入 https:// + 你的域名，  如果能够正常访问，说明haproxy和nginx的链路已经通了，基本上就代表可以用了。VMESS的路一般不会出什么问题，这时候就可以用客户端试一下了。\n\n客户端的配置以及一些延迟测试就不多介绍了，参考[官方社区](https://guide.v2fly.org/advanced/tcp_tls_web.html)吧。\n\n\n# 下一步计划\n\n1.整个一套配置下来还是很繁琐的。我打算之后写一套docker-compose，以方便复用。\n\n2.这个机器有100G硬盘呢，反正暂时又不建站，不如下一步在上面建个图床玩玩\n\n# 参考\n\n1.[CentOS 7 源码编译安装 Nginx](https://www.cnblogs.com/stulzq/p/9291223.html)\n\n2.[TCP + TLS + Web](https://guide.v2fly.org/advanced/tcp_tls_web.html#背景)\n\n3.[HAproxy指南之haproxy编译安装](https://gist.github.com/meanevo/742b61031fdf9ce01e50d4b196a3f31e)\n\n4.[wiki_openssl](https://wiki.openssl.org/index.php/Compilation_and_Installation)\n\n5.[Building HAProxy so that it can use TLSv1.3](https://dnsprivacy.org/wiki/display/DP/Building+HAProxy+so+that+it+can+use+TLSv1.3)\n\n6.[Nginx on CentOS/RHEL 7](https://certbot.eff.org/lets-encrypt/centosrhel7-nginx.html)\n\n7.[HAProxy doesn't start, can not bind UNIX socket](https://stackoverflow.com/questions/30101075/haproxy-doesnt-start-can-not-bind-unix-socket-run-haproxy-admin-sock)\n\n","slug":"Centos 7部署VMESS+TCP+TLS","published":1,"updated":"2020-06-17T06:25:51.581Z","_id":"ckbiy7xz600005ojshxyhy2em","photos":[],"link":"","content":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>由于忍不住剁手新入一台韩国Kdatacenter的VPS，从南京联通出去的链路还是不错的，如图所示。<br><img src=\"https://i.loli.net/2020/06/17/tvlpqiFUckWEjsQ.png\" alt=\"image.png\"></p>\n<p>于是乎，需要给它重新配置一些东西。默认给的操作系统是CentOS6，我发工单改成了CentOS7。它家工单系统蛮有意思的，我半夜三点钟发居然十分钟后就回复了，看来是有其他时区的客服。</p>\n<p>最近发现官方社区出了TCP+TLS的指南，不再是以前的Websocket+TLS，而是参照Trojan的TCP+TLS的思路，用Haproxy作为443前端根据流量特征进行中转，具体来说就是，如果接入流量真的是http流量的话，那么就送到nginx后端，如果是其他流量的话，那么就把它送到v2ray的VMESS端口里。以前的方式是固定web path里的统统用websocket反向代理到VMESS端口。现在这种TCP+TLS的方式根据测试延迟会比以前低一些。</p>\n<p>我个人第一想法是感觉额外添加一个Haproxy出来不够美观，如果能够只用V2ray就更加优雅了。感觉应该是可行的，比如用V2ray的任意门，但是仔细想想可能是因目前V2ray的代理在TLS的实现上有问题，所以社区大佬才没有去尝试吧。之后估计V2ray core更新后就可以不用Haproxy了。最近时间紧，我就不要去探索了，2333~</p>\n<h5 id=\"以下所有操作默认都在root用户中执行\"><a href=\"#以下所有操作默认都在root用户中执行\" class=\"headerlink\" title=\"以下所有操作默认都在root用户中执行\"></a>以下所有操作默认都在root用户中执行</h5><h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h3 id=\"1-域名解析\"><a href=\"#1-域名解析\" class=\"headerlink\" title=\"1.域名解析\"></a>1.域名解析</h3><p>我的域名是在Cloudflare上解析的，登录Cloudflare，之后创建A记录到我服务器的IP即可。</p>\n<h3 id=\"2-安装nginx\"><a href=\"#2-安装nginx\" class=\"headerlink\" title=\"2.安装nginx\"></a>2.安装nginx</h3><p>最省事的方法是直接用APT或者YUM装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br><span class=\"line\">yum install -y epel-release</span><br><span class=\"line\">yum install -y vim</span><br><span class=\"line\">yum install -y nginx</span><br></pre></td></tr></table></figure>\n<p>修改配置<code>vim /etc/nginx/nginx.conf</code>，找到server_name这一项，将localhost改为自己的域名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name example.com;\t#记得改成你自己的域名</span><br><span class=\"line\">    .....</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-申请证书\"><a href=\"#3-申请证书\" class=\"headerlink\" title=\"3.申请证书\"></a>3.申请证书</h3><p>要用正常的TLS得有签名的证书才行，这里我们采用certbot来实现 lets encrypt证书的申请和自动续期</p>\n<h4 id=\"3-1-下载certbot\"><a href=\"#3-1-下载certbot\" class=\"headerlink\" title=\"3.1 下载certbot\"></a>3.1 下载certbot</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install certbot python2-certbot-nginx</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-选择Certbot的运行方式\"><a href=\"#3-2-选择Certbot的运行方式\" class=\"headerlink\" title=\"3.2 选择Certbot的运行方式\"></a>3.2 选择Certbot的运行方式</h4><p>由于我们不需要nginx直接监听443，因此这里建议仅生成证书</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certbot certonly --nginx</span><br></pre></td></tr></table></figure>\n<p>成功之后证书存在</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_certificate /etc/letsencrypt/live/your_domain/fullchain.pem; # managed by Certbot</span><br><span class=\"line\">ssl_certificate_key /etc/letsencrypt/live/your_domain/privkey.pem; # managed by Certbot</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-3-设定自动续期\"><a href=\"#3-3-设定自动续期\" class=\"headerlink\" title=\"3.3 设定自动续期\"></a>3.3 设定自动续期</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' &amp;&amp; certbot renew -q\" | sudo tee -a /etc/crontab &gt; /dev/null</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-配置Haproxy\"><a href=\"#4-配置Haproxy\" class=\"headerlink\" title=\"4.配置Haproxy\"></a>4.配置Haproxy</h3><h4 id=\"4-1-编译openssl-1-1-1\"><a href=\"#4-1-编译openssl-1-1-1\" class=\"headerlink\" title=\"4.1 编译openssl 1.1.1\"></a>4.1 编译openssl 1.1.1</h4><h5 id=\"我们需要openssl1-1-1要支持TLS-1-3\"><a href=\"#我们需要openssl1-1-1要支持TLS-1-3\" class=\"headerlink\" title=\"我们需要openssl1.1.1要支持TLS 1.3\"></a>我们需要openssl1.1.1要支持TLS 1.3</h5><p>安装依赖</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall 'Development Tools'</span><br></pre></td></tr></table></figure>\n<p>下载源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz</span><br><span class=\"line\">tar -xzf openssl-1.1.1g.tar.gz</span><br></pre></td></tr></table></figure>\n<p>编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd openssl-OpenSSL_1_1_1g/</span><br><span class=\"line\"><span class=\"meta\">#</span> 通常可以直接使用config (from Ubuntu 13.04, x64, 本文在CentOS7.3测试通过):</span><br><span class=\"line\">./config --prefix=/opt/openssl-1.1.1 shared</span><br><span class=\"line\"><span class=\"meta\">#</span>编译</span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"meta\">#</span>安装</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-编译haproxy\"><a href=\"#4-2-编译haproxy\" class=\"headerlink\" title=\"4.2 编译haproxy\"></a>4.2 编译haproxy</h4><p>源码下载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y make gcc perl pcre-devel zlib-devel pcre2 pcre2-devel</span><br><span class=\"line\">wget http://www.haproxy.org/download/1.9/src/haproxy-1.9.15.tar.gz</span><br><span class=\"line\">tar -zxvf haproxy-1.9.15.tar.gz</span><br><span class=\"line\">cd haproxy-1.9.15/</span><br></pre></td></tr></table></figure>\n<p>编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make TARGET=linux2628 CPU=native USE_PCRE2=1 USE_PCRE2_JIT=1 USE_OPENSSL=1 SSL_LIB=/opt/openssl-1.1.1/lib SSL_INC=/opt/openssl-1.1.1/include USE_ZLIB=1</span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"meta\">#</span> Check your sbin path at /usr/local/sbin</span><br><span class=\"line\">cp haproxy /usr/local/sbin/haproxy</span><br></pre></td></tr></table></figure>\n<p>创建配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /etc/haproxy/</span><br><span class=\"line\">vim /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>\n<p>代码内容如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global</span><br><span class=\"line\">    log /dev/log local0</span><br><span class=\"line\">    log /dev/log local1 notice</span><br><span class=\"line\">    #chroot /var/lib/haproxy</span><br><span class=\"line\">    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners</span><br><span class=\"line\">    stats timeout 30s</span><br><span class=\"line\">    #user haproxy</span><br><span class=\"line\">    #group haproxy</span><br><span class=\"line\">    daemon</span><br><span class=\"line\">    ca-base /etc/ssl/certs</span><br><span class=\"line\">    crt-base /etc/ssl/private</span><br><span class=\"line\"></span><br><span class=\"line\">    # 仅使用支持 FS 和 AEAD 的加密套件</span><br><span class=\"line\">    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384</span><br><span class=\"line\">    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256</span><br><span class=\"line\">    # 禁用 TLS 1.2 之前的 TLS</span><br><span class=\"line\">    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11</span><br><span class=\"line\"></span><br><span class=\"line\">    tune.ssl.default-dh-param 2048</span><br><span class=\"line\"></span><br><span class=\"line\">defaults</span><br><span class=\"line\">    log global</span><br><span class=\"line\">    # 我们需要使用 tcp 模式</span><br><span class=\"line\">    mode tcp</span><br><span class=\"line\">    option dontlognull</span><br><span class=\"line\">    timeout connect 5s</span><br><span class=\"line\">    # 空闲连接等待时间，这里使用与 V2Ray 默认 connIdle 一致的 300s</span><br><span class=\"line\">    timeout client  300s</span><br><span class=\"line\">    timeout server  300s</span><br><span class=\"line\">frontend tls-in</span><br><span class=\"line\">    # 监听 443 tls，tfo 根据自身情况决定是否开启，证书放置于 /etc/ssl/private/example.com.pem</span><br><span class=\"line\">    bind *:443 tfo ssl crt /etc/ssl/private/example.com.pem</span><br><span class=\"line\">    tcp-request inspect-delay 5s</span><br><span class=\"line\">    tcp-request content accept if HTTP</span><br><span class=\"line\">    # 将 HTTP 流量发给 web 后端</span><br><span class=\"line\">    use_backend web if HTTP</span><br><span class=\"line\">    # 将其他流量发给 vmess 后端</span><br><span class=\"line\">    default_backend vmess</span><br><span class=\"line\"></span><br><span class=\"line\">backend web</span><br><span class=\"line\">    server server1 127.0.0.1:8080</span><br><span class=\"line\">  </span><br><span class=\"line\">backend vmess</span><br><span class=\"line\">    server server1 127.0.0.1:40001</span><br></pre></td></tr></table></figure>\n<p>HaProxy 的证书和密钥放于同一个文件，与 Caddy 和 Nginx 不同，可以使用命令 <code>cat example.com.crt example.com.key &gt; example.com.pem</code> 合成证书</p>\n<p>修改haproxy系统服务启动脚本：</p>\n<p><code>vim /etc/systemd/system/haproxy.service</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 确保在[Service]这一栏有这样的一项</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=LD_LIBRARY_PATH=/opt/openssl-1.1.1/lib/</span><br></pre></td></tr></table></figure>\n<p>测试，首先测试配置是否正确，如果发现错误就根据错误改正</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haproxy -db -f /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/haproxy start</span><br></pre></td></tr></table></figure>\n<p>如果没有任何提示，说明haproxy配置无误，Ctrl+C退出测试。</p>\n<p>启动服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start haproxy</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机自启</span></span><br><span class=\"line\">systemctl enable haproxy</span><br></pre></td></tr></table></figure>\n<p>此时输入<code>netstat -npl |grep 443</code>可以看到haproxy已经开始监听443端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      23824/haproxy</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     290695   23824/haproxy        /run/haproxy/admin.sock.23823.tmp</span><br></pre></td></tr></table></figure>\n<h4 id=\"Haproxy常见错误排查\"><a href=\"#Haproxy常见错误排查\" class=\"headerlink\" title=\"Haproxy常见错误排查\"></a>Haproxy常见错误排查</h4><p>如果提示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ALERT] 168/131339 (22782) : Starting frontend GLOBAL: cannot bind UNIX socket [/run/haproxy/admin.sock]</span><br></pre></td></tr></table></figure>\n<p>首先检查443端口是否被占用，先把apache，nginx, caddy关掉，之后的章节会提到，我们会将它的监听端口改为其他端口，用haproxy作实际443监听端口。</p>\n<p>使用<code>netstat -npl |grep 443</code>检查是否有进程占用443端口。</p>\n<p>如果确认没有，但仍然报错，则需要手动创建/run/haproxy/这个目录：</p>\n<blockquote>\n<p>Haproxy needs to write to <code>/run/haproxy/admin.sock</code> but it wont create the directory for you. Create the directory <code>/run/haproxy/</code> first or set <code>stats socket</code> to a different path.</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /run/haproxy/</span><br></pre></td></tr></table></figure>\n<h5 id=\"请注意\"><a href=\"#请注意\" class=\"headerlink\" title=\"请注意:\"></a>请注意:</h5><p><strong><em>1.务必先编译openssl 1.1.1再编译haproxy，可以通过<code>haproxy -vv |grep OpenSSL</code>查看当前编译时候openssl的版本，如果版本号不对，请指定正确版本的openssl路径后重新编译</em></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haproxy -vv |grep OpenSSL</span><br><span class=\"line\">----</span><br><span class=\"line\">Built with OpenSSL version : OpenSSL 1.1.1g  21 Apr 2020</span><br><span class=\"line\">Running on OpenSSL version : OpenSSL 1.1.1g  21 Apr 2020</span><br><span class=\"line\">OpenSSL library supports TLS extensions : yes</span><br><span class=\"line\">OpenSSL library supports SNI : yes</span><br><span class=\"line\">OpenSSL library supports : TLSv1.0 TLSv1.1 TLSv1.2 TLSv1.3</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置v2ray服务端\"><a href=\"#配置v2ray服务端\" class=\"headerlink\" title=\"配置v2ray服务端\"></a>配置v2ray服务端</h3><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure>\n<p>配置<br><code>vim /etc/v2ray/config.json</code></p>\n<p>内容如下:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"inbounds\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"vmess\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"listen\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">            \"port\": 40001,\t# 可以随便写个端口，只要注意一致就行</span><br><span class=\"line\">            \"settings\": &#123;</span><br><span class=\"line\">                \"clients\": [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"f2435e5c-9ad9-4367-836a-8341117d0a5f\"</span>(请自己生成一个)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            \"streamSettings\": &#123;</span><br><span class=\"line\">                \"network\": \"tcp\"</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    \"outbounds\": [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"freedom\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start v2ray</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机自启</span></span><br><span class=\"line\">systemctl enable v2ray</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改nginx服务端配置\"><a href=\"#修改nginx服务端配置\" class=\"headerlink\" title=\"修改nginx服务端配置\"></a>修改nginx服务端配置</h2><p><code>vim /etc/nginx/nginx.conf</code></p>\n<p> 在 http{} 里面添加，这样我们只用nginx监听普通8080端口即可，因为haproxy那边本地转发前已经解包成了明文了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 8080;</span><br><span class=\"line\">  server_name example.com;\t\t#记得改成你自己的域名</span><br><span class=\"line\">  root /var/www/html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启服务端</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 开机自启</span></span><br><span class=\"line\">systemctl enable nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>到目前为止，所有的服务就已经搭建完毕了，在浏览器里输入 https:// + 你的域名，  如果能够正常访问，说明haproxy和nginx的链路已经通了，基本上就代表可以用了。VMESS的路一般不会出什么问题，这时候就可以用客户端试一下了。</p>\n<p>客户端的配置以及一些延迟测试就不多介绍了，参考<a href=\"https://guide.v2fly.org/advanced/tcp_tls_web.html\" target=\"_blank\" rel=\"noopener\">官方社区</a>吧。</p>\n<h1 id=\"下一步计划\"><a href=\"#下一步计划\" class=\"headerlink\" title=\"下一步计划\"></a>下一步计划</h1><p>1.整个一套配置下来还是很繁琐的。我打算之后写一套docker-compose，以方便复用。</p>\n<p>2.这个机器有100G硬盘呢，反正暂时又不建站，不如下一步在上面建个图床玩玩</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>1.<a href=\"https://www.cnblogs.com/stulzq/p/9291223.html\" target=\"_blank\" rel=\"noopener\">CentOS 7 源码编译安装 Nginx</a></p>\n<p>2.<a href=\"https://guide.v2fly.org/advanced/tcp_tls_web.html#背景\" target=\"_blank\" rel=\"noopener\">TCP + TLS + Web</a></p>\n<p>3.<a href=\"https://gist.github.com/meanevo/742b61031fdf9ce01e50d4b196a3f31e\" target=\"_blank\" rel=\"noopener\">HAproxy指南之haproxy编译安装</a></p>\n<p>4.<a href=\"https://wiki.openssl.org/index.php/Compilation_and_Installation\" target=\"_blank\" rel=\"noopener\">wiki_openssl</a></p>\n<p>5.<a href=\"https://dnsprivacy.org/wiki/display/DP/Building+HAProxy+so+that+it+can+use+TLSv1.3\" target=\"_blank\" rel=\"noopener\">Building HAProxy so that it can use TLSv1.3</a></p>\n<p>6.<a href=\"https://certbot.eff.org/lets-encrypt/centosrhel7-nginx.html\" target=\"_blank\" rel=\"noopener\">Nginx on CentOS/RHEL 7</a></p>\n<p>7.<a href=\"https://stackoverflow.com/questions/30101075/haproxy-doesnt-start-can-not-bind-unix-socket-run-haproxy-admin-sock\" target=\"_blank\" rel=\"noopener\">HAProxy doesn’t start, can not bind UNIX socket</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>由于忍不住剁手新入一台韩国Kdatacenter的VPS，从南京联通出去的链路还是不错的，如图所示。<br><img src=\"https://i.loli.net/2020/06/17/tvlpqiFUckWEjsQ.png\" alt=\"image.png\"></p>\n<p>于是乎，需要给它重新配置一些东西。默认给的操作系统是CentOS6，我发工单改成了CentOS7。它家工单系统蛮有意思的，我半夜三点钟发居然十分钟后就回复了，看来是有其他时区的客服。</p>\n<p>最近发现官方社区出了TCP+TLS的指南，不再是以前的Websocket+TLS，而是参照Trojan的TCP+TLS的思路，用Haproxy作为443前端根据流量特征进行中转，具体来说就是，如果接入流量真的是http流量的话，那么就送到nginx后端，如果是其他流量的话，那么就把它送到v2ray的VMESS端口里。以前的方式是固定web path里的统统用websocket反向代理到VMESS端口。现在这种TCP+TLS的方式根据测试延迟会比以前低一些。</p>\n<p>我个人第一想法是感觉额外添加一个Haproxy出来不够美观，如果能够只用V2ray就更加优雅了。感觉应该是可行的，比如用V2ray的任意门，但是仔细想想可能是因目前V2ray的代理在TLS的实现上有问题，所以社区大佬才没有去尝试吧。之后估计V2ray core更新后就可以不用Haproxy了。最近时间紧，我就不要去探索了，2333~</p>\n<h5 id=\"以下所有操作默认都在root用户中执行\"><a href=\"#以下所有操作默认都在root用户中执行\" class=\"headerlink\" title=\"以下所有操作默认都在root用户中执行\"></a>以下所有操作默认都在root用户中执行</h5><h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h3 id=\"1-域名解析\"><a href=\"#1-域名解析\" class=\"headerlink\" title=\"1.域名解析\"></a>1.域名解析</h3><p>我的域名是在Cloudflare上解析的，登录Cloudflare，之后创建A记录到我服务器的IP即可。</p>\n<h3 id=\"2-安装nginx\"><a href=\"#2-安装nginx\" class=\"headerlink\" title=\"2.安装nginx\"></a>2.安装nginx</h3><p>最省事的方法是直接用APT或者YUM装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br><span class=\"line\">yum install -y epel-release</span><br><span class=\"line\">yum install -y vim</span><br><span class=\"line\">yum install -y nginx</span><br></pre></td></tr></table></figure>\n<p>修改配置<code>vim /etc/nginx/nginx.conf</code>，找到server_name这一项，将localhost改为自己的域名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name example.com;\t#记得改成你自己的域名</span><br><span class=\"line\">    .....</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-申请证书\"><a href=\"#3-申请证书\" class=\"headerlink\" title=\"3.申请证书\"></a>3.申请证书</h3><p>要用正常的TLS得有签名的证书才行，这里我们采用certbot来实现 lets encrypt证书的申请和自动续期</p>\n<h4 id=\"3-1-下载certbot\"><a href=\"#3-1-下载certbot\" class=\"headerlink\" title=\"3.1 下载certbot\"></a>3.1 下载certbot</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install certbot python2-certbot-nginx</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-选择Certbot的运行方式\"><a href=\"#3-2-选择Certbot的运行方式\" class=\"headerlink\" title=\"3.2 选择Certbot的运行方式\"></a>3.2 选择Certbot的运行方式</h4><p>由于我们不需要nginx直接监听443，因此这里建议仅生成证书</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certbot certonly --nginx</span><br></pre></td></tr></table></figure>\n<p>成功之后证书存在</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_certificate /etc/letsencrypt/live/your_domain/fullchain.pem; # managed by Certbot</span><br><span class=\"line\">ssl_certificate_key /etc/letsencrypt/live/your_domain/privkey.pem; # managed by Certbot</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-3-设定自动续期\"><a href=\"#3-3-设定自动续期\" class=\"headerlink\" title=\"3.3 设定自动续期\"></a>3.3 设定自动续期</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' &amp;&amp; certbot renew -q\" | sudo tee -a /etc/crontab &gt; /dev/null</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-配置Haproxy\"><a href=\"#4-配置Haproxy\" class=\"headerlink\" title=\"4.配置Haproxy\"></a>4.配置Haproxy</h3><h4 id=\"4-1-编译openssl-1-1-1\"><a href=\"#4-1-编译openssl-1-1-1\" class=\"headerlink\" title=\"4.1 编译openssl 1.1.1\"></a>4.1 编译openssl 1.1.1</h4><h5 id=\"我们需要openssl1-1-1要支持TLS-1-3\"><a href=\"#我们需要openssl1-1-1要支持TLS-1-3\" class=\"headerlink\" title=\"我们需要openssl1.1.1要支持TLS 1.3\"></a>我们需要openssl1.1.1要支持TLS 1.3</h5><p>安装依赖</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall 'Development Tools'</span><br></pre></td></tr></table></figure>\n<p>下载源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz</span><br><span class=\"line\">tar -xzf openssl-1.1.1g.tar.gz</span><br></pre></td></tr></table></figure>\n<p>编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd openssl-OpenSSL_1_1_1g/</span><br><span class=\"line\"><span class=\"meta\">#</span> 通常可以直接使用config (from Ubuntu 13.04, x64, 本文在CentOS7.3测试通过):</span><br><span class=\"line\">./config --prefix=/opt/openssl-1.1.1 shared</span><br><span class=\"line\"><span class=\"meta\">#</span>编译</span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"meta\">#</span>安装</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-编译haproxy\"><a href=\"#4-2-编译haproxy\" class=\"headerlink\" title=\"4.2 编译haproxy\"></a>4.2 编译haproxy</h4><p>源码下载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y make gcc perl pcre-devel zlib-devel pcre2 pcre2-devel</span><br><span class=\"line\">wget http://www.haproxy.org/download/1.9/src/haproxy-1.9.15.tar.gz</span><br><span class=\"line\">tar -zxvf haproxy-1.9.15.tar.gz</span><br><span class=\"line\">cd haproxy-1.9.15/</span><br></pre></td></tr></table></figure>\n<p>编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make TARGET=linux2628 CPU=native USE_PCRE2=1 USE_PCRE2_JIT=1 USE_OPENSSL=1 SSL_LIB=/opt/openssl-1.1.1/lib SSL_INC=/opt/openssl-1.1.1/include USE_ZLIB=1</span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"meta\">#</span> Check your sbin path at /usr/local/sbin</span><br><span class=\"line\">cp haproxy /usr/local/sbin/haproxy</span><br></pre></td></tr></table></figure>\n<p>创建配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /etc/haproxy/</span><br><span class=\"line\">vim /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>\n<p>代码内容如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global</span><br><span class=\"line\">    log /dev/log local0</span><br><span class=\"line\">    log /dev/log local1 notice</span><br><span class=\"line\">    #chroot /var/lib/haproxy</span><br><span class=\"line\">    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners</span><br><span class=\"line\">    stats timeout 30s</span><br><span class=\"line\">    #user haproxy</span><br><span class=\"line\">    #group haproxy</span><br><span class=\"line\">    daemon</span><br><span class=\"line\">    ca-base /etc/ssl/certs</span><br><span class=\"line\">    crt-base /etc/ssl/private</span><br><span class=\"line\"></span><br><span class=\"line\">    # 仅使用支持 FS 和 AEAD 的加密套件</span><br><span class=\"line\">    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384</span><br><span class=\"line\">    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256</span><br><span class=\"line\">    # 禁用 TLS 1.2 之前的 TLS</span><br><span class=\"line\">    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11</span><br><span class=\"line\"></span><br><span class=\"line\">    tune.ssl.default-dh-param 2048</span><br><span class=\"line\"></span><br><span class=\"line\">defaults</span><br><span class=\"line\">    log global</span><br><span class=\"line\">    # 我们需要使用 tcp 模式</span><br><span class=\"line\">    mode tcp</span><br><span class=\"line\">    option dontlognull</span><br><span class=\"line\">    timeout connect 5s</span><br><span class=\"line\">    # 空闲连接等待时间，这里使用与 V2Ray 默认 connIdle 一致的 300s</span><br><span class=\"line\">    timeout client  300s</span><br><span class=\"line\">    timeout server  300s</span><br><span class=\"line\">frontend tls-in</span><br><span class=\"line\">    # 监听 443 tls，tfo 根据自身情况决定是否开启，证书放置于 /etc/ssl/private/example.com.pem</span><br><span class=\"line\">    bind *:443 tfo ssl crt /etc/ssl/private/example.com.pem</span><br><span class=\"line\">    tcp-request inspect-delay 5s</span><br><span class=\"line\">    tcp-request content accept if HTTP</span><br><span class=\"line\">    # 将 HTTP 流量发给 web 后端</span><br><span class=\"line\">    use_backend web if HTTP</span><br><span class=\"line\">    # 将其他流量发给 vmess 后端</span><br><span class=\"line\">    default_backend vmess</span><br><span class=\"line\"></span><br><span class=\"line\">backend web</span><br><span class=\"line\">    server server1 127.0.0.1:8080</span><br><span class=\"line\">  </span><br><span class=\"line\">backend vmess</span><br><span class=\"line\">    server server1 127.0.0.1:40001</span><br></pre></td></tr></table></figure>\n<p>HaProxy 的证书和密钥放于同一个文件，与 Caddy 和 Nginx 不同，可以使用命令 <code>cat example.com.crt example.com.key &gt; example.com.pem</code> 合成证书</p>\n<p>修改haproxy系统服务启动脚本：</p>\n<p><code>vim /etc/systemd/system/haproxy.service</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 确保在[Service]这一栏有这样的一项</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=LD_LIBRARY_PATH=/opt/openssl-1.1.1/lib/</span><br></pre></td></tr></table></figure>\n<p>测试，首先测试配置是否正确，如果发现错误就根据错误改正</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haproxy -db -f /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/haproxy start</span><br></pre></td></tr></table></figure>\n<p>如果没有任何提示，说明haproxy配置无误，Ctrl+C退出测试。</p>\n<p>启动服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start haproxy</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机自启</span></span><br><span class=\"line\">systemctl enable haproxy</span><br></pre></td></tr></table></figure>\n<p>此时输入<code>netstat -npl |grep 443</code>可以看到haproxy已经开始监听443端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      23824/haproxy</span><br><span class=\"line\">unix  2      [ ACC ]     STREAM     LISTENING     290695   23824/haproxy        /run/haproxy/admin.sock.23823.tmp</span><br></pre></td></tr></table></figure>\n<h4 id=\"Haproxy常见错误排查\"><a href=\"#Haproxy常见错误排查\" class=\"headerlink\" title=\"Haproxy常见错误排查\"></a>Haproxy常见错误排查</h4><p>如果提示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ALERT] 168/131339 (22782) : Starting frontend GLOBAL: cannot bind UNIX socket [/run/haproxy/admin.sock]</span><br></pre></td></tr></table></figure>\n<p>首先检查443端口是否被占用，先把apache，nginx, caddy关掉，之后的章节会提到，我们会将它的监听端口改为其他端口，用haproxy作实际443监听端口。</p>\n<p>使用<code>netstat -npl |grep 443</code>检查是否有进程占用443端口。</p>\n<p>如果确认没有，但仍然报错，则需要手动创建/run/haproxy/这个目录：</p>\n<blockquote>\n<p>Haproxy needs to write to <code>/run/haproxy/admin.sock</code> but it wont create the directory for you. Create the directory <code>/run/haproxy/</code> first or set <code>stats socket</code> to a different path.</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /run/haproxy/</span><br></pre></td></tr></table></figure>\n<h5 id=\"请注意\"><a href=\"#请注意\" class=\"headerlink\" title=\"请注意:\"></a>请注意:</h5><p><strong><em>1.务必先编译openssl 1.1.1再编译haproxy，可以通过<code>haproxy -vv |grep OpenSSL</code>查看当前编译时候openssl的版本，如果版本号不对，请指定正确版本的openssl路径后重新编译</em></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haproxy -vv |grep OpenSSL</span><br><span class=\"line\">----</span><br><span class=\"line\">Built with OpenSSL version : OpenSSL 1.1.1g  21 Apr 2020</span><br><span class=\"line\">Running on OpenSSL version : OpenSSL 1.1.1g  21 Apr 2020</span><br><span class=\"line\">OpenSSL library supports TLS extensions : yes</span><br><span class=\"line\">OpenSSL library supports SNI : yes</span><br><span class=\"line\">OpenSSL library supports : TLSv1.0 TLSv1.1 TLSv1.2 TLSv1.3</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置v2ray服务端\"><a href=\"#配置v2ray服务端\" class=\"headerlink\" title=\"配置v2ray服务端\"></a>配置v2ray服务端</h3><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure>\n<p>配置<br><code>vim /etc/v2ray/config.json</code></p>\n<p>内容如下:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"inbounds\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"vmess\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"listen\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">            \"port\": 40001,\t# 可以随便写个端口，只要注意一致就行</span><br><span class=\"line\">            \"settings\": &#123;</span><br><span class=\"line\">                \"clients\": [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"f2435e5c-9ad9-4367-836a-8341117d0a5f\"</span>(请自己生成一个)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            \"streamSettings\": &#123;</span><br><span class=\"line\">                \"network\": \"tcp\"</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    \"outbounds\": [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"freedom\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start v2ray</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机自启</span></span><br><span class=\"line\">systemctl enable v2ray</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改nginx服务端配置\"><a href=\"#修改nginx服务端配置\" class=\"headerlink\" title=\"修改nginx服务端配置\"></a>修改nginx服务端配置</h2><p><code>vim /etc/nginx/nginx.conf</code></p>\n<p> 在 http{} 里面添加，这样我们只用nginx监听普通8080端口即可，因为haproxy那边本地转发前已经解包成了明文了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 8080;</span><br><span class=\"line\">  server_name example.com;\t\t#记得改成你自己的域名</span><br><span class=\"line\">  root /var/www/html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启服务端</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 开机自启</span></span><br><span class=\"line\">systemctl enable nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>到目前为止，所有的服务就已经搭建完毕了，在浏览器里输入 https:// + 你的域名，  如果能够正常访问，说明haproxy和nginx的链路已经通了，基本上就代表可以用了。VMESS的路一般不会出什么问题，这时候就可以用客户端试一下了。</p>\n<p>客户端的配置以及一些延迟测试就不多介绍了，参考<a href=\"https://guide.v2fly.org/advanced/tcp_tls_web.html\" target=\"_blank\" rel=\"noopener\">官方社区</a>吧。</p>\n<h1 id=\"下一步计划\"><a href=\"#下一步计划\" class=\"headerlink\" title=\"下一步计划\"></a>下一步计划</h1><p>1.整个一套配置下来还是很繁琐的。我打算之后写一套docker-compose，以方便复用。</p>\n<p>2.这个机器有100G硬盘呢，反正暂时又不建站，不如下一步在上面建个图床玩玩</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>1.<a href=\"https://www.cnblogs.com/stulzq/p/9291223.html\" target=\"_blank\" rel=\"noopener\">CentOS 7 源码编译安装 Nginx</a></p>\n<p>2.<a href=\"https://guide.v2fly.org/advanced/tcp_tls_web.html#背景\" target=\"_blank\" rel=\"noopener\">TCP + TLS + Web</a></p>\n<p>3.<a href=\"https://gist.github.com/meanevo/742b61031fdf9ce01e50d4b196a3f31e\" target=\"_blank\" rel=\"noopener\">HAproxy指南之haproxy编译安装</a></p>\n<p>4.<a href=\"https://wiki.openssl.org/index.php/Compilation_and_Installation\" target=\"_blank\" rel=\"noopener\">wiki_openssl</a></p>\n<p>5.<a href=\"https://dnsprivacy.org/wiki/display/DP/Building+HAProxy+so+that+it+can+use+TLSv1.3\" target=\"_blank\" rel=\"noopener\">Building HAProxy so that it can use TLSv1.3</a></p>\n<p>6.<a href=\"https://certbot.eff.org/lets-encrypt/centosrhel7-nginx.html\" target=\"_blank\" rel=\"noopener\">Nginx on CentOS/RHEL 7</a></p>\n<p>7.<a href=\"https://stackoverflow.com/questions/30101075/haproxy-doesnt-start-can-not-bind-unix-socket-run-haproxy-admin-sock\" target=\"_blank\" rel=\"noopener\">HAProxy doesn’t start, can not bind UNIX socket</a></p>\n"},{"layout":"Mac OS","title":"DELL inspiron 7447 黑苹果折腾记录","date":"2016-04-04T16:00:00.000Z","comments":0,"urlname":"7447-hackintosh","_content":"动机\n---\n作为一名穷逼学生总是想蹭点生活费花花。奈何生性懒惰，体质孱弱，洗不了盘子，发不了传单。\n\n前一段时间买了个几块钱的APP玩顿感肉疼的同时突然觉得也许写个APP啥的挂在appstore上卖是个发家致富的好方法~q(≧▽≦q)\n\n于是雄心勃勃的要去学Swift(●'◡'●)，第一步，我需要一个Mac OS系统\nMac 系统获得方案\n---\n\n<!-- more -->\n\n> * 方案1 土豪专属，直接买一台MacBook Air/Pro\n\n![MacBook Air](http://images.apple.com/macbook-air/images/overview_hero_hero_2x.jpg)\n（╯－＿－）╯╧╧，看到这价格我内心是绝然崩溃的，我只是想水一波零花钱，这么一来我连成本都收不回来啦~\n>方案2 懒人必备，虚拟机安装OS X\n\n这个方案确实方便省时成本低，想尝试的同学可以参考我的帖子。\n[虚拟机安装Mac OS](http://fcc.cumt.edu.cn/forum.php?mod=viewthread&tid=58)\n\n但是这个方法最大的缺点就是虚拟显卡带不起来水果的图形加速，于是你一点启动器就各种卡顿，\n\n本人强迫症，不能忍不能忍（╯－＿－）╯╧╧\n> * 方案3 屌丝逆袭，普通PC机上装Mac OS\n\n首先看看什么叫黑苹果\n>黑苹果 （操作系统） \n自从苹果采用Intel的处理器，OS X被黑客破解后可以安装在Intel CPU与部分AMD CPU的机器上。从而出现了一大批未购买苹果机而使用苹果操作系统的机器，被称为黑苹果(Hackintosh)；在Mac苹果机上面安装原版Mac系统的被称为白苹果（Macintosh），与黑苹果相对。\n注：摘自百度百科\n\n本次安装黑苹果将使用一个叫做Clover的引导，这是一个开源的EFI bootloader引导项目，支持OSX的启动和参数更改，具体请参看\n\n[Clvoer efi bootloader](https://sourceforge.net/projects/cloverefiboot/)\n\n\n以安装*OS X 10.11.3 EI Captin*系统为例\n\n开始折腾\n----\n配置单以及驱动情况\n----\n> * 电脑品牌：戴尔灵越7447 Dell Inspiron 7447\n\n> * CPU：I5-4200H Haswell架构\n> * 内存：4G+4G\n> * 系统：Win10 1151 updated\n> * 硬盘：128SSD+1024GBHHD\n> * 核心显卡：Intel(R)HD Graphics 4600 (完美驱动支持HDMI输出)\n> * 独立显卡（双显卡笔记本独显无解）：NVDIA GTX850M \n\n>**注意，采用双显卡的笔记本只可能驱动核显，除非部分笔记本出厂的时候在硬件上屏蔽核显。** \n\n> * 声卡： Realtek ALC255(仿冒为Applehda.kext完美驱动)\n \n> * 无线网卡：原：Intel AC无线网卡(无解) 更换为:BCM94352（支持蓝牙4.0，直接安装驱动即可）\n\n> * 有线网卡：板载网卡，免驱\n \n> * 分区表：UEFI+GPT\n\n步骤一、制作安装U盘\n---\n首先下载一个带Clover引导的OSX 10.11.3的包，这里推荐下载网友制作好的，方便省心。\n\n[远景技术论坛下载地址](http://bbs.pcbeta.com/viewthread-1670310-1-1.html)\n\n下载其中的*USB_Clover_Install_OS_X_El_10.11.3_15D21.dmg*\n\n然后**以管理员身份运行**[transmac](http://www.acutesystems.com/scrtm.htm)工具，如图所示\n\n![transmac](http://www.acutesystems.com/images/tmscr.gif)\n\n然后右键点击 U盘，选择Restore from image这个项，然后选中下载，选择dmg映像，确定。这个过程如果U盘一般的话，应该需要20多分钟，请耐心等待。（务必注意事先备份U盘数据）\n\n等制作完毕后，我们的准备工作就算是做好啦。\n\n步骤二、安装系统，结束此步基本就成功了一大半\n---\n进入U盘，U盘制作完毕后，重启计算机，开机的时候按F12 (戴尔多为F12)，进入boot menu，选择U盘所对应的EFI启动项启动。如图所示\n![bootmenu](../../../../img/bootmenu.png)\n\n进入以后出现clover引导界面，和我不一样的是因为主题不一样的原因，clover可以自己更换主题，很炫酷有木有~q(≧▽≦q)\n![clover引导界面](http://cdn.pcbeta.attachment.inimc.com/data/attachment/album/201403/02/13595029lk2q26fxf36s2s.png)\n大概像这样，图片上的选择很多是因为硬盘里装的系统多，实际安装的时候不会出现这么多选项的，\n\n找到一个叫boot os x install from os x eicaptin后，\n\n**按空格进入选择菜单**\n\n选择verbose mode(啰嗦模式，如果过程出错可以根据相关信息查找资料修改config.plist)\n\n这个安装过程因人而异，有的电脑改都不用改直接就能装，有的电脑比如我的,会出现秒重启的现象，出现这种现象，只要打开U盘中clvoer目录先的config.plist，将其中kernalPM改为ture即可。\n\n其它的错误请大家根据报错信息到各大论坛上发帖求助。一定要沉住气，有耐心，过了这一步，基本上就成功80%,只剩下一些驱动问题。\n\n等加载过程完毕后，将会出现OS X的安装界面（这多半是个好兆头），如图，安装前需要先打开工具里的磁盘工具\n![磁盘工具](http://images.weiphone.net/data/attachment/forum/201401/09/100220nr44orrv8farro0c.jpg)\n---------------------------------2016年7月23日更新---------------------------\n-\n虽然最近先是忙考试又是电设的，不过自己写的博文跪着也得更新完呀QAQ\n![磁盘工具](/img/Disk.png)\n如图，直接把整块硬盘点抹除（好吧，其实可以分区，不过讲起来好麻烦，我就偷偷懒）。嗯，回到安装页面，选择那个分区点安装就好，安装的剩下步骤没什么好说的了，跟着提示走就好。\n\n步骤三、完善驱动\n---\n装完以后终于可以进去美美哒的Mac OS啦，不过先不要高兴的太早，现在这个Mac各个部分的驱动都还没有安装，wifi、电源管理、关机、亮度调整、声音等等都需要调整，是不是听着就头大了呢？\n","source":"_posts/DELL inprison 7447 黑苹果折腾记录.md","raw":"---\nlayout: Mac OS\ntitle: DELL inspiron 7447 黑苹果折腾记录\ndate: 2016-04-05\ncomments: false\ncategories: 计算机相关技术\ntags: Mac OS\nurlname:  7447-hackintosh\n---\n动机\n---\n作为一名穷逼学生总是想蹭点生活费花花。奈何生性懒惰，体质孱弱，洗不了盘子，发不了传单。\n\n前一段时间买了个几块钱的APP玩顿感肉疼的同时突然觉得也许写个APP啥的挂在appstore上卖是个发家致富的好方法~q(≧▽≦q)\n\n于是雄心勃勃的要去学Swift(●'◡'●)，第一步，我需要一个Mac OS系统\nMac 系统获得方案\n---\n\n<!-- more -->\n\n> * 方案1 土豪专属，直接买一台MacBook Air/Pro\n\n![MacBook Air](http://images.apple.com/macbook-air/images/overview_hero_hero_2x.jpg)\n（╯－＿－）╯╧╧，看到这价格我内心是绝然崩溃的，我只是想水一波零花钱，这么一来我连成本都收不回来啦~\n>方案2 懒人必备，虚拟机安装OS X\n\n这个方案确实方便省时成本低，想尝试的同学可以参考我的帖子。\n[虚拟机安装Mac OS](http://fcc.cumt.edu.cn/forum.php?mod=viewthread&tid=58)\n\n但是这个方法最大的缺点就是虚拟显卡带不起来水果的图形加速，于是你一点启动器就各种卡顿，\n\n本人强迫症，不能忍不能忍（╯－＿－）╯╧╧\n> * 方案3 屌丝逆袭，普通PC机上装Mac OS\n\n首先看看什么叫黑苹果\n>黑苹果 （操作系统） \n自从苹果采用Intel的处理器，OS X被黑客破解后可以安装在Intel CPU与部分AMD CPU的机器上。从而出现了一大批未购买苹果机而使用苹果操作系统的机器，被称为黑苹果(Hackintosh)；在Mac苹果机上面安装原版Mac系统的被称为白苹果（Macintosh），与黑苹果相对。\n注：摘自百度百科\n\n本次安装黑苹果将使用一个叫做Clover的引导，这是一个开源的EFI bootloader引导项目，支持OSX的启动和参数更改，具体请参看\n\n[Clvoer efi bootloader](https://sourceforge.net/projects/cloverefiboot/)\n\n\n以安装*OS X 10.11.3 EI Captin*系统为例\n\n开始折腾\n----\n配置单以及驱动情况\n----\n> * 电脑品牌：戴尔灵越7447 Dell Inspiron 7447\n\n> * CPU：I5-4200H Haswell架构\n> * 内存：4G+4G\n> * 系统：Win10 1151 updated\n> * 硬盘：128SSD+1024GBHHD\n> * 核心显卡：Intel(R)HD Graphics 4600 (完美驱动支持HDMI输出)\n> * 独立显卡（双显卡笔记本独显无解）：NVDIA GTX850M \n\n>**注意，采用双显卡的笔记本只可能驱动核显，除非部分笔记本出厂的时候在硬件上屏蔽核显。** \n\n> * 声卡： Realtek ALC255(仿冒为Applehda.kext完美驱动)\n \n> * 无线网卡：原：Intel AC无线网卡(无解) 更换为:BCM94352（支持蓝牙4.0，直接安装驱动即可）\n\n> * 有线网卡：板载网卡，免驱\n \n> * 分区表：UEFI+GPT\n\n步骤一、制作安装U盘\n---\n首先下载一个带Clover引导的OSX 10.11.3的包，这里推荐下载网友制作好的，方便省心。\n\n[远景技术论坛下载地址](http://bbs.pcbeta.com/viewthread-1670310-1-1.html)\n\n下载其中的*USB_Clover_Install_OS_X_El_10.11.3_15D21.dmg*\n\n然后**以管理员身份运行**[transmac](http://www.acutesystems.com/scrtm.htm)工具，如图所示\n\n![transmac](http://www.acutesystems.com/images/tmscr.gif)\n\n然后右键点击 U盘，选择Restore from image这个项，然后选中下载，选择dmg映像，确定。这个过程如果U盘一般的话，应该需要20多分钟，请耐心等待。（务必注意事先备份U盘数据）\n\n等制作完毕后，我们的准备工作就算是做好啦。\n\n步骤二、安装系统，结束此步基本就成功了一大半\n---\n进入U盘，U盘制作完毕后，重启计算机，开机的时候按F12 (戴尔多为F12)，进入boot menu，选择U盘所对应的EFI启动项启动。如图所示\n![bootmenu](../../../../img/bootmenu.png)\n\n进入以后出现clover引导界面，和我不一样的是因为主题不一样的原因，clover可以自己更换主题，很炫酷有木有~q(≧▽≦q)\n![clover引导界面](http://cdn.pcbeta.attachment.inimc.com/data/attachment/album/201403/02/13595029lk2q26fxf36s2s.png)\n大概像这样，图片上的选择很多是因为硬盘里装的系统多，实际安装的时候不会出现这么多选项的，\n\n找到一个叫boot os x install from os x eicaptin后，\n\n**按空格进入选择菜单**\n\n选择verbose mode(啰嗦模式，如果过程出错可以根据相关信息查找资料修改config.plist)\n\n这个安装过程因人而异，有的电脑改都不用改直接就能装，有的电脑比如我的,会出现秒重启的现象，出现这种现象，只要打开U盘中clvoer目录先的config.plist，将其中kernalPM改为ture即可。\n\n其它的错误请大家根据报错信息到各大论坛上发帖求助。一定要沉住气，有耐心，过了这一步，基本上就成功80%,只剩下一些驱动问题。\n\n等加载过程完毕后，将会出现OS X的安装界面（这多半是个好兆头），如图，安装前需要先打开工具里的磁盘工具\n![磁盘工具](http://images.weiphone.net/data/attachment/forum/201401/09/100220nr44orrv8farro0c.jpg)\n---------------------------------2016年7月23日更新---------------------------\n-\n虽然最近先是忙考试又是电设的，不过自己写的博文跪着也得更新完呀QAQ\n![磁盘工具](/img/Disk.png)\n如图，直接把整块硬盘点抹除（好吧，其实可以分区，不过讲起来好麻烦，我就偷偷懒）。嗯，回到安装页面，选择那个分区点安装就好，安装的剩下步骤没什么好说的了，跟着提示走就好。\n\n步骤三、完善驱动\n---\n装完以后终于可以进去美美哒的Mac OS啦，不过先不要高兴的太早，现在这个Mac各个部分的驱动都还没有安装，wifi、电源管理、关机、亮度调整、声音等等都需要调整，是不是听着就头大了呢？\n","slug":"DELL inprison 7447 黑苹果折腾记录","published":1,"updated":"2020-06-16T17:49:52.700Z","photos":[],"link":"","_id":"ckbiy7xzc00025ojs1bqx0kth","content":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>作为一名穷逼学生总是想蹭点生活费花花。奈何生性懒惰，体质孱弱，洗不了盘子，发不了传单。</p>\n<p>前一段时间买了个几块钱的APP玩顿感肉疼的同时突然觉得也许写个APP啥的挂在appstore上卖是个发家致富的好方法~q(≧▽≦q)</p>\n<p>于是雄心勃勃的要去学Swift(●’◡’●)，第一步，我需要一个Mac OS系统</p>\n<h2 id=\"Mac-系统获得方案\"><a href=\"#Mac-系统获得方案\" class=\"headerlink\" title=\"Mac 系统获得方案\"></a>Mac 系统获得方案</h2><a id=\"more\"></a>\n<blockquote>\n<ul>\n<li>方案1 土豪专属，直接买一台MacBook Air/Pro</li>\n</ul>\n</blockquote>\n<p><img src=\"http://images.apple.com/macbook-air/images/overview_hero_hero_2x.jpg\" alt=\"MacBook Air\"><br>（╯－＿－）╯╧╧，看到这价格我内心是绝然崩溃的，我只是想水一波零花钱，这么一来我连成本都收不回来啦~</p>\n<blockquote>\n<p>方案2 懒人必备，虚拟机安装OS X</p>\n</blockquote>\n<p>这个方案确实方便省时成本低，想尝试的同学可以参考我的帖子。<br><a href=\"http://fcc.cumt.edu.cn/forum.php?mod=viewthread&amp;tid=58\" target=\"_blank\" rel=\"noopener\">虚拟机安装Mac OS</a></p>\n<p>但是这个方法最大的缺点就是虚拟显卡带不起来水果的图形加速，于是你一点启动器就各种卡顿，</p>\n<p>本人强迫症，不能忍不能忍（╯－＿－）╯╧╧</p>\n<blockquote>\n<ul>\n<li>方案3 屌丝逆袭，普通PC机上装Mac OS</li>\n</ul>\n</blockquote>\n<p>首先看看什么叫黑苹果</p>\n<blockquote>\n<p>黑苹果 （操作系统）<br>自从苹果采用Intel的处理器，OS X被黑客破解后可以安装在Intel CPU与部分AMD CPU的机器上。从而出现了一大批未购买苹果机而使用苹果操作系统的机器，被称为黑苹果(Hackintosh)；在Mac苹果机上面安装原版Mac系统的被称为白苹果（Macintosh），与黑苹果相对。<br>注：摘自百度百科</p>\n</blockquote>\n<p>本次安装黑苹果将使用一个叫做Clover的引导，这是一个开源的EFI bootloader引导项目，支持OSX的启动和参数更改，具体请参看</p>\n<p><a href=\"https://sourceforge.net/projects/cloverefiboot/\" target=\"_blank\" rel=\"noopener\">Clvoer efi bootloader</a></p>\n<p>以安装<em>OS X 10.11.3 EI Captin</em>系统为例</p>\n<h2 id=\"开始折腾\"><a href=\"#开始折腾\" class=\"headerlink\" title=\"开始折腾\"></a>开始折腾</h2><h2 id=\"配置单以及驱动情况\"><a href=\"#配置单以及驱动情况\" class=\"headerlink\" title=\"配置单以及驱动情况\"></a>配置单以及驱动情况</h2><blockquote>\n<ul>\n<li><p>电脑品牌：戴尔灵越7447 Dell Inspiron 7447</p>\n</li>\n<li><p>CPU：I5-4200H Haswell架构</p>\n</li>\n<li>内存：4G+4G</li>\n<li>系统：Win10 1151 updated</li>\n<li>硬盘：128SSD+1024GBHHD</li>\n<li>核心显卡：Intel(R)HD Graphics 4600 (完美驱动支持HDMI输出)</li>\n<li>独立显卡（双显卡笔记本独显无解）：NVDIA GTX850M </li>\n</ul>\n<p><strong>注意，采用双显卡的笔记本只可能驱动核显，除非部分笔记本出厂的时候在硬件上屏蔽核显。</strong> </p>\n<ul>\n<li><p>声卡： Realtek ALC255(仿冒为Applehda.kext完美驱动)</p>\n</li>\n<li><p>无线网卡：原：Intel AC无线网卡(无解) 更换为:BCM94352（支持蓝牙4.0，直接安装驱动即可）</p>\n</li>\n<li><p>有线网卡：板载网卡，免驱</p>\n</li>\n<li><p>分区表：UEFI+GPT</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"步骤一、制作安装U盘\"><a href=\"#步骤一、制作安装U盘\" class=\"headerlink\" title=\"步骤一、制作安装U盘\"></a>步骤一、制作安装U盘</h2><p>首先下载一个带Clover引导的OSX 10.11.3的包，这里推荐下载网友制作好的，方便省心。</p>\n<p><a href=\"http://bbs.pcbeta.com/viewthread-1670310-1-1.html\" target=\"_blank\" rel=\"noopener\">远景技术论坛下载地址</a></p>\n<p>下载其中的<em>USB_Clover_Install_OS_X_El_10.11.3_15D21.dmg</em></p>\n<p>然后<strong>以管理员身份运行</strong><a href=\"http://www.acutesystems.com/scrtm.htm\" target=\"_blank\" rel=\"noopener\">transmac</a>工具，如图所示</p>\n<p><img src=\"http://www.acutesystems.com/images/tmscr.gif\" alt=\"transmac\"></p>\n<p>然后右键点击 U盘，选择Restore from image这个项，然后选中下载，选择dmg映像，确定。这个过程如果U盘一般的话，应该需要20多分钟，请耐心等待。（务必注意事先备份U盘数据）</p>\n<p>等制作完毕后，我们的准备工作就算是做好啦。</p>\n<h2 id=\"步骤二、安装系统，结束此步基本就成功了一大半\"><a href=\"#步骤二、安装系统，结束此步基本就成功了一大半\" class=\"headerlink\" title=\"步骤二、安装系统，结束此步基本就成功了一大半\"></a>步骤二、安装系统，结束此步基本就成功了一大半</h2><p>进入U盘，U盘制作完毕后，重启计算机，开机的时候按F12 (戴尔多为F12)，进入boot menu，选择U盘所对应的EFI启动项启动。如图所示<br><img src=\"../../../../img/bootmenu.png\" alt=\"bootmenu\"></p>\n<p>进入以后出现clover引导界面，和我不一样的是因为主题不一样的原因，clover可以自己更换主题，很炫酷有木有~q(≧▽≦q)<br><img src=\"http://cdn.pcbeta.attachment.inimc.com/data/attachment/album/201403/02/13595029lk2q26fxf36s2s.png\" alt=\"clover引导界面\"><br>大概像这样，图片上的选择很多是因为硬盘里装的系统多，实际安装的时候不会出现这么多选项的，</p>\n<p>找到一个叫boot os x install from os x eicaptin后，</p>\n<p><strong>按空格进入选择菜单</strong></p>\n<p>选择verbose mode(啰嗦模式，如果过程出错可以根据相关信息查找资料修改config.plist)</p>\n<p>这个安装过程因人而异，有的电脑改都不用改直接就能装，有的电脑比如我的,会出现秒重启的现象，出现这种现象，只要打开U盘中clvoer目录先的config.plist，将其中kernalPM改为ture即可。</p>\n<p>其它的错误请大家根据报错信息到各大论坛上发帖求助。一定要沉住气，有耐心，过了这一步，基本上就成功80%,只剩下一些驱动问题。</p>\n<p>等加载过程完毕后，将会出现OS X的安装界面（这多半是个好兆头），如图，安装前需要先打开工具里的磁盘工具<br><img src=\"http://images.weiphone.net/data/attachment/forum/201401/09/100220nr44orrv8farro0c.jpg\" alt=\"磁盘工具\"><br>———————————2016年7月23日更新—————————<br>-<br>虽然最近先是忙考试又是电设的，不过自己写的博文跪着也得更新完呀QAQ<br><img src=\"/img/Disk.png\" alt=\"磁盘工具\"><br>如图，直接把整块硬盘点抹除（好吧，其实可以分区，不过讲起来好麻烦，我就偷偷懒）。嗯，回到安装页面，选择那个分区点安装就好，安装的剩下步骤没什么好说的了，跟着提示走就好。</p>\n<h2 id=\"步骤三、完善驱动\"><a href=\"#步骤三、完善驱动\" class=\"headerlink\" title=\"步骤三、完善驱动\"></a>步骤三、完善驱动</h2><p>装完以后终于可以进去美美哒的Mac OS啦，不过先不要高兴的太早，现在这个Mac各个部分的驱动都还没有安装，wifi、电源管理、关机、亮度调整、声音等等都需要调整，是不是听着就头大了呢？</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>作为一名穷逼学生总是想蹭点生活费花花。奈何生性懒惰，体质孱弱，洗不了盘子，发不了传单。</p>\n<p>前一段时间买了个几块钱的APP玩顿感肉疼的同时突然觉得也许写个APP啥的挂在appstore上卖是个发家致富的好方法~q(≧▽≦q)</p>\n<p>于是雄心勃勃的要去学Swift(●’◡’●)，第一步，我需要一个Mac OS系统</p>\n<h2 id=\"Mac-系统获得方案\"><a href=\"#Mac-系统获得方案\" class=\"headerlink\" title=\"Mac 系统获得方案\"></a>Mac 系统获得方案</h2>","more":"<blockquote>\n<ul>\n<li>方案1 土豪专属，直接买一台MacBook Air/Pro</li>\n</ul>\n</blockquote>\n<p><img src=\"http://images.apple.com/macbook-air/images/overview_hero_hero_2x.jpg\" alt=\"MacBook Air\"><br>（╯－＿－）╯╧╧，看到这价格我内心是绝然崩溃的，我只是想水一波零花钱，这么一来我连成本都收不回来啦~</p>\n<blockquote>\n<p>方案2 懒人必备，虚拟机安装OS X</p>\n</blockquote>\n<p>这个方案确实方便省时成本低，想尝试的同学可以参考我的帖子。<br><a href=\"http://fcc.cumt.edu.cn/forum.php?mod=viewthread&amp;tid=58\" target=\"_blank\" rel=\"noopener\">虚拟机安装Mac OS</a></p>\n<p>但是这个方法最大的缺点就是虚拟显卡带不起来水果的图形加速，于是你一点启动器就各种卡顿，</p>\n<p>本人强迫症，不能忍不能忍（╯－＿－）╯╧╧</p>\n<blockquote>\n<ul>\n<li>方案3 屌丝逆袭，普通PC机上装Mac OS</li>\n</ul>\n</blockquote>\n<p>首先看看什么叫黑苹果</p>\n<blockquote>\n<p>黑苹果 （操作系统）<br>自从苹果采用Intel的处理器，OS X被黑客破解后可以安装在Intel CPU与部分AMD CPU的机器上。从而出现了一大批未购买苹果机而使用苹果操作系统的机器，被称为黑苹果(Hackintosh)；在Mac苹果机上面安装原版Mac系统的被称为白苹果（Macintosh），与黑苹果相对。<br>注：摘自百度百科</p>\n</blockquote>\n<p>本次安装黑苹果将使用一个叫做Clover的引导，这是一个开源的EFI bootloader引导项目，支持OSX的启动和参数更改，具体请参看</p>\n<p><a href=\"https://sourceforge.net/projects/cloverefiboot/\" target=\"_blank\" rel=\"noopener\">Clvoer efi bootloader</a></p>\n<p>以安装<em>OS X 10.11.3 EI Captin</em>系统为例</p>\n<h2 id=\"开始折腾\"><a href=\"#开始折腾\" class=\"headerlink\" title=\"开始折腾\"></a>开始折腾</h2><h2 id=\"配置单以及驱动情况\"><a href=\"#配置单以及驱动情况\" class=\"headerlink\" title=\"配置单以及驱动情况\"></a>配置单以及驱动情况</h2><blockquote>\n<ul>\n<li><p>电脑品牌：戴尔灵越7447 Dell Inspiron 7447</p>\n</li>\n<li><p>CPU：I5-4200H Haswell架构</p>\n</li>\n<li>内存：4G+4G</li>\n<li>系统：Win10 1151 updated</li>\n<li>硬盘：128SSD+1024GBHHD</li>\n<li>核心显卡：Intel(R)HD Graphics 4600 (完美驱动支持HDMI输出)</li>\n<li>独立显卡（双显卡笔记本独显无解）：NVDIA GTX850M </li>\n</ul>\n<p><strong>注意，采用双显卡的笔记本只可能驱动核显，除非部分笔记本出厂的时候在硬件上屏蔽核显。</strong> </p>\n<ul>\n<li><p>声卡： Realtek ALC255(仿冒为Applehda.kext完美驱动)</p>\n</li>\n<li><p>无线网卡：原：Intel AC无线网卡(无解) 更换为:BCM94352（支持蓝牙4.0，直接安装驱动即可）</p>\n</li>\n<li><p>有线网卡：板载网卡，免驱</p>\n</li>\n<li><p>分区表：UEFI+GPT</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"步骤一、制作安装U盘\"><a href=\"#步骤一、制作安装U盘\" class=\"headerlink\" title=\"步骤一、制作安装U盘\"></a>步骤一、制作安装U盘</h2><p>首先下载一个带Clover引导的OSX 10.11.3的包，这里推荐下载网友制作好的，方便省心。</p>\n<p><a href=\"http://bbs.pcbeta.com/viewthread-1670310-1-1.html\" target=\"_blank\" rel=\"noopener\">远景技术论坛下载地址</a></p>\n<p>下载其中的<em>USB_Clover_Install_OS_X_El_10.11.3_15D21.dmg</em></p>\n<p>然后<strong>以管理员身份运行</strong><a href=\"http://www.acutesystems.com/scrtm.htm\" target=\"_blank\" rel=\"noopener\">transmac</a>工具，如图所示</p>\n<p><img src=\"http://www.acutesystems.com/images/tmscr.gif\" alt=\"transmac\"></p>\n<p>然后右键点击 U盘，选择Restore from image这个项，然后选中下载，选择dmg映像，确定。这个过程如果U盘一般的话，应该需要20多分钟，请耐心等待。（务必注意事先备份U盘数据）</p>\n<p>等制作完毕后，我们的准备工作就算是做好啦。</p>\n<h2 id=\"步骤二、安装系统，结束此步基本就成功了一大半\"><a href=\"#步骤二、安装系统，结束此步基本就成功了一大半\" class=\"headerlink\" title=\"步骤二、安装系统，结束此步基本就成功了一大半\"></a>步骤二、安装系统，结束此步基本就成功了一大半</h2><p>进入U盘，U盘制作完毕后，重启计算机，开机的时候按F12 (戴尔多为F12)，进入boot menu，选择U盘所对应的EFI启动项启动。如图所示<br><img src=\"../../../../img/bootmenu.png\" alt=\"bootmenu\"></p>\n<p>进入以后出现clover引导界面，和我不一样的是因为主题不一样的原因，clover可以自己更换主题，很炫酷有木有~q(≧▽≦q)<br><img src=\"http://cdn.pcbeta.attachment.inimc.com/data/attachment/album/201403/02/13595029lk2q26fxf36s2s.png\" alt=\"clover引导界面\"><br>大概像这样，图片上的选择很多是因为硬盘里装的系统多，实际安装的时候不会出现这么多选项的，</p>\n<p>找到一个叫boot os x install from os x eicaptin后，</p>\n<p><strong>按空格进入选择菜单</strong></p>\n<p>选择verbose mode(啰嗦模式，如果过程出错可以根据相关信息查找资料修改config.plist)</p>\n<p>这个安装过程因人而异，有的电脑改都不用改直接就能装，有的电脑比如我的,会出现秒重启的现象，出现这种现象，只要打开U盘中clvoer目录先的config.plist，将其中kernalPM改为ture即可。</p>\n<p>其它的错误请大家根据报错信息到各大论坛上发帖求助。一定要沉住气，有耐心，过了这一步，基本上就成功80%,只剩下一些驱动问题。</p>\n<p>等加载过程完毕后，将会出现OS X的安装界面（这多半是个好兆头），如图，安装前需要先打开工具里的磁盘工具<br><img src=\"http://images.weiphone.net/data/attachment/forum/201401/09/100220nr44orrv8farro0c.jpg\" alt=\"磁盘工具\"><br>———————————2016年7月23日更新—————————<br>-<br>虽然最近先是忙考试又是电设的，不过自己写的博文跪着也得更新完呀QAQ<br><img src=\"/img/Disk.png\" alt=\"磁盘工具\"><br>如图，直接把整块硬盘点抹除（好吧，其实可以分区，不过讲起来好麻烦，我就偷偷懒）。嗯，回到安装页面，选择那个分区点安装就好，安装的剩下步骤没什么好说的了，跟着提示走就好。</p>\n<h2 id=\"步骤三、完善驱动\"><a href=\"#步骤三、完善驱动\" class=\"headerlink\" title=\"步骤三、完善驱动\"></a>步骤三、完善驱动</h2><p>装完以后终于可以进去美美哒的Mac OS啦，不过先不要高兴的太早，现在这个Mac各个部分的驱动都还没有安装，wifi、电源管理、关机、亮度调整、声音等等都需要调整，是不是听着就头大了呢？</p>"},{"layout":"Network","title":"Centos7搭建shadowsocksR","comments":0,"date":"2016-12-03T16:00:00.000Z","urlname":"centos-installssr","_content":"\n## 前言\n本文是在免费学习机房分享的时候现场编写的，现在整理一下顺便发出来，其实就是搬的brewa11的github上的wiki,感兴趣的同学可以去原文看。\n\n本文仅用来整理自己的步骤。\n\n<!-- more -->\n\n## 介绍\n\n### Shadowsocks\n\n>Shadowsocks（中文名称：影梭）是使用Python、C++、C#等语言开发的、基于Apache许可证的开放源代码软件，用于保护网络流量、加密数据传输。Shadowsocks使用Socks5代理方式。\nShadowsocks分为服务器端和客户端。在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。\n在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。在2015年8月22日，Shadowsocks原作者Clowwindy称受到了中国政府的压力，宣布停止维护此项目并移除其用户页面所载的源代码。[2][3]\n\n![Shadowsocks](https://upload.wikimedia.org/wikipedia/commons/8/8d/Shadowsocks_logo.png)\n\n### Shadowsocks-RSS\n\nShadowsocks原本停止维护后，由@breakwa11继续参与维护的一个shadowsocks的版本。\n\n## 搭建方法\n\n - 脚本一键安装\n\n网上有很多网友自己制作的省心的一键搭建脚本。如果只是想要搭建不想细究和维护，可以考虑使用一键脚本。但手动可以帮助我们了解它。\n如：[秋水逸冰的一键脚本](https://shadowsocks.be/9.html)\n使用方法参照原文博客，不再赘述。如果只想要有个能用的SSR，到这里就可以止步了。\n\n - 手动安装\n手动安装的方法原作者的博客已经整理的非常详细了，可以参考\n[Server-Setup](https://github.com/breakwa11/shadowsocks-rss/wiki/Server-Setup)\n在这里针对CentOS7简单地记录一下过程。\n\n## 手动安装的步骤\n\n### 需要条件\n\n - 有一台装有CentOS7且接入互联网的服务器。\n\n\t一般都是VPS。如果是用来查阅墙外资料的话推荐国外vps，推荐Digitalocean，这家可以申请github学生优惠包，一年才5$，比较划算。DO家的新加坡线路对移动用户还是比较友好的。\n\t\n\t有如果是单纯用来学习如何搭建的话国内一些厂商的学生机还是比较便宜的，比如腾讯云的1元/月，阿里云的9.9/月等等，都足够用来学学网络编程或者搭建自己的主页使用了。\n\n -  有一定的Linux系统知识：ls、cd、wget、git\n - 有爱折腾的精神\n \n### 具体操作步骤\n- 连接上VPS，ssh\n\n- 输入命令\n> ` yum install git\n   ` \n> ` git clone -b manyuser https://github.com/shadowsocksr/shadowsocksr.git\n   ` \n\n执行完毕后此目录会新建一个shadowsocksr目录，其中根目录的是多用户版（即数据库版，个人用户请忽略这个），子目录中的是单用户版(即shadowsocksr/shadowsocks)。\n\n根目录即 ./shadowsocksr\n\n子目录即 ./shadowsocksr/shadowsocks\n\n进入根目录初始化配置(假设根目录在~/shadowsocksr，如果不是，命令需要适当调整)：\n\n> ` cd ~/shadowsocksr\n   ` \t\n> `bash initcfg.sh\n\t`\n\n以下步骤要进入子目录：\n\n> `cd ~/shadowsocksr/shadowsocks\n\t`\n\n修改user-config.json中的server_port，password等字段，具体可参见：\n[config.json](https://github.com/breakwa11/shadowsocks-rss/wiki/config.json)\n\n> `python server.py\n`\n\n如果要在后台运行：\n>`python server.py -d start\n`\n\n>`python server.py -d stop/restart\n`\n\n防火墙设置\n\n运行server.py后发现客户端仍然连接不上，因为指定端口没有开放。\nCentOS7以后默认防火墙从原来的iptables变成了firewalld，开放端口的命令如下:\n\n> `firewall-cmd --zone=public --add-port=端口/tcp --permanent\n`\n\n把端口换成自行设置的ServerPort即可。\n\n### 设置开机启动\n\n以上步骤完成后，应该就可以愉快地使用ssr了，不过每次开机都需要手动运行比较麻烦，这里还需要配置一下开机自启。\n\n```\n[Unit]\nDescription=ShadowsocksR server\nAfter=network.target\nWants=network.target\n\n[Service]\nType=forking\nPIDFile=/var/run/shadowsocks.pid\nExecStart=/usr/bin/python /usr/local/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocks.pid -c /etc/shadowsocks.json -d start\nExecStop=/usr/bin/python /usr/local/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocks.pid -c /etc/shadowsocks.json -d stop\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=process\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n\n```\n\n请将上述脚本保存为/etc/systemd/system/shadowsocks.service\n\n\n并执行systemctl enable shadowsocks.service && systemctl start shadowsocks.service\n\n--\n\n### Done!Enjoy it ~","source":"_posts/Centos7搭建shadowsocksR.md","raw":"---\n\nlayout: Network\ntitle: Centos7搭建shadowsocksR\ncomments: false\ndate: 2016-12-04\ncategories: 计算机相关技术\ntags: Network\nurlname: centos-installssr\n---\n\n## 前言\n本文是在免费学习机房分享的时候现场编写的，现在整理一下顺便发出来，其实就是搬的brewa11的github上的wiki,感兴趣的同学可以去原文看。\n\n本文仅用来整理自己的步骤。\n\n<!-- more -->\n\n## 介绍\n\n### Shadowsocks\n\n>Shadowsocks（中文名称：影梭）是使用Python、C++、C#等语言开发的、基于Apache许可证的开放源代码软件，用于保护网络流量、加密数据传输。Shadowsocks使用Socks5代理方式。\nShadowsocks分为服务器端和客户端。在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。\n在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。在2015年8月22日，Shadowsocks原作者Clowwindy称受到了中国政府的压力，宣布停止维护此项目并移除其用户页面所载的源代码。[2][3]\n\n![Shadowsocks](https://upload.wikimedia.org/wikipedia/commons/8/8d/Shadowsocks_logo.png)\n\n### Shadowsocks-RSS\n\nShadowsocks原本停止维护后，由@breakwa11继续参与维护的一个shadowsocks的版本。\n\n## 搭建方法\n\n - 脚本一键安装\n\n网上有很多网友自己制作的省心的一键搭建脚本。如果只是想要搭建不想细究和维护，可以考虑使用一键脚本。但手动可以帮助我们了解它。\n如：[秋水逸冰的一键脚本](https://shadowsocks.be/9.html)\n使用方法参照原文博客，不再赘述。如果只想要有个能用的SSR，到这里就可以止步了。\n\n - 手动安装\n手动安装的方法原作者的博客已经整理的非常详细了，可以参考\n[Server-Setup](https://github.com/breakwa11/shadowsocks-rss/wiki/Server-Setup)\n在这里针对CentOS7简单地记录一下过程。\n\n## 手动安装的步骤\n\n### 需要条件\n\n - 有一台装有CentOS7且接入互联网的服务器。\n\n\t一般都是VPS。如果是用来查阅墙外资料的话推荐国外vps，推荐Digitalocean，这家可以申请github学生优惠包，一年才5$，比较划算。DO家的新加坡线路对移动用户还是比较友好的。\n\t\n\t有如果是单纯用来学习如何搭建的话国内一些厂商的学生机还是比较便宜的，比如腾讯云的1元/月，阿里云的9.9/月等等，都足够用来学学网络编程或者搭建自己的主页使用了。\n\n -  有一定的Linux系统知识：ls、cd、wget、git\n - 有爱折腾的精神\n \n### 具体操作步骤\n- 连接上VPS，ssh\n\n- 输入命令\n> ` yum install git\n   ` \n> ` git clone -b manyuser https://github.com/shadowsocksr/shadowsocksr.git\n   ` \n\n执行完毕后此目录会新建一个shadowsocksr目录，其中根目录的是多用户版（即数据库版，个人用户请忽略这个），子目录中的是单用户版(即shadowsocksr/shadowsocks)。\n\n根目录即 ./shadowsocksr\n\n子目录即 ./shadowsocksr/shadowsocks\n\n进入根目录初始化配置(假设根目录在~/shadowsocksr，如果不是，命令需要适当调整)：\n\n> ` cd ~/shadowsocksr\n   ` \t\n> `bash initcfg.sh\n\t`\n\n以下步骤要进入子目录：\n\n> `cd ~/shadowsocksr/shadowsocks\n\t`\n\n修改user-config.json中的server_port，password等字段，具体可参见：\n[config.json](https://github.com/breakwa11/shadowsocks-rss/wiki/config.json)\n\n> `python server.py\n`\n\n如果要在后台运行：\n>`python server.py -d start\n`\n\n>`python server.py -d stop/restart\n`\n\n防火墙设置\n\n运行server.py后发现客户端仍然连接不上，因为指定端口没有开放。\nCentOS7以后默认防火墙从原来的iptables变成了firewalld，开放端口的命令如下:\n\n> `firewall-cmd --zone=public --add-port=端口/tcp --permanent\n`\n\n把端口换成自行设置的ServerPort即可。\n\n### 设置开机启动\n\n以上步骤完成后，应该就可以愉快地使用ssr了，不过每次开机都需要手动运行比较麻烦，这里还需要配置一下开机自启。\n\n```\n[Unit]\nDescription=ShadowsocksR server\nAfter=network.target\nWants=network.target\n\n[Service]\nType=forking\nPIDFile=/var/run/shadowsocks.pid\nExecStart=/usr/bin/python /usr/local/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocks.pid -c /etc/shadowsocks.json -d start\nExecStop=/usr/bin/python /usr/local/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocks.pid -c /etc/shadowsocks.json -d stop\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=process\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n\n```\n\n请将上述脚本保存为/etc/systemd/system/shadowsocks.service\n\n\n并执行systemctl enable shadowsocks.service && systemctl start shadowsocks.service\n\n--\n\n### Done!Enjoy it ~","slug":"Centos7搭建shadowsocksR","published":1,"updated":"2020-06-16T17:49:52.699Z","photos":[],"link":"","_id":"ckbiy7xzk00055ojsbi8lka3t","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文是在免费学习机房分享的时候现场编写的，现在整理一下顺便发出来，其实就是搬的brewa11的github上的wiki,感兴趣的同学可以去原文看。</p>\n<p>本文仅用来整理自己的步骤。</p>\n<a id=\"more\"></a>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"Shadowsocks\"><a href=\"#Shadowsocks\" class=\"headerlink\" title=\"Shadowsocks\"></a>Shadowsocks</h3><blockquote>\n<p>Shadowsocks（中文名称：影梭）是使用Python、C++、C#等语言开发的、基于Apache许可证的开放源代码软件，用于保护网络流量、加密数据传输。Shadowsocks使用Socks5代理方式。<br>Shadowsocks分为服务器端和客户端。在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。<br>在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。在2015年8月22日，Shadowsocks原作者Clowwindy称受到了中国政府的压力，宣布停止维护此项目并移除其用户页面所载的源代码。[2][3]</p>\n</blockquote>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8d/Shadowsocks_logo.png\" alt=\"Shadowsocks\"></p>\n<h3 id=\"Shadowsocks-RSS\"><a href=\"#Shadowsocks-RSS\" class=\"headerlink\" title=\"Shadowsocks-RSS\"></a>Shadowsocks-RSS</h3><p>Shadowsocks原本停止维护后，由@breakwa11继续参与维护的一个shadowsocks的版本。</p>\n<h2 id=\"搭建方法\"><a href=\"#搭建方法\" class=\"headerlink\" title=\"搭建方法\"></a>搭建方法</h2><ul>\n<li>脚本一键安装</li>\n</ul>\n<p>网上有很多网友自己制作的省心的一键搭建脚本。如果只是想要搭建不想细究和维护，可以考虑使用一键脚本。但手动可以帮助我们了解它。<br>如：<a href=\"https://shadowsocks.be/9.html\" target=\"_blank\" rel=\"noopener\">秋水逸冰的一键脚本</a><br>使用方法参照原文博客，不再赘述。如果只想要有个能用的SSR，到这里就可以止步了。</p>\n<ul>\n<li>手动安装<br>手动安装的方法原作者的博客已经整理的非常详细了，可以参考<br><a href=\"https://github.com/breakwa11/shadowsocks-rss/wiki/Server-Setup\" target=\"_blank\" rel=\"noopener\">Server-Setup</a><br>在这里针对CentOS7简单地记录一下过程。</li>\n</ul>\n<h2 id=\"手动安装的步骤\"><a href=\"#手动安装的步骤\" class=\"headerlink\" title=\"手动安装的步骤\"></a>手动安装的步骤</h2><h3 id=\"需要条件\"><a href=\"#需要条件\" class=\"headerlink\" title=\"需要条件\"></a>需要条件</h3><ul>\n<li><p>有一台装有CentOS7且接入互联网的服务器。</p>\n<p> 一般都是VPS。如果是用来查阅墙外资料的话推荐国外vps，推荐Digitalocean，这家可以申请github学生优惠包，一年才5$，比较划算。DO家的新加坡线路对移动用户还是比较友好的。</p>\n<p> 有如果是单纯用来学习如何搭建的话国内一些厂商的学生机还是比较便宜的，比如腾讯云的1元/月，阿里云的9.9/月等等，都足够用来学学网络编程或者搭建自己的主页使用了。</p>\n</li>\n<li><p>有一定的Linux系统知识：ls、cd、wget、git</p>\n</li>\n<li>有爱折腾的精神</li>\n</ul>\n<h3 id=\"具体操作步骤\"><a href=\"#具体操作步骤\" class=\"headerlink\" title=\"具体操作步骤\"></a>具体操作步骤</h3><ul>\n<li><p>连接上VPS，ssh</p>\n</li>\n<li><p>输入命令</p>\n<blockquote>\n<p><code>yum install git</code><br><code>git clone -b manyuser https://github.com/shadowsocksr/shadowsocksr.git</code> </p>\n</blockquote>\n</li>\n</ul>\n<p>执行完毕后此目录会新建一个shadowsocksr目录，其中根目录的是多用户版（即数据库版，个人用户请忽略这个），子目录中的是单用户版(即shadowsocksr/shadowsocks)。</p>\n<p>根目录即 ./shadowsocksr</p>\n<p>子目录即 ./shadowsocksr/shadowsocks</p>\n<p>进入根目录初始化配置(假设根目录在~/shadowsocksr，如果不是，命令需要适当调整)：</p>\n<blockquote>\n<p><code>cd ~/shadowsocksr</code><br><code>bash initcfg.sh</code></p>\n</blockquote>\n<p>以下步骤要进入子目录：</p>\n<blockquote>\n<p><code>cd ~/shadowsocksr/shadowsocks</code></p>\n</blockquote>\n<p>修改user-config.json中的server_port，password等字段，具体可参见：<br><a href=\"https://github.com/breakwa11/shadowsocks-rss/wiki/config.json\" target=\"_blank\" rel=\"noopener\">config.json</a></p>\n<blockquote>\n<p><code>python server.py</code></p>\n</blockquote>\n<p>如果要在后台运行：</p>\n<blockquote>\n<p><code>python server.py -d start</code></p>\n<p><code>python server.py -d stop/restart</code></p>\n</blockquote>\n<p>防火墙设置</p>\n<p>运行server.py后发现客户端仍然连接不上，因为指定端口没有开放。<br>CentOS7以后默认防火墙从原来的iptables变成了firewalld，开放端口的命令如下:</p>\n<blockquote>\n<p><code>firewall-cmd --zone=public --add-port=端口/tcp --permanent</code></p>\n</blockquote>\n<p>把端口换成自行设置的ServerPort即可。</p>\n<h3 id=\"设置开机启动\"><a href=\"#设置开机启动\" class=\"headerlink\" title=\"设置开机启动\"></a>设置开机启动</h3><p>以上步骤完成后，应该就可以愉快地使用ssr了，不过每次开机都需要手动运行比较麻烦，这里还需要配置一下开机自启。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=ShadowsocksR server</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=/var/run/shadowsocks.pid</span><br><span class=\"line\">ExecStart=/usr/bin/python /usr/local/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocks.pid -c /etc/shadowsocks.json -d start</span><br><span class=\"line\">ExecStop=/usr/bin/python /usr/local/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocks.pid -c /etc/shadowsocks.json -d stop</span><br><span class=\"line\">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>请将上述脚本保存为/etc/systemd/system/shadowsocks.service</p>\n<p>并执行systemctl enable shadowsocks.service &amp;&amp; systemctl start shadowsocks.service</p>\n<p>–</p>\n<h3 id=\"Done-Enjoy-it\"><a href=\"#Done-Enjoy-it\" class=\"headerlink\" title=\"Done!Enjoy it ~\"></a>Done!Enjoy it ~</h3>","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文是在免费学习机房分享的时候现场编写的，现在整理一下顺便发出来，其实就是搬的brewa11的github上的wiki,感兴趣的同学可以去原文看。</p>\n<p>本文仅用来整理自己的步骤。</p>","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"Shadowsocks\"><a href=\"#Shadowsocks\" class=\"headerlink\" title=\"Shadowsocks\"></a>Shadowsocks</h3><blockquote>\n<p>Shadowsocks（中文名称：影梭）是使用Python、C++、C#等语言开发的、基于Apache许可证的开放源代码软件，用于保护网络流量、加密数据传输。Shadowsocks使用Socks5代理方式。<br>Shadowsocks分为服务器端和客户端。在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。<br>在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。在2015年8月22日，Shadowsocks原作者Clowwindy称受到了中国政府的压力，宣布停止维护此项目并移除其用户页面所载的源代码。[2][3]</p>\n</blockquote>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8d/Shadowsocks_logo.png\" alt=\"Shadowsocks\"></p>\n<h3 id=\"Shadowsocks-RSS\"><a href=\"#Shadowsocks-RSS\" class=\"headerlink\" title=\"Shadowsocks-RSS\"></a>Shadowsocks-RSS</h3><p>Shadowsocks原本停止维护后，由@breakwa11继续参与维护的一个shadowsocks的版本。</p>\n<h2 id=\"搭建方法\"><a href=\"#搭建方法\" class=\"headerlink\" title=\"搭建方法\"></a>搭建方法</h2><ul>\n<li>脚本一键安装</li>\n</ul>\n<p>网上有很多网友自己制作的省心的一键搭建脚本。如果只是想要搭建不想细究和维护，可以考虑使用一键脚本。但手动可以帮助我们了解它。<br>如：<a href=\"https://shadowsocks.be/9.html\" target=\"_blank\" rel=\"noopener\">秋水逸冰的一键脚本</a><br>使用方法参照原文博客，不再赘述。如果只想要有个能用的SSR，到这里就可以止步了。</p>\n<ul>\n<li>手动安装<br>手动安装的方法原作者的博客已经整理的非常详细了，可以参考<br><a href=\"https://github.com/breakwa11/shadowsocks-rss/wiki/Server-Setup\" target=\"_blank\" rel=\"noopener\">Server-Setup</a><br>在这里针对CentOS7简单地记录一下过程。</li>\n</ul>\n<h2 id=\"手动安装的步骤\"><a href=\"#手动安装的步骤\" class=\"headerlink\" title=\"手动安装的步骤\"></a>手动安装的步骤</h2><h3 id=\"需要条件\"><a href=\"#需要条件\" class=\"headerlink\" title=\"需要条件\"></a>需要条件</h3><ul>\n<li><p>有一台装有CentOS7且接入互联网的服务器。</p>\n<p> 一般都是VPS。如果是用来查阅墙外资料的话推荐国外vps，推荐Digitalocean，这家可以申请github学生优惠包，一年才5$，比较划算。DO家的新加坡线路对移动用户还是比较友好的。</p>\n<p> 有如果是单纯用来学习如何搭建的话国内一些厂商的学生机还是比较便宜的，比如腾讯云的1元/月，阿里云的9.9/月等等，都足够用来学学网络编程或者搭建自己的主页使用了。</p>\n</li>\n<li><p>有一定的Linux系统知识：ls、cd、wget、git</p>\n</li>\n<li>有爱折腾的精神</li>\n</ul>\n<h3 id=\"具体操作步骤\"><a href=\"#具体操作步骤\" class=\"headerlink\" title=\"具体操作步骤\"></a>具体操作步骤</h3><ul>\n<li><p>连接上VPS，ssh</p>\n</li>\n<li><p>输入命令</p>\n<blockquote>\n<p><code>yum install git</code><br><code>git clone -b manyuser https://github.com/shadowsocksr/shadowsocksr.git</code> </p>\n</blockquote>\n</li>\n</ul>\n<p>执行完毕后此目录会新建一个shadowsocksr目录，其中根目录的是多用户版（即数据库版，个人用户请忽略这个），子目录中的是单用户版(即shadowsocksr/shadowsocks)。</p>\n<p>根目录即 ./shadowsocksr</p>\n<p>子目录即 ./shadowsocksr/shadowsocks</p>\n<p>进入根目录初始化配置(假设根目录在~/shadowsocksr，如果不是，命令需要适当调整)：</p>\n<blockquote>\n<p><code>cd ~/shadowsocksr</code><br><code>bash initcfg.sh</code></p>\n</blockquote>\n<p>以下步骤要进入子目录：</p>\n<blockquote>\n<p><code>cd ~/shadowsocksr/shadowsocks</code></p>\n</blockquote>\n<p>修改user-config.json中的server_port，password等字段，具体可参见：<br><a href=\"https://github.com/breakwa11/shadowsocks-rss/wiki/config.json\" target=\"_blank\" rel=\"noopener\">config.json</a></p>\n<blockquote>\n<p><code>python server.py</code></p>\n</blockquote>\n<p>如果要在后台运行：</p>\n<blockquote>\n<p><code>python server.py -d start</code></p>\n<p><code>python server.py -d stop/restart</code></p>\n</blockquote>\n<p>防火墙设置</p>\n<p>运行server.py后发现客户端仍然连接不上，因为指定端口没有开放。<br>CentOS7以后默认防火墙从原来的iptables变成了firewalld，开放端口的命令如下:</p>\n<blockquote>\n<p><code>firewall-cmd --zone=public --add-port=端口/tcp --permanent</code></p>\n</blockquote>\n<p>把端口换成自行设置的ServerPort即可。</p>\n<h3 id=\"设置开机启动\"><a href=\"#设置开机启动\" class=\"headerlink\" title=\"设置开机启动\"></a>设置开机启动</h3><p>以上步骤完成后，应该就可以愉快地使用ssr了，不过每次开机都需要手动运行比较麻烦，这里还需要配置一下开机自启。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=ShadowsocksR server</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=/var/run/shadowsocks.pid</span><br><span class=\"line\">ExecStart=/usr/bin/python /usr/local/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocks.pid -c /etc/shadowsocks.json -d start</span><br><span class=\"line\">ExecStop=/usr/bin/python /usr/local/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocks.pid -c /etc/shadowsocks.json -d stop</span><br><span class=\"line\">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>请将上述脚本保存为/etc/systemd/system/shadowsocks.service</p>\n<p>并执行systemctl enable shadowsocks.service &amp;&amp; systemctl start shadowsocks.service</p>\n<p>–</p>\n<h3 id=\"Done-Enjoy-it\"><a href=\"#Done-Enjoy-it\" class=\"headerlink\" title=\"Done!Enjoy it ~\"></a>Done!Enjoy it ~</h3>"},{"layout":"Server","title":"Kdatacenter迁移记录","date":"2020-06-16T16:00:00.000Z","comments":0,"urlname":"record_of_my_migration","_content":"\n# 前言\n\n由于最近套路云翻车，Linode总是不稳定，所以我打算把个人的另一个站点以及某类工具性服务迁移到一个更加稳定的地方去。思来想去，还是得在亚洲机房找。\n\n之前看网上有不少博客推荐[Kdatacenter](https://www.kdatacenter.com)，说是最稳定最快速的韩国VPS，速度就像是在国内访问一样，所以就想去试试。\n\n并且听说这家提供商可以给新用户20%的优惠，不过需要用户发推广：\n\n> You can get some promotion codes according to quantity of links as below:\n>\n> *10% promotion code: 1ealink x Blog/BBS/Forum etc.\n>\n> *Additional 10% promotion code: 2ea links x SNS\n>\n> You can get 20% promotion code with 3 links:\n>\n> - Your post in forum or BBS can be considered as an article in SNS.\n> - A promotion coupon is avaliable only one time. These coupons are used for recurring charge.\n\n","source":"_posts/Kdatacenter迁移记录.md","raw":"---\nlayout: Server\ntitle: Kdatacenter迁移记录\ndate: 2020-06-17\ncomments: false\ncategories: 计算机相关技术\ntags: Mac OS\nurlname:  record_of_my_migration\n---\n\n# 前言\n\n由于最近套路云翻车，Linode总是不稳定，所以我打算把个人的另一个站点以及某类工具性服务迁移到一个更加稳定的地方去。思来想去，还是得在亚洲机房找。\n\n之前看网上有不少博客推荐[Kdatacenter](https://www.kdatacenter.com)，说是最稳定最快速的韩国VPS，速度就像是在国内访问一样，所以就想去试试。\n\n并且听说这家提供商可以给新用户20%的优惠，不过需要用户发推广：\n\n> You can get some promotion codes according to quantity of links as below:\n>\n> *10% promotion code: 1ealink x Blog/BBS/Forum etc.\n>\n> *Additional 10% promotion code: 2ea links x SNS\n>\n> You can get 20% promotion code with 3 links:\n>\n> - Your post in forum or BBS can be considered as an article in SNS.\n> - A promotion coupon is avaliable only one time. These coupons are used for recurring charge.\n\n","slug":"Kdatacenter迁移记录","published":1,"updated":"2020-06-17T05:59:19.610Z","photos":[],"link":"","_id":"ckbiy7xzm00065ojsgmd7g26b","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>由于最近套路云翻车，Linode总是不稳定，所以我打算把个人的另一个站点以及某类工具性服务迁移到一个更加稳定的地方去。思来想去，还是得在亚洲机房找。</p>\n<p>之前看网上有不少博客推荐<a href=\"https://www.kdatacenter.com\" target=\"_blank\" rel=\"noopener\">Kdatacenter</a>，说是最稳定最快速的韩国VPS，速度就像是在国内访问一样，所以就想去试试。</p>\n<p>并且听说这家提供商可以给新用户20%的优惠，不过需要用户发推广：</p>\n<blockquote>\n<p>You can get some promotion codes according to quantity of links as below:</p>\n<p>*10% promotion code: 1ealink x Blog/BBS/Forum etc.</p>\n<p>*Additional 10% promotion code: 2ea links x SNS</p>\n<p>You can get 20% promotion code with 3 links:</p>\n<ul>\n<li>Your post in forum or BBS can be considered as an article in SNS.</li>\n<li>A promotion coupon is avaliable only one time. These coupons are used for recurring charge.</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>由于最近套路云翻车，Linode总是不稳定，所以我打算把个人的另一个站点以及某类工具性服务迁移到一个更加稳定的地方去。思来想去，还是得在亚洲机房找。</p>\n<p>之前看网上有不少博客推荐<a href=\"https://www.kdatacenter.com\" target=\"_blank\" rel=\"noopener\">Kdatacenter</a>，说是最稳定最快速的韩国VPS，速度就像是在国内访问一样，所以就想去试试。</p>\n<p>并且听说这家提供商可以给新用户20%的优惠，不过需要用户发推广：</p>\n<blockquote>\n<p>You can get some promotion codes according to quantity of links as below:</p>\n<p>*10% promotion code: 1ealink x Blog/BBS/Forum etc.</p>\n<p>*Additional 10% promotion code: 2ea links x SNS</p>\n<p>You can get 20% promotion code with 3 links:</p>\n<ul>\n<li>Your post in forum or BBS can be considered as an article in SNS.</li>\n<li>A promotion coupon is avaliable only one time. These coupons are used for recurring charge.</li>\n</ul>\n</blockquote>\n"},{"layout":"电子","title":"LT3757电源控制模块学习笔记","date":"2018-07-25T05:00:08.000Z","urlname":"electric","_content":"\n# LT3757\n最近需要实现200V-350V的可调的输出电源，需要用到LT3757这款芯片，以前从来没有接触这方面的内容，仔细研读了一下LT3757的手册，为了便于以后查阅，在这里整理一下。\n\n\n> PS:有些内容是按自己理解写的，如有纰误还望指教。\n\n![LT3757](http://www.analog.com/lib/img/products/details/AltPartGeneric.png)\n\n\n\n## LT3757简介\n> * LT 3757是一款DC-DC控制器，能够在宽输入范围内产生正或负输出电压，它可配置为反激式，SEPIC，BOOST或反相转换器，可以通过内部电源(INTVCC脚)或外接电源的方式来给N-MOSFET供电。\n> * LT 3757A相比LT3757具有更好的负载瞬态性能\n\n* 它的工作频率可通过100kHz至1Mhz的Rt脚外接电阻调节，也可以通过SYNC脚与外部时钟同步的方式来调节，固定频率有利于在芯片很宽的电源和输出电压范围内稳定工作。\n\n* LT 3757的最小工作电源电压为2.9V，电流小于1uA。LT 3757具有软启动和频率折返功能，用于限制启动和输出短路期间的电感电流。\n<!-- more -->\n\n## LT3757 各个引脚功能介绍\n> * $V_{c}$: 误差放大器补偿引脚，利用外接RC网络来稳定电压回路。\n> * $FBX$: 正电压和负电压反馈引脚。它通过输出电压部分的电阻分压来获得反馈电压，当反馈电压到达1.6V时，芯片便会调节开关频率使输出电压稳定下来不再继续升高。\n> * 另外，如果FBX接入GND，芯片也会在启动和故障的时候调制频率(说实话，这个功能没大读懂)。\n> * $SS$: 软启动引脚，该引脚会调制$V_c$引脚的电压钳位，通过外部电容来控制软启动间隙。该引脚具有10uA(典型值)的上拉电流源，以及内部2.5V电压。在$\\overline{SHDN}/UVLO$引脚欠压，或者$INTV_{CC}$欠压过压以及芯片内部热锁定等异常条件下，SS将会被重置为GND电位。\n\n**注:上已LT3757具有两种调节开关工作频率的方式，以下两个引脚便是具体的方式**\n\n> * $RT$:开关频率调节引脚。通过在改脚外接电阻来调节工作频率，电阻的另一端直接接GND。此引脚不能悬空，即便要采用SYNC模式，该引脚也应该接入比SYNC脚接入频率低20%的频率对应的阻值。\n> * $SYNC$:频率同步引脚。对应着外部时钟同步方式，该引脚用来接入外部信号源，以使开关频率与外部信号源频率同步，如果选用这个功能此时RT脚应该接入对应外部时钟频率低20%的频率的阻值。\n\n--- \n\n> * $SENSE$:控制回路的电流检测输入。此脚应连接到N-MOSFET源极中开关电流检测电阻的正极，电阻的负极应连接到IC的GND。![图2](https://s1.ax1x.com/2018/07/23/PJZjB9.png)\n> * $GATE$:N沟道MOSFET栅极驱动器输出引脚。GATE脚是芯片的输出引脚，与N-MOSFET的栅极连接。输出波形是方波，电压在INTVCC和GND之间切换，相当于在以一定的频率切换MOS开关。当IC关闭、热锁定或者INTVCC欠压和超压时候自动接地。\n> * $INTV_{CC}$:为内部负载和栅极驱动器提供的稳压电源，从VIN提供并调节至7.2V（典型值）。必须使用靠近引脚放置的最小4.7μF电容旁路INTVCC，如果VIN小于17.5V，INTVCC可以直接连接到VIN。如果电源电压不超过17.5V，INTVCC也可以连接到电压高于7.5V且低于VIN的电源。\n> * $\\overline{SHDN}/UVLO$:关断和欠压检测引脚。到达1.22V（标称值）阈值便禁用设备并将VIN电流将至1μA以下，欠压条件下会重置软启动。\n> * $V_{IN}$:VIN（引脚10）：输入电源引脚，必须旁路一个超过0.22μF的电容。\n\n## LT3757 功能描述\n由于是零基础,为了理解DC-DC升压的基本原理，从而了解LT3757的作用。我首先恶补了一下电力电子中BOOST、Flyback等常见电路的相关理论知识。但公式贴起来太枯燥，在这里不如让我引用一下电子工程世界论坛一位网友的科普贴，它讲得非常的生动易懂。\n\n> 当电感被连接到电源两端的时候，电流流过电感，这个过程会在电感周围产生感生磁场，当电流稳定之后，其磁场也趋于稳定。若我们将电源撤掉，磁场将会在线路中产生一个方向相反的电动势，其值可能大于原电源的电动势。明白了这两点，Boost电路的最基本原理也就不难分析了。\n![升压电路](http://5.eewimg.cn/data/attachment/forum/201709/15/152537sdihcsphhpvj3p9h.png.thumb.jpg)\n在这样的一个电路中，如果我们闭合开关，电源将对电感充电，电能转化为电感上的磁场能量。而当我们打开开关，电感上的磁场将转化为电能，通过右侧的二极管向电容充电。而对于电容来说，其电压将取决于电源电压和电感的充电过程，在开关打开的时候，为其供电的除了电源，还有电感中的能量， 因此其电压将高于原电源电压。如果这个过程不断地往复下去，我们就能够在电容两端得到高于电源电压的输出电压。\n![gif示意图](http://5.eewimg.cn/data/attachment/forum/201709/15/152612ynl4n2dvavpdm1vc.gif)\n很显然，在实际的电源中我们不可能用手去按开关，用在这个位置上的将会是开关管。它将以极快的速度开关，从而控制整个过程。这也是开关电源中“开关”一词的来历。\n\n而我们用到的LT3757实际上相当于一个开关控制器，通过控制电路的通断来实现能量从电感转移到电容，达到升压的目的。\n## 输出电压调节\n\n在手册的第12页 *Programing the Output Voltage* 节中给出了通过$R_1$和$R_2$电阻来调节输出电压的计算公式。\n$V_{正输出电压}=1.6V \\cdot (1+\\frac{R2}{R1})$\n$V_{负输出电压}=-0.8V \\cdot (1+\\frac{R2}{R1})$\n\nFBX是反馈引脚，内部接1.6V和-0.8V的比较器。当反馈脚电压到达1.6V时芯片便会控制输出电压稳定，经过仿真发现改变FBX的电压不能很好地调节输出电压的值，会影响芯片对输出电压的控制。i","source":"_posts/LT3757学习笔记.md","raw":"---\nlayout: 电子\ntitle: LT3757电源控制模块学习笔记\ndate: 2018-07-25 13:00:08\ncategories: 电子\ntags: 电子\nurlname: electric\n---\n\n# LT3757\n最近需要实现200V-350V的可调的输出电源，需要用到LT3757这款芯片，以前从来没有接触这方面的内容，仔细研读了一下LT3757的手册，为了便于以后查阅，在这里整理一下。\n\n\n> PS:有些内容是按自己理解写的，如有纰误还望指教。\n\n![LT3757](http://www.analog.com/lib/img/products/details/AltPartGeneric.png)\n\n\n\n## LT3757简介\n> * LT 3757是一款DC-DC控制器，能够在宽输入范围内产生正或负输出电压，它可配置为反激式，SEPIC，BOOST或反相转换器，可以通过内部电源(INTVCC脚)或外接电源的方式来给N-MOSFET供电。\n> * LT 3757A相比LT3757具有更好的负载瞬态性能\n\n* 它的工作频率可通过100kHz至1Mhz的Rt脚外接电阻调节，也可以通过SYNC脚与外部时钟同步的方式来调节，固定频率有利于在芯片很宽的电源和输出电压范围内稳定工作。\n\n* LT 3757的最小工作电源电压为2.9V，电流小于1uA。LT 3757具有软启动和频率折返功能，用于限制启动和输出短路期间的电感电流。\n<!-- more -->\n\n## LT3757 各个引脚功能介绍\n> * $V_{c}$: 误差放大器补偿引脚，利用外接RC网络来稳定电压回路。\n> * $FBX$: 正电压和负电压反馈引脚。它通过输出电压部分的电阻分压来获得反馈电压，当反馈电压到达1.6V时，芯片便会调节开关频率使输出电压稳定下来不再继续升高。\n> * 另外，如果FBX接入GND，芯片也会在启动和故障的时候调制频率(说实话，这个功能没大读懂)。\n> * $SS$: 软启动引脚，该引脚会调制$V_c$引脚的电压钳位，通过外部电容来控制软启动间隙。该引脚具有10uA(典型值)的上拉电流源，以及内部2.5V电压。在$\\overline{SHDN}/UVLO$引脚欠压，或者$INTV_{CC}$欠压过压以及芯片内部热锁定等异常条件下，SS将会被重置为GND电位。\n\n**注:上已LT3757具有两种调节开关工作频率的方式，以下两个引脚便是具体的方式**\n\n> * $RT$:开关频率调节引脚。通过在改脚外接电阻来调节工作频率，电阻的另一端直接接GND。此引脚不能悬空，即便要采用SYNC模式，该引脚也应该接入比SYNC脚接入频率低20%的频率对应的阻值。\n> * $SYNC$:频率同步引脚。对应着外部时钟同步方式，该引脚用来接入外部信号源，以使开关频率与外部信号源频率同步，如果选用这个功能此时RT脚应该接入对应外部时钟频率低20%的频率的阻值。\n\n--- \n\n> * $SENSE$:控制回路的电流检测输入。此脚应连接到N-MOSFET源极中开关电流检测电阻的正极，电阻的负极应连接到IC的GND。![图2](https://s1.ax1x.com/2018/07/23/PJZjB9.png)\n> * $GATE$:N沟道MOSFET栅极驱动器输出引脚。GATE脚是芯片的输出引脚，与N-MOSFET的栅极连接。输出波形是方波，电压在INTVCC和GND之间切换，相当于在以一定的频率切换MOS开关。当IC关闭、热锁定或者INTVCC欠压和超压时候自动接地。\n> * $INTV_{CC}$:为内部负载和栅极驱动器提供的稳压电源，从VIN提供并调节至7.2V（典型值）。必须使用靠近引脚放置的最小4.7μF电容旁路INTVCC，如果VIN小于17.5V，INTVCC可以直接连接到VIN。如果电源电压不超过17.5V，INTVCC也可以连接到电压高于7.5V且低于VIN的电源。\n> * $\\overline{SHDN}/UVLO$:关断和欠压检测引脚。到达1.22V（标称值）阈值便禁用设备并将VIN电流将至1μA以下，欠压条件下会重置软启动。\n> * $V_{IN}$:VIN（引脚10）：输入电源引脚，必须旁路一个超过0.22μF的电容。\n\n## LT3757 功能描述\n由于是零基础,为了理解DC-DC升压的基本原理，从而了解LT3757的作用。我首先恶补了一下电力电子中BOOST、Flyback等常见电路的相关理论知识。但公式贴起来太枯燥，在这里不如让我引用一下电子工程世界论坛一位网友的科普贴，它讲得非常的生动易懂。\n\n> 当电感被连接到电源两端的时候，电流流过电感，这个过程会在电感周围产生感生磁场，当电流稳定之后，其磁场也趋于稳定。若我们将电源撤掉，磁场将会在线路中产生一个方向相反的电动势，其值可能大于原电源的电动势。明白了这两点，Boost电路的最基本原理也就不难分析了。\n![升压电路](http://5.eewimg.cn/data/attachment/forum/201709/15/152537sdihcsphhpvj3p9h.png.thumb.jpg)\n在这样的一个电路中，如果我们闭合开关，电源将对电感充电，电能转化为电感上的磁场能量。而当我们打开开关，电感上的磁场将转化为电能，通过右侧的二极管向电容充电。而对于电容来说，其电压将取决于电源电压和电感的充电过程，在开关打开的时候，为其供电的除了电源，还有电感中的能量， 因此其电压将高于原电源电压。如果这个过程不断地往复下去，我们就能够在电容两端得到高于电源电压的输出电压。\n![gif示意图](http://5.eewimg.cn/data/attachment/forum/201709/15/152612ynl4n2dvavpdm1vc.gif)\n很显然，在实际的电源中我们不可能用手去按开关，用在这个位置上的将会是开关管。它将以极快的速度开关，从而控制整个过程。这也是开关电源中“开关”一词的来历。\n\n而我们用到的LT3757实际上相当于一个开关控制器，通过控制电路的通断来实现能量从电感转移到电容，达到升压的目的。\n## 输出电压调节\n\n在手册的第12页 *Programing the Output Voltage* 节中给出了通过$R_1$和$R_2$电阻来调节输出电压的计算公式。\n$V_{正输出电压}=1.6V \\cdot (1+\\frac{R2}{R1})$\n$V_{负输出电压}=-0.8V \\cdot (1+\\frac{R2}{R1})$\n\nFBX是反馈引脚，内部接1.6V和-0.8V的比较器。当反馈脚电压到达1.6V时芯片便会控制输出电压稳定，经过仿真发现改变FBX的电压不能很好地调节输出电压的值，会影响芯片对输出电压的控制。i","slug":"LT3757学习笔记","published":1,"updated":"2020-06-16T17:49:52.700Z","comments":1,"photos":[],"link":"","_id":"ckbiy7xzo00075ojskl6ggh12","content":"<h1 id=\"LT3757\"><a href=\"#LT3757\" class=\"headerlink\" title=\"LT3757\"></a>LT3757</h1><p>最近需要实现200V-350V的可调的输出电源，需要用到LT3757这款芯片，以前从来没有接触这方面的内容，仔细研读了一下LT3757的手册，为了便于以后查阅，在这里整理一下。</p>\n<blockquote>\n<p>PS:有些内容是按自己理解写的，如有纰误还望指教。</p>\n</blockquote>\n<p><img src=\"http://www.analog.com/lib/img/products/details/AltPartGeneric.png\" alt=\"LT3757\"></p>\n<h2 id=\"LT3757简介\"><a href=\"#LT3757简介\" class=\"headerlink\" title=\"LT3757简介\"></a>LT3757简介</h2><blockquote>\n<ul>\n<li>LT 3757是一款DC-DC控制器，能够在宽输入范围内产生正或负输出电压，它可配置为反激式，SEPIC，BOOST或反相转换器，可以通过内部电源(INTVCC脚)或外接电源的方式来给N-MOSFET供电。</li>\n<li>LT 3757A相比LT3757具有更好的负载瞬态性能</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>它的工作频率可通过100kHz至1Mhz的Rt脚外接电阻调节，也可以通过SYNC脚与外部时钟同步的方式来调节，固定频率有利于在芯片很宽的电源和输出电压范围内稳定工作。</p>\n</li>\n<li><p>LT 3757的最小工作电源电压为2.9V，电流小于1uA。LT 3757具有软启动和频率折返功能，用于限制启动和输出短路期间的电感电流。</p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"LT3757-各个引脚功能介绍\"><a href=\"#LT3757-各个引脚功能介绍\" class=\"headerlink\" title=\"LT3757 各个引脚功能介绍\"></a>LT3757 各个引脚功能介绍</h2><blockquote>\n<ul>\n<li>$V_{c}$: 误差放大器补偿引脚，利用外接RC网络来稳定电压回路。</li>\n<li>$FBX$: 正电压和负电压反馈引脚。它通过输出电压部分的电阻分压来获得反馈电压，当反馈电压到达1.6V时，芯片便会调节开关频率使输出电压稳定下来不再继续升高。</li>\n<li>另外，如果FBX接入GND，芯片也会在启动和故障的时候调制频率(说实话，这个功能没大读懂)。</li>\n<li>$SS$: 软启动引脚，该引脚会调制$V<em>c$引脚的电压钳位，通过外部电容来控制软启动间隙。该引脚具有10uA(典型值)的上拉电流源，以及内部2.5V电压。在$\\overline{SHDN}/UVLO$引脚欠压，或者$INTV</em>{CC}$欠压过压以及芯片内部热锁定等异常条件下，SS将会被重置为GND电位。</li>\n</ul>\n</blockquote>\n<p><strong>注:上已LT3757具有两种调节开关工作频率的方式，以下两个引脚便是具体的方式</strong></p>\n<blockquote>\n<ul>\n<li>$RT$:开关频率调节引脚。通过在改脚外接电阻来调节工作频率，电阻的另一端直接接GND。此引脚不能悬空，即便要采用SYNC模式，该引脚也应该接入比SYNC脚接入频率低20%的频率对应的阻值。</li>\n<li>$SYNC$:频率同步引脚。对应着外部时钟同步方式，该引脚用来接入外部信号源，以使开关频率与外部信号源频率同步，如果选用这个功能此时RT脚应该接入对应外部时钟频率低20%的频率的阻值。</li>\n</ul>\n</blockquote>\n<hr>\n<blockquote>\n<ul>\n<li>$SENSE$:控制回路的电流检测输入。此脚应连接到N-MOSFET源极中开关电流检测电阻的正极，电阻的负极应连接到IC的GND。<img src=\"https://s1.ax1x.com/2018/07/23/PJZjB9.png\" alt=\"图2\"></li>\n<li>$GATE$:N沟道MOSFET栅极驱动器输出引脚。GATE脚是芯片的输出引脚，与N-MOSFET的栅极连接。输出波形是方波，电压在INTVCC和GND之间切换，相当于在以一定的频率切换MOS开关。当IC关闭、热锁定或者INTVCC欠压和超压时候自动接地。</li>\n<li>$INTV_{CC}$:为内部负载和栅极驱动器提供的稳压电源，从VIN提供并调节至7.2V（典型值）。必须使用靠近引脚放置的最小4.7μF电容旁路INTVCC，如果VIN小于17.5V，INTVCC可以直接连接到VIN。如果电源电压不超过17.5V，INTVCC也可以连接到电压高于7.5V且低于VIN的电源。</li>\n<li>$\\overline{SHDN}/UVLO$:关断和欠压检测引脚。到达1.22V（标称值）阈值便禁用设备并将VIN电流将至1μA以下，欠压条件下会重置软启动。</li>\n<li>$V_{IN}$:VIN（引脚10）：输入电源引脚，必须旁路一个超过0.22μF的电容。</li>\n</ul>\n</blockquote>\n<h2 id=\"LT3757-功能描述\"><a href=\"#LT3757-功能描述\" class=\"headerlink\" title=\"LT3757 功能描述\"></a>LT3757 功能描述</h2><p>由于是零基础,为了理解DC-DC升压的基本原理，从而了解LT3757的作用。我首先恶补了一下电力电子中BOOST、Flyback等常见电路的相关理论知识。但公式贴起来太枯燥，在这里不如让我引用一下电子工程世界论坛一位网友的科普贴，它讲得非常的生动易懂。</p>\n<blockquote>\n<p>当电感被连接到电源两端的时候，电流流过电感，这个过程会在电感周围产生感生磁场，当电流稳定之后，其磁场也趋于稳定。若我们将电源撤掉，磁场将会在线路中产生一个方向相反的电动势，其值可能大于原电源的电动势。明白了这两点，Boost电路的最基本原理也就不难分析了。<br><img src=\"http://5.eewimg.cn/data/attachment/forum/201709/15/152537sdihcsphhpvj3p9h.png.thumb.jpg\" alt=\"升压电路\"><br>在这样的一个电路中，如果我们闭合开关，电源将对电感充电，电能转化为电感上的磁场能量。而当我们打开开关，电感上的磁场将转化为电能，通过右侧的二极管向电容充电。而对于电容来说，其电压将取决于电源电压和电感的充电过程，在开关打开的时候，为其供电的除了电源，还有电感中的能量， 因此其电压将高于原电源电压。如果这个过程不断地往复下去，我们就能够在电容两端得到高于电源电压的输出电压。<br><img src=\"http://5.eewimg.cn/data/attachment/forum/201709/15/152612ynl4n2dvavpdm1vc.gif\" alt=\"gif示意图\"><br>很显然，在实际的电源中我们不可能用手去按开关，用在这个位置上的将会是开关管。它将以极快的速度开关，从而控制整个过程。这也是开关电源中“开关”一词的来历。</p>\n</blockquote>\n<p>而我们用到的LT3757实际上相当于一个开关控制器，通过控制电路的通断来实现能量从电感转移到电容，达到升压的目的。</p>\n<h2 id=\"输出电压调节\"><a href=\"#输出电压调节\" class=\"headerlink\" title=\"输出电压调节\"></a>输出电压调节</h2><p>在手册的第12页 <em>Programing the Output Voltage</em> 节中给出了通过$R_1$和$R<em>2$电阻来调节输出电压的计算公式。<br>$V</em>{正输出电压}=1.6V \\cdot (1+\\frac{R2}{R1})$<br>$V_{负输出电压}=-0.8V \\cdot (1+\\frac{R2}{R1})$</p>\n<p>FBX是反馈引脚，内部接1.6V和-0.8V的比较器。当反馈脚电压到达1.6V时芯片便会控制输出电压稳定，经过仿真发现改变FBX的电压不能很好地调节输出电压的值，会影响芯片对输出电压的控制。i</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"LT3757\"><a href=\"#LT3757\" class=\"headerlink\" title=\"LT3757\"></a>LT3757</h1><p>最近需要实现200V-350V的可调的输出电源，需要用到LT3757这款芯片，以前从来没有接触这方面的内容，仔细研读了一下LT3757的手册，为了便于以后查阅，在这里整理一下。</p>\n<blockquote>\n<p>PS:有些内容是按自己理解写的，如有纰误还望指教。</p>\n</blockquote>\n<p><img src=\"http://www.analog.com/lib/img/products/details/AltPartGeneric.png\" alt=\"LT3757\"></p>\n<h2 id=\"LT3757简介\"><a href=\"#LT3757简介\" class=\"headerlink\" title=\"LT3757简介\"></a>LT3757简介</h2><blockquote>\n<ul>\n<li>LT 3757是一款DC-DC控制器，能够在宽输入范围内产生正或负输出电压，它可配置为反激式，SEPIC，BOOST或反相转换器，可以通过内部电源(INTVCC脚)或外接电源的方式来给N-MOSFET供电。</li>\n<li>LT 3757A相比LT3757具有更好的负载瞬态性能</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>它的工作频率可通过100kHz至1Mhz的Rt脚外接电阻调节，也可以通过SYNC脚与外部时钟同步的方式来调节，固定频率有利于在芯片很宽的电源和输出电压范围内稳定工作。</p>\n</li>\n<li><p>LT 3757的最小工作电源电压为2.9V，电流小于1uA。LT 3757具有软启动和频率折返功能，用于限制启动和输出短路期间的电感电流。</p>","more":"</li>\n</ul>\n<h2 id=\"LT3757-各个引脚功能介绍\"><a href=\"#LT3757-各个引脚功能介绍\" class=\"headerlink\" title=\"LT3757 各个引脚功能介绍\"></a>LT3757 各个引脚功能介绍</h2><blockquote>\n<ul>\n<li>$V_{c}$: 误差放大器补偿引脚，利用外接RC网络来稳定电压回路。</li>\n<li>$FBX$: 正电压和负电压反馈引脚。它通过输出电压部分的电阻分压来获得反馈电压，当反馈电压到达1.6V时，芯片便会调节开关频率使输出电压稳定下来不再继续升高。</li>\n<li>另外，如果FBX接入GND，芯片也会在启动和故障的时候调制频率(说实话，这个功能没大读懂)。</li>\n<li>$SS$: 软启动引脚，该引脚会调制$V<em>c$引脚的电压钳位，通过外部电容来控制软启动间隙。该引脚具有10uA(典型值)的上拉电流源，以及内部2.5V电压。在$\\overline{SHDN}/UVLO$引脚欠压，或者$INTV</em>{CC}$欠压过压以及芯片内部热锁定等异常条件下，SS将会被重置为GND电位。</li>\n</ul>\n</blockquote>\n<p><strong>注:上已LT3757具有两种调节开关工作频率的方式，以下两个引脚便是具体的方式</strong></p>\n<blockquote>\n<ul>\n<li>$RT$:开关频率调节引脚。通过在改脚外接电阻来调节工作频率，电阻的另一端直接接GND。此引脚不能悬空，即便要采用SYNC模式，该引脚也应该接入比SYNC脚接入频率低20%的频率对应的阻值。</li>\n<li>$SYNC$:频率同步引脚。对应着外部时钟同步方式，该引脚用来接入外部信号源，以使开关频率与外部信号源频率同步，如果选用这个功能此时RT脚应该接入对应外部时钟频率低20%的频率的阻值。</li>\n</ul>\n</blockquote>\n<hr>\n<blockquote>\n<ul>\n<li>$SENSE$:控制回路的电流检测输入。此脚应连接到N-MOSFET源极中开关电流检测电阻的正极，电阻的负极应连接到IC的GND。<img src=\"https://s1.ax1x.com/2018/07/23/PJZjB9.png\" alt=\"图2\"></li>\n<li>$GATE$:N沟道MOSFET栅极驱动器输出引脚。GATE脚是芯片的输出引脚，与N-MOSFET的栅极连接。输出波形是方波，电压在INTVCC和GND之间切换，相当于在以一定的频率切换MOS开关。当IC关闭、热锁定或者INTVCC欠压和超压时候自动接地。</li>\n<li>$INTV_{CC}$:为内部负载和栅极驱动器提供的稳压电源，从VIN提供并调节至7.2V（典型值）。必须使用靠近引脚放置的最小4.7μF电容旁路INTVCC，如果VIN小于17.5V，INTVCC可以直接连接到VIN。如果电源电压不超过17.5V，INTVCC也可以连接到电压高于7.5V且低于VIN的电源。</li>\n<li>$\\overline{SHDN}/UVLO$:关断和欠压检测引脚。到达1.22V（标称值）阈值便禁用设备并将VIN电流将至1μA以下，欠压条件下会重置软启动。</li>\n<li>$V_{IN}$:VIN（引脚10）：输入电源引脚，必须旁路一个超过0.22μF的电容。</li>\n</ul>\n</blockquote>\n<h2 id=\"LT3757-功能描述\"><a href=\"#LT3757-功能描述\" class=\"headerlink\" title=\"LT3757 功能描述\"></a>LT3757 功能描述</h2><p>由于是零基础,为了理解DC-DC升压的基本原理，从而了解LT3757的作用。我首先恶补了一下电力电子中BOOST、Flyback等常见电路的相关理论知识。但公式贴起来太枯燥，在这里不如让我引用一下电子工程世界论坛一位网友的科普贴，它讲得非常的生动易懂。</p>\n<blockquote>\n<p>当电感被连接到电源两端的时候，电流流过电感，这个过程会在电感周围产生感生磁场，当电流稳定之后，其磁场也趋于稳定。若我们将电源撤掉，磁场将会在线路中产生一个方向相反的电动势，其值可能大于原电源的电动势。明白了这两点，Boost电路的最基本原理也就不难分析了。<br><img src=\"http://5.eewimg.cn/data/attachment/forum/201709/15/152537sdihcsphhpvj3p9h.png.thumb.jpg\" alt=\"升压电路\"><br>在这样的一个电路中，如果我们闭合开关，电源将对电感充电，电能转化为电感上的磁场能量。而当我们打开开关，电感上的磁场将转化为电能，通过右侧的二极管向电容充电。而对于电容来说，其电压将取决于电源电压和电感的充电过程，在开关打开的时候，为其供电的除了电源，还有电感中的能量， 因此其电压将高于原电源电压。如果这个过程不断地往复下去，我们就能够在电容两端得到高于电源电压的输出电压。<br><img src=\"http://5.eewimg.cn/data/attachment/forum/201709/15/152612ynl4n2dvavpdm1vc.gif\" alt=\"gif示意图\"><br>很显然，在实际的电源中我们不可能用手去按开关，用在这个位置上的将会是开关管。它将以极快的速度开关，从而控制整个过程。这也是开关电源中“开关”一词的来历。</p>\n</blockquote>\n<p>而我们用到的LT3757实际上相当于一个开关控制器，通过控制电路的通断来实现能量从电感转移到电容，达到升压的目的。</p>\n<h2 id=\"输出电压调节\"><a href=\"#输出电压调节\" class=\"headerlink\" title=\"输出电压调节\"></a>输出电压调节</h2><p>在手册的第12页 <em>Programing the Output Voltage</em> 节中给出了通过$R_1$和$R<em>2$电阻来调节输出电压的计算公式。<br>$V</em>{正输出电压}=1.6V \\cdot (1+\\frac{R2}{R1})$<br>$V_{负输出电压}=-0.8V \\cdot (1+\\frac{R2}{R1})$</p>\n<p>FBX是反馈引脚，内部接1.6V和-0.8V的比较器。当反馈脚电压到达1.6V时芯片便会控制输出电压稳定，经过仿真发现改变FBX的电压不能很好地调节输出电压的值，会影响芯片对输出电压的控制。i</p>"},{"layout":"IPV6","title":"V6初识","date":"2018-01-31T11:00:32.000Z","urlname":"basicipv6","_content":"## 内容介绍\n利用IPV6最直接的方式便是访问支持IPV6的站点，而不同高校获取IPV6地址方式不一样，很多都是上层交换机直接分配双栈的，所以只要简单配置获取一下V6公网地址就可以享受到相应的免流服务，有的学校则需要通过PPP验证来获取IPV6地址。\n\n本章将演示如何在本地电脑上利用IPV6服务，首先讲演示如何通过PPP验证获取IPV6地址（其他高校需要具体问题具体分析，仅供参考），接着在获取到可用的IPV6公网地址以后对纯IPV6访问方式作简单的介绍与演示。\n\n## 主要要求\n> - 装有Win7/Win8/Win10 系统的电脑一台\n> - 网线\n> - 对IPV6的基本应用有初步的了解。\n\n<!-- more -->\n\n## 视频演示\n本章视频演示\n\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/P9CM4CA9kJg\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n\n#以下是图文教程\n---\n\n## 通过PPPOE方式获取IPV6地址\n\n步骤(请使用WIN7及以上版本系统)\n\n1.由于本校IPV6在宿舍是通过电信的通道走的，\n\n所以请*先用网线连接电信的网口*(每个人桌子上面或者下面应该都有)\n\n2.新建拨号\n\n网络-属性-添加新的连接或网络\n\n![image1-1](1-1.png) \n\n![image1-2](1-2.png)\n\nWin10用户也可以选择从在新的设置页面里选择建立新的连接如图所示\n\n![image1](1.png)\n\n3.在弹出的窗口选择连接到Internet 如图\n\n![image2](2.png)\n\n4.接着选择 宽带（PPPOE）\n\n![image3](3.png)\n\n5.重点来了，输入用户名和密码时\n\n注意用户名的格式:*任意字符加上@ipv6后缀*\n\n，*密码可以随意填写*。如图所示\n\n![image4](4.png)\n\n6.选择跳过，然后关闭\n\n![image5](5.png)\n7.然后找到刚才新建的拨号，点击连接即可。\n\n![image6](6.png)\n\n8.设置一下Google的IPV6 DNS就可以访问支持IPV6的网页了\n\n> - 2001:4860:4860::8888\n> - 2001:4860:4860::8844\n\n注：博主以前还见过有人说DNS设置成\n > 2001:778::37 \n \n就可以访问像QQ邮箱之类的V4地址网站。\n这个DNS是个DNS64的通道，博主以前也用过，*目前测试这个通道已经失效了。*\n\n## 访问纯IPV6资源\n纯IPV6可以直接访问站点不多，目前可以访问哪些资源请参考上一章\n[V6资源介绍](https://aod321.github.io/post/v6resource/)","source":"_posts/V6初识.md","raw":"---\nlayout: IPV6\ntitle: V6初识\ndate: 2018-01-31 19:00:32\ncategories: IPV6\ntags: IPV6\nurlname: basicipv6\n---\n## 内容介绍\n利用IPV6最直接的方式便是访问支持IPV6的站点，而不同高校获取IPV6地址方式不一样，很多都是上层交换机直接分配双栈的，所以只要简单配置获取一下V6公网地址就可以享受到相应的免流服务，有的学校则需要通过PPP验证来获取IPV6地址。\n\n本章将演示如何在本地电脑上利用IPV6服务，首先讲演示如何通过PPP验证获取IPV6地址（其他高校需要具体问题具体分析，仅供参考），接着在获取到可用的IPV6公网地址以后对纯IPV6访问方式作简单的介绍与演示。\n\n## 主要要求\n> - 装有Win7/Win8/Win10 系统的电脑一台\n> - 网线\n> - 对IPV6的基本应用有初步的了解。\n\n<!-- more -->\n\n## 视频演示\n本章视频演示\n\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/P9CM4CA9kJg\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n\n#以下是图文教程\n---\n\n## 通过PPPOE方式获取IPV6地址\n\n步骤(请使用WIN7及以上版本系统)\n\n1.由于本校IPV6在宿舍是通过电信的通道走的，\n\n所以请*先用网线连接电信的网口*(每个人桌子上面或者下面应该都有)\n\n2.新建拨号\n\n网络-属性-添加新的连接或网络\n\n![image1-1](1-1.png) \n\n![image1-2](1-2.png)\n\nWin10用户也可以选择从在新的设置页面里选择建立新的连接如图所示\n\n![image1](1.png)\n\n3.在弹出的窗口选择连接到Internet 如图\n\n![image2](2.png)\n\n4.接着选择 宽带（PPPOE）\n\n![image3](3.png)\n\n5.重点来了，输入用户名和密码时\n\n注意用户名的格式:*任意字符加上@ipv6后缀*\n\n，*密码可以随意填写*。如图所示\n\n![image4](4.png)\n\n6.选择跳过，然后关闭\n\n![image5](5.png)\n7.然后找到刚才新建的拨号，点击连接即可。\n\n![image6](6.png)\n\n8.设置一下Google的IPV6 DNS就可以访问支持IPV6的网页了\n\n> - 2001:4860:4860::8888\n> - 2001:4860:4860::8844\n\n注：博主以前还见过有人说DNS设置成\n > 2001:778::37 \n \n就可以访问像QQ邮箱之类的V4地址网站。\n这个DNS是个DNS64的通道，博主以前也用过，*目前测试这个通道已经失效了。*\n\n## 访问纯IPV6资源\n纯IPV6可以直接访问站点不多，目前可以访问哪些资源请参考上一章\n[V6资源介绍](https://aod321.github.io/post/v6resource/)","slug":"V6初识","published":1,"updated":"2020-06-16T17:49:52.701Z","comments":1,"photos":[],"link":"","_id":"ckbiy7xzr000b5ojszrofqlk4","content":"<h2 id=\"内容介绍\"><a href=\"#内容介绍\" class=\"headerlink\" title=\"内容介绍\"></a>内容介绍</h2><p>利用IPV6最直接的方式便是访问支持IPV6的站点，而不同高校获取IPV6地址方式不一样，很多都是上层交换机直接分配双栈的，所以只要简单配置获取一下V6公网地址就可以享受到相应的免流服务，有的学校则需要通过PPP验证来获取IPV6地址。</p>\n<p>本章将演示如何在本地电脑上利用IPV6服务，首先讲演示如何通过PPP验证获取IPV6地址（其他高校需要具体问题具体分析，仅供参考），接着在获取到可用的IPV6公网地址以后对纯IPV6访问方式作简单的介绍与演示。</p>\n<h2 id=\"主要要求\"><a href=\"#主要要求\" class=\"headerlink\" title=\"主要要求\"></a>主要要求</h2><blockquote>\n<ul>\n<li>装有Win7/Win8/Win10 系统的电脑一台</li>\n<li>网线</li>\n<li>对IPV6的基本应用有初步的了解。</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"视频演示\"><a href=\"#视频演示\" class=\"headerlink\" title=\"视频演示\"></a>视频演示</h2><p>本章视频演示</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/P9CM4CA9kJg\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n\n<h2 id=\"以下是图文教程\"><a href=\"#以下是图文教程\" class=\"headerlink\" title=\"#以下是图文教程\"></a>#以下是图文教程</h2><h2 id=\"通过PPPOE方式获取IPV6地址\"><a href=\"#通过PPPOE方式获取IPV6地址\" class=\"headerlink\" title=\"通过PPPOE方式获取IPV6地址\"></a>通过PPPOE方式获取IPV6地址</h2><p>步骤(请使用WIN7及以上版本系统)</p>\n<p>1.由于本校IPV6在宿舍是通过电信的通道走的，</p>\n<p>所以请<em>先用网线连接电信的网口</em>(每个人桌子上面或者下面应该都有)</p>\n<p>2.新建拨号</p>\n<p>网络-属性-添加新的连接或网络</p>\n<p><img src=\"1-1.png\" alt=\"image1-1\"> </p>\n<p><img src=\"1-2.png\" alt=\"image1-2\"></p>\n<p>Win10用户也可以选择从在新的设置页面里选择建立新的连接如图所示</p>\n<p><img src=\"1.png\" alt=\"image1\"></p>\n<p>3.在弹出的窗口选择连接到Internet 如图</p>\n<p><img src=\"2.png\" alt=\"image2\"></p>\n<p>4.接着选择 宽带（PPPOE）</p>\n<p><img src=\"3.png\" alt=\"image3\"></p>\n<p>5.重点来了，输入用户名和密码时</p>\n<p>注意用户名的格式:<em>任意字符加上@ipv6后缀</em></p>\n<p>，<em>密码可以随意填写</em>。如图所示</p>\n<p><img src=\"4.png\" alt=\"image4\"></p>\n<p>6.选择跳过，然后关闭</p>\n<p><img src=\"5.png\" alt=\"image5\"><br>7.然后找到刚才新建的拨号，点击连接即可。</p>\n<p><img src=\"6.png\" alt=\"image6\"></p>\n<p>8.设置一下Google的IPV6 DNS就可以访问支持IPV6的网页了</p>\n<blockquote>\n<ul>\n<li>2001:4860:4860::8888</li>\n<li>2001:4860:4860::8844</li>\n</ul>\n</blockquote>\n<p>注：博主以前还见过有人说DNS设置成</p>\n<blockquote>\n<p>2001:778::37 </p>\n</blockquote>\n<p>就可以访问像QQ邮箱之类的V4地址网站。<br>这个DNS是个DNS64的通道，博主以前也用过，<em>目前测试这个通道已经失效了。</em></p>\n<h2 id=\"访问纯IPV6资源\"><a href=\"#访问纯IPV6资源\" class=\"headerlink\" title=\"访问纯IPV6资源\"></a>访问纯IPV6资源</h2><p>纯IPV6可以直接访问站点不多，目前可以访问哪些资源请参考上一章<br><a href=\"https://aod321.github.io/post/v6resource/\" target=\"_blank\" rel=\"noopener\">V6资源介绍</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"内容介绍\"><a href=\"#内容介绍\" class=\"headerlink\" title=\"内容介绍\"></a>内容介绍</h2><p>利用IPV6最直接的方式便是访问支持IPV6的站点，而不同高校获取IPV6地址方式不一样，很多都是上层交换机直接分配双栈的，所以只要简单配置获取一下V6公网地址就可以享受到相应的免流服务，有的学校则需要通过PPP验证来获取IPV6地址。</p>\n<p>本章将演示如何在本地电脑上利用IPV6服务，首先讲演示如何通过PPP验证获取IPV6地址（其他高校需要具体问题具体分析，仅供参考），接着在获取到可用的IPV6公网地址以后对纯IPV6访问方式作简单的介绍与演示。</p>\n<h2 id=\"主要要求\"><a href=\"#主要要求\" class=\"headerlink\" title=\"主要要求\"></a>主要要求</h2><blockquote>\n<ul>\n<li>装有Win7/Win8/Win10 系统的电脑一台</li>\n<li>网线</li>\n<li>对IPV6的基本应用有初步的了解。</li>\n</ul>\n</blockquote>","more":"<h2 id=\"视频演示\"><a href=\"#视频演示\" class=\"headerlink\" title=\"视频演示\"></a>视频演示</h2><p>本章视频演示</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/P9CM4CA9kJg\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n\n<h2 id=\"以下是图文教程\"><a href=\"#以下是图文教程\" class=\"headerlink\" title=\"#以下是图文教程\"></a>#以下是图文教程</h2><h2 id=\"通过PPPOE方式获取IPV6地址\"><a href=\"#通过PPPOE方式获取IPV6地址\" class=\"headerlink\" title=\"通过PPPOE方式获取IPV6地址\"></a>通过PPPOE方式获取IPV6地址</h2><p>步骤(请使用WIN7及以上版本系统)</p>\n<p>1.由于本校IPV6在宿舍是通过电信的通道走的，</p>\n<p>所以请<em>先用网线连接电信的网口</em>(每个人桌子上面或者下面应该都有)</p>\n<p>2.新建拨号</p>\n<p>网络-属性-添加新的连接或网络</p>\n<p><img src=\"1-1.png\" alt=\"image1-1\"> </p>\n<p><img src=\"1-2.png\" alt=\"image1-2\"></p>\n<p>Win10用户也可以选择从在新的设置页面里选择建立新的连接如图所示</p>\n<p><img src=\"1.png\" alt=\"image1\"></p>\n<p>3.在弹出的窗口选择连接到Internet 如图</p>\n<p><img src=\"2.png\" alt=\"image2\"></p>\n<p>4.接着选择 宽带（PPPOE）</p>\n<p><img src=\"3.png\" alt=\"image3\"></p>\n<p>5.重点来了，输入用户名和密码时</p>\n<p>注意用户名的格式:<em>任意字符加上@ipv6后缀</em></p>\n<p>，<em>密码可以随意填写</em>。如图所示</p>\n<p><img src=\"4.png\" alt=\"image4\"></p>\n<p>6.选择跳过，然后关闭</p>\n<p><img src=\"5.png\" alt=\"image5\"><br>7.然后找到刚才新建的拨号，点击连接即可。</p>\n<p><img src=\"6.png\" alt=\"image6\"></p>\n<p>8.设置一下Google的IPV6 DNS就可以访问支持IPV6的网页了</p>\n<blockquote>\n<ul>\n<li>2001:4860:4860::8888</li>\n<li>2001:4860:4860::8844</li>\n</ul>\n</blockquote>\n<p>注：博主以前还见过有人说DNS设置成</p>\n<blockquote>\n<p>2001:778::37 </p>\n</blockquote>\n<p>就可以访问像QQ邮箱之类的V4地址网站。<br>这个DNS是个DNS64的通道，博主以前也用过，<em>目前测试这个通道已经失效了。</em></p>\n<h2 id=\"访问纯IPV6资源\"><a href=\"#访问纯IPV6资源\" class=\"headerlink\" title=\"访问纯IPV6资源\"></a>访问纯IPV6资源</h2><p>纯IPV6可以直接访问站点不多，目前可以访问哪些资源请参考上一章<br><a href=\"https://aod321.github.io/post/v6resource/\" target=\"_blank\" rel=\"noopener\">V6资源介绍</a></p>"},{"layout":"IPV6","title":"V6资源介绍","date":"2018-01-31T10:58:21.000Z","comments":1,"urlname":"v6resource","_content":"本篇主要整理一下博主目前所知道的支持纯V6访问的站点，不定期持续更新，欢迎各位补充~\n\n> - [Google](https://ipv6.google.com)\n> - [Youtube](https://www.youtube.com)\n> - [Facebook](https://www.facebook.com)\n> - [北邮人电视直播](http://tv.byr.cn)\n> - [六维空间](http://bt.neu6.edu.cn/)\n> - [蒲公英PT站](https://npupt.com/)\n> - [北交知行PT站](http://pt.zhixing.bjtu.edu.cn/)\n> - [上交葡萄PT站](https://pt.sjtu.edu.cn)\n> - [北邮人BT下载站](http://bt.byr.cn)\n\n","source":"_posts/V6资源介绍-1.md","raw":"---\nlayout: IPV6\ntitle: V6资源介绍\ndate: 2018-01-31 18:58:21\ncategories: IPV6\ncomments: true\ntags: IPV6\nurlname: v6resource\n---\n本篇主要整理一下博主目前所知道的支持纯V6访问的站点，不定期持续更新，欢迎各位补充~\n\n> - [Google](https://ipv6.google.com)\n> - [Youtube](https://www.youtube.com)\n> - [Facebook](https://www.facebook.com)\n> - [北邮人电视直播](http://tv.byr.cn)\n> - [六维空间](http://bt.neu6.edu.cn/)\n> - [蒲公英PT站](https://npupt.com/)\n> - [北交知行PT站](http://pt.zhixing.bjtu.edu.cn/)\n> - [上交葡萄PT站](https://pt.sjtu.edu.cn)\n> - [北邮人BT下载站](http://bt.byr.cn)\n\n","slug":"V6资源介绍-1","published":1,"updated":"2020-06-16T17:49:52.703Z","photos":[],"link":"","_id":"ckbiy7xzu000c5ojsvg9tecay","content":"<p>本篇主要整理一下博主目前所知道的支持纯V6访问的站点，不定期持续更新，欢迎各位补充~</p>\n<blockquote>\n<ul>\n<li><a href=\"https://ipv6.google.com\" target=\"_blank\" rel=\"noopener\">Google</a></li>\n<li><a href=\"https://www.youtube.com\" target=\"_blank\" rel=\"noopener\">Youtube</a></li>\n<li><a href=\"https://www.facebook.com\" target=\"_blank\" rel=\"noopener\">Facebook</a></li>\n<li><a href=\"http://tv.byr.cn\" target=\"_blank\" rel=\"noopener\">北邮人电视直播</a></li>\n<li><a href=\"http://bt.neu6.edu.cn/\" target=\"_blank\" rel=\"noopener\">六维空间</a></li>\n<li><a href=\"https://npupt.com/\" target=\"_blank\" rel=\"noopener\">蒲公英PT站</a></li>\n<li><a href=\"http://pt.zhixing.bjtu.edu.cn/\" target=\"_blank\" rel=\"noopener\">北交知行PT站</a></li>\n<li><a href=\"https://pt.sjtu.edu.cn\" target=\"_blank\" rel=\"noopener\">上交葡萄PT站</a></li>\n<li><a href=\"http://bt.byr.cn\" target=\"_blank\" rel=\"noopener\">北邮人BT下载站</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>本篇主要整理一下博主目前所知道的支持纯V6访问的站点，不定期持续更新，欢迎各位补充~</p>\n<blockquote>\n<ul>\n<li><a href=\"https://ipv6.google.com\" target=\"_blank\" rel=\"noopener\">Google</a></li>\n<li><a href=\"https://www.youtube.com\" target=\"_blank\" rel=\"noopener\">Youtube</a></li>\n<li><a href=\"https://www.facebook.com\" target=\"_blank\" rel=\"noopener\">Facebook</a></li>\n<li><a href=\"http://tv.byr.cn\" target=\"_blank\" rel=\"noopener\">北邮人电视直播</a></li>\n<li><a href=\"http://bt.neu6.edu.cn/\" target=\"_blank\" rel=\"noopener\">六维空间</a></li>\n<li><a href=\"https://npupt.com/\" target=\"_blank\" rel=\"noopener\">蒲公英PT站</a></li>\n<li><a href=\"http://pt.zhixing.bjtu.edu.cn/\" target=\"_blank\" rel=\"noopener\">北交知行PT站</a></li>\n<li><a href=\"https://pt.sjtu.edu.cn\" target=\"_blank\" rel=\"noopener\">上交葡萄PT站</a></li>\n<li><a href=\"http://bt.byr.cn\" target=\"_blank\" rel=\"noopener\">北邮人BT下载站</a></li>\n</ul>\n</blockquote>\n"},{"layout":"IPV6","title":"IPV6折腾集","date":"2018-01-31T16:00:00.000Z","comments":0,"toc":true,"reward":true,"urlname":"funwithIPV6","_content":"\n## 前言\n\n### 背景\n\n本文仅仅为探索过程的一个整理，针对：\n\n- 通过pppoe 用户名后面加@ipv6等后缀拨号获得单栈道IPV6地址的环境\n- 不对IPV6地址进行计费和流量与访问限制的高校\n \n### 说明\n\n- 本文相当于是博文集的序言和目录，相关内容正在持续更新中。- 由于我技术水平不高，所以文中的很多言论都只是我个人根据网上资料的理解，很多方法和技术也都是来自其他众多大牛们，我只是为了记录和整理折腾了一下方便我矿的童鞋们，顺便也能听取大家的建议和指教，更深入地了解相关的专业知识。不妥之处，还请各位包涵指点。\n- 博主本人的水平有限，对于未解决的问题，希望能和大家一起讨论交流\n\n<!-- more -->\n### 声明\n- 虽然我的初衷确实是为了免费上网，但IPV6本身并不是用来免费上网的。希望感兴趣同学能深入了解和研究IPV6相关内容。\n- 转载请征询本人意见。\n- 涉嫌侵权知会本人删除。\n\n\n- **本集仅供技术交流，不得利用本文提及的相关技术进行任何不法行为、发表任何不正当言论以及谋取任何形式的商业利益!**\n\n\n## 目录\n### 理论篇\n\n> - [了解IPV6](https://aod321.github.io/post/knowaboutipv6/)\n> - ~~博主学校的IPV6网络结构浅析~~\n\n### 实践篇\n\n> - 十年窗下无人问，[V6资源介绍](https://aod321.github.io/post/v6resource/)\n> - 一朝成名天下知，[IPV6初识](https://aod321.github.io/post/basicipv6/)\n> - 路漫漫其修远兮，IPV6常规化探索（转V4）\n> - 吾将上下而求索，充分利用IPV6带宽\n> - 雄关漫道真如铁，基于Openwrt的IPV6无线转发\n> - 而今迈步从头越，伪双栈-IPV6穿透\n\n### 探讨篇\n> - 国内的IPV6服务器\n> - 游戏低延时\n\n## 友情链接\n\n[黎醒聪的博客](http://lixingcong.github.io)\n[蔡亚刚的博客](http://ygcaicn.github.io)\n","source":"_posts/ipv6折腾集.md","raw":"---\nlayout: IPV6\ntitle: IPV6折腾集\ndate: 2018-02-01\ncategories: IPV6\ncomments: false\ntoc: true\ntags: IPV6\nreward: true\nurlname: funwithIPV6\n---\n\n## 前言\n\n### 背景\n\n本文仅仅为探索过程的一个整理，针对：\n\n- 通过pppoe 用户名后面加@ipv6等后缀拨号获得单栈道IPV6地址的环境\n- 不对IPV6地址进行计费和流量与访问限制的高校\n \n### 说明\n\n- 本文相当于是博文集的序言和目录，相关内容正在持续更新中。- 由于我技术水平不高，所以文中的很多言论都只是我个人根据网上资料的理解，很多方法和技术也都是来自其他众多大牛们，我只是为了记录和整理折腾了一下方便我矿的童鞋们，顺便也能听取大家的建议和指教，更深入地了解相关的专业知识。不妥之处，还请各位包涵指点。\n- 博主本人的水平有限，对于未解决的问题，希望能和大家一起讨论交流\n\n<!-- more -->\n### 声明\n- 虽然我的初衷确实是为了免费上网，但IPV6本身并不是用来免费上网的。希望感兴趣同学能深入了解和研究IPV6相关内容。\n- 转载请征询本人意见。\n- 涉嫌侵权知会本人删除。\n\n\n- **本集仅供技术交流，不得利用本文提及的相关技术进行任何不法行为、发表任何不正当言论以及谋取任何形式的商业利益!**\n\n\n## 目录\n### 理论篇\n\n> - [了解IPV6](https://aod321.github.io/post/knowaboutipv6/)\n> - ~~博主学校的IPV6网络结构浅析~~\n\n### 实践篇\n\n> - 十年窗下无人问，[V6资源介绍](https://aod321.github.io/post/v6resource/)\n> - 一朝成名天下知，[IPV6初识](https://aod321.github.io/post/basicipv6/)\n> - 路漫漫其修远兮，IPV6常规化探索（转V4）\n> - 吾将上下而求索，充分利用IPV6带宽\n> - 雄关漫道真如铁，基于Openwrt的IPV6无线转发\n> - 而今迈步从头越，伪双栈-IPV6穿透\n\n### 探讨篇\n> - 国内的IPV6服务器\n> - 游戏低延时\n\n## 友情链接\n\n[黎醒聪的博客](http://lixingcong.github.io)\n[蔡亚刚的博客](http://ygcaicn.github.io)\n","slug":"ipv6折腾集","published":1,"updated":"2020-06-16T17:49:52.704Z","photos":[],"link":"","_id":"ckbiy7y00000g5ojsduvy599n","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>本文仅仅为探索过程的一个整理，针对：</p>\n<ul>\n<li>通过pppoe 用户名后面加@ipv6等后缀拨号获得单栈道IPV6地址的环境</li>\n<li>不对IPV6地址进行计费和流量与访问限制的高校</li>\n</ul>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>本文相当于是博文集的序言和目录，相关内容正在持续更新中。- 由于我技术水平不高，所以文中的很多言论都只是我个人根据网上资料的理解，很多方法和技术也都是来自其他众多大牛们，我只是为了记录和整理折腾了一下方便我矿的童鞋们，顺便也能听取大家的建议和指教，更深入地了解相关的专业知识。不妥之处，还请各位包涵指点。</li>\n<li>博主本人的水平有限，对于未解决的问题，希望能和大家一起讨论交流</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><ul>\n<li>虽然我的初衷确实是为了免费上网，但IPV6本身并不是用来免费上网的。希望感兴趣同学能深入了解和研究IPV6相关内容。</li>\n<li>转载请征询本人意见。</li>\n<li>涉嫌侵权知会本人删除。</li>\n</ul>\n<ul>\n<li><strong>本集仅供技术交流，不得利用本文提及的相关技术进行任何不法行为、发表任何不正当言论以及谋取任何形式的商业利益!</strong></li>\n</ul>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><h3 id=\"理论篇\"><a href=\"#理论篇\" class=\"headerlink\" title=\"理论篇\"></a>理论篇</h3><blockquote>\n<ul>\n<li><a href=\"https://aod321.github.io/post/knowaboutipv6/\" target=\"_blank\" rel=\"noopener\">了解IPV6</a></li>\n<li><del>博主学校的IPV6网络结构浅析</del></li>\n</ul>\n</blockquote>\n<h3 id=\"实践篇\"><a href=\"#实践篇\" class=\"headerlink\" title=\"实践篇\"></a>实践篇</h3><blockquote>\n<ul>\n<li>十年窗下无人问，<a href=\"https://aod321.github.io/post/v6resource/\" target=\"_blank\" rel=\"noopener\">V6资源介绍</a></li>\n<li>一朝成名天下知，<a href=\"https://aod321.github.io/post/basicipv6/\" target=\"_blank\" rel=\"noopener\">IPV6初识</a></li>\n<li>路漫漫其修远兮，IPV6常规化探索（转V4）</li>\n<li>吾将上下而求索，充分利用IPV6带宽</li>\n<li>雄关漫道真如铁，基于Openwrt的IPV6无线转发</li>\n<li>而今迈步从头越，伪双栈-IPV6穿透</li>\n</ul>\n</blockquote>\n<h3 id=\"探讨篇\"><a href=\"#探讨篇\" class=\"headerlink\" title=\"探讨篇\"></a>探讨篇</h3><blockquote>\n<ul>\n<li>国内的IPV6服务器</li>\n<li>游戏低延时</li>\n</ul>\n</blockquote>\n<h2 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h2><p><a href=\"http://lixingcong.github.io\" target=\"_blank\" rel=\"noopener\">黎醒聪的博客</a><br><a href=\"http://ygcaicn.github.io\" target=\"_blank\" rel=\"noopener\">蔡亚刚的博客</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>本文仅仅为探索过程的一个整理，针对：</p>\n<ul>\n<li>通过pppoe 用户名后面加@ipv6等后缀拨号获得单栈道IPV6地址的环境</li>\n<li>不对IPV6地址进行计费和流量与访问限制的高校</li>\n</ul>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>本文相当于是博文集的序言和目录，相关内容正在持续更新中。- 由于我技术水平不高，所以文中的很多言论都只是我个人根据网上资料的理解，很多方法和技术也都是来自其他众多大牛们，我只是为了记录和整理折腾了一下方便我矿的童鞋们，顺便也能听取大家的建议和指教，更深入地了解相关的专业知识。不妥之处，还请各位包涵指点。</li>\n<li>博主本人的水平有限，对于未解决的问题，希望能和大家一起讨论交流</li>\n</ul>","more":"<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><ul>\n<li>虽然我的初衷确实是为了免费上网，但IPV6本身并不是用来免费上网的。希望感兴趣同学能深入了解和研究IPV6相关内容。</li>\n<li>转载请征询本人意见。</li>\n<li>涉嫌侵权知会本人删除。</li>\n</ul>\n<ul>\n<li><strong>本集仅供技术交流，不得利用本文提及的相关技术进行任何不法行为、发表任何不正当言论以及谋取任何形式的商业利益!</strong></li>\n</ul>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><h3 id=\"理论篇\"><a href=\"#理论篇\" class=\"headerlink\" title=\"理论篇\"></a>理论篇</h3><blockquote>\n<ul>\n<li><a href=\"https://aod321.github.io/post/knowaboutipv6/\" target=\"_blank\" rel=\"noopener\">了解IPV6</a></li>\n<li><del>博主学校的IPV6网络结构浅析</del></li>\n</ul>\n</blockquote>\n<h3 id=\"实践篇\"><a href=\"#实践篇\" class=\"headerlink\" title=\"实践篇\"></a>实践篇</h3><blockquote>\n<ul>\n<li>十年窗下无人问，<a href=\"https://aod321.github.io/post/v6resource/\" target=\"_blank\" rel=\"noopener\">V6资源介绍</a></li>\n<li>一朝成名天下知，<a href=\"https://aod321.github.io/post/basicipv6/\" target=\"_blank\" rel=\"noopener\">IPV6初识</a></li>\n<li>路漫漫其修远兮，IPV6常规化探索（转V4）</li>\n<li>吾将上下而求索，充分利用IPV6带宽</li>\n<li>雄关漫道真如铁，基于Openwrt的IPV6无线转发</li>\n<li>而今迈步从头越，伪双栈-IPV6穿透</li>\n</ul>\n</blockquote>\n<h3 id=\"探讨篇\"><a href=\"#探讨篇\" class=\"headerlink\" title=\"探讨篇\"></a>探讨篇</h3><blockquote>\n<ul>\n<li>国内的IPV6服务器</li>\n<li>游戏低延时</li>\n</ul>\n</blockquote>\n<h2 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h2><p><a href=\"http://lixingcong.github.io\" target=\"_blank\" rel=\"noopener\">黎醒聪的博客</a><br><a href=\"http://ygcaicn.github.io\" target=\"_blank\" rel=\"noopener\">蔡亚刚的博客</a></p>"},{"layout":"IPV6","title":"了解IPV6","date":"2018-01-18T16:00:00.000Z","urlname":"knowaboutipv6","mathjax":true,"_content":"\nIPV6是什么\n---\n\n为了通过互联网进行通信，电脑和其他设备必须有发送者和接收者地址，\n这些数字地址称为互联网协议地址也就是我们常说的IP地址，常见的IP地址分为\nIPv4与IPv6两大类，其中IPV4地址就是我们平时所熟知的IP地址，\n而IPV6则为网际协议第6版，是网际协议(IP)的最新版本。\n\n<!-- more -->\n\n为什么要发展IPV6\n---\n随着互联网的普及以及使用人数大幅增长，人们对IP\n地址的需求也与日俱增。目前广泛采用的IPV4为32位地址，因此地址空间中只有4,294,967,296（$ 2^{32} $）个地址，况且这其中还会有\n一些用于特殊用途的保留地址，如专用网络（约1800万个地址）和多播地址（约2.7亿个地址），这减少了可在互联网上路由的地址数量。\n随着地址不断被分配给最终用户，IPv4地址枯竭问题也在随之产生。互联网工程任务组为了推迟这个问题的发生，推出了NAT和CIDR。但是这些过渡方案皆无法阻止地址枯竭问题的发生，只能减缓它的发生速度，最终的解决方案，仍然需要转换到IPv6。\n\nIPV6采用128位地址，地址空间具有 $ 2ˆ{128} $\n个地址，这个数字非常大，足以地球上每一粒沙子分配一个IPV6地址，由此从根本上解决了IP地址不够用的问题。\n\n关于IPV6的一些补充说明\n---\n\n> * IPV6不等于免费上网和高速上网\n\nV6的PT资源下载站、不计费上网等相关内容和教程在网上到处都是，容易给不明情况的人造成一种误解，即IPV6技术就是一种高速网络、免费网络技术。\n这都是不对的，所谓的高速下载和不计费，不过是因为国内V6的发展状况导致的临时现象罢了。\n\n由于现在国内V6主要是用的人相对较少，\n链路更加专用，所以速度自然就显得更快一些，\n估计是因为受众小，很多部署V6的高校暂时懒得针对V6进行计费，所以才有所谓的免费上网。不过据说有些高校已经针对V6流量进行单独计费了,这点博主不大清楚，本文主要针对和博主学校目前的网络状况进行探讨。\n更多的只是整理一下自己折腾的过程\n\n> * 严格来讲本集讨论的是6to4和4to6的各种实现过程\n\nReference\n---\n\n[Wikipedia](https://zh.wikipedia.org/wiki/IPv6)\n","source":"_posts/了解ipv6.md","raw":"---\nlayout: IPV6\ntitle: 了解IPV6\ndate: 2018-01-19\ncategories: IPV6\ntags: IPV6\nurlname: knowaboutipv6\nmathjax: true\n---\n\nIPV6是什么\n---\n\n为了通过互联网进行通信，电脑和其他设备必须有发送者和接收者地址，\n这些数字地址称为互联网协议地址也就是我们常说的IP地址，常见的IP地址分为\nIPv4与IPv6两大类，其中IPV4地址就是我们平时所熟知的IP地址，\n而IPV6则为网际协议第6版，是网际协议(IP)的最新版本。\n\n<!-- more -->\n\n为什么要发展IPV6\n---\n随着互联网的普及以及使用人数大幅增长，人们对IP\n地址的需求也与日俱增。目前广泛采用的IPV4为32位地址，因此地址空间中只有4,294,967,296（$ 2^{32} $）个地址，况且这其中还会有\n一些用于特殊用途的保留地址，如专用网络（约1800万个地址）和多播地址（约2.7亿个地址），这减少了可在互联网上路由的地址数量。\n随着地址不断被分配给最终用户，IPv4地址枯竭问题也在随之产生。互联网工程任务组为了推迟这个问题的发生，推出了NAT和CIDR。但是这些过渡方案皆无法阻止地址枯竭问题的发生，只能减缓它的发生速度，最终的解决方案，仍然需要转换到IPv6。\n\nIPV6采用128位地址，地址空间具有 $ 2ˆ{128} $\n个地址，这个数字非常大，足以地球上每一粒沙子分配一个IPV6地址，由此从根本上解决了IP地址不够用的问题。\n\n关于IPV6的一些补充说明\n---\n\n> * IPV6不等于免费上网和高速上网\n\nV6的PT资源下载站、不计费上网等相关内容和教程在网上到处都是，容易给不明情况的人造成一种误解，即IPV6技术就是一种高速网络、免费网络技术。\n这都是不对的，所谓的高速下载和不计费，不过是因为国内V6的发展状况导致的临时现象罢了。\n\n由于现在国内V6主要是用的人相对较少，\n链路更加专用，所以速度自然就显得更快一些，\n估计是因为受众小，很多部署V6的高校暂时懒得针对V6进行计费，所以才有所谓的免费上网。不过据说有些高校已经针对V6流量进行单独计费了,这点博主不大清楚，本文主要针对和博主学校目前的网络状况进行探讨。\n更多的只是整理一下自己折腾的过程\n\n> * 严格来讲本集讨论的是6to4和4to6的各种实现过程\n\nReference\n---\n\n[Wikipedia](https://zh.wikipedia.org/wiki/IPv6)\n","slug":"了解ipv6","published":1,"updated":"2020-06-16T17:49:52.704Z","comments":1,"photos":[],"link":"","_id":"ckbiy7y04000i5ojsxrhyvn4e","content":"<h2 id=\"IPV6是什么\"><a href=\"#IPV6是什么\" class=\"headerlink\" title=\"IPV6是什么\"></a>IPV6是什么</h2><p>为了通过互联网进行通信，电脑和其他设备必须有发送者和接收者地址，<br>这些数字地址称为互联网协议地址也就是我们常说的IP地址，常见的IP地址分为<br>IPv4与IPv6两大类，其中IPV4地址就是我们平时所熟知的IP地址，<br>而IPV6则为网际协议第6版，是网际协议(IP)的最新版本。</p>\n<a id=\"more\"></a>\n<h2 id=\"为什么要发展IPV6\"><a href=\"#为什么要发展IPV6\" class=\"headerlink\" title=\"为什么要发展IPV6\"></a>为什么要发展IPV6</h2><p>随着互联网的普及以及使用人数大幅增长，人们对IP<br>地址的需求也与日俱增。目前广泛采用的IPV4为32位地址，因此地址空间中只有4,294,967,296（$ 2^{32} $）个地址，况且这其中还会有<br>一些用于特殊用途的保留地址，如专用网络（约1800万个地址）和多播地址（约2.7亿个地址），这减少了可在互联网上路由的地址数量。<br>随着地址不断被分配给最终用户，IPv4地址枯竭问题也在随之产生。互联网工程任务组为了推迟这个问题的发生，推出了NAT和CIDR。但是这些过渡方案皆无法阻止地址枯竭问题的发生，只能减缓它的发生速度，最终的解决方案，仍然需要转换到IPv6。</p>\n<p>IPV6采用128位地址，地址空间具有 $ 2ˆ{128} $<br>个地址，这个数字非常大，足以地球上每一粒沙子分配一个IPV6地址，由此从根本上解决了IP地址不够用的问题。</p>\n<h2 id=\"关于IPV6的一些补充说明\"><a href=\"#关于IPV6的一些补充说明\" class=\"headerlink\" title=\"关于IPV6的一些补充说明\"></a>关于IPV6的一些补充说明</h2><blockquote>\n<ul>\n<li>IPV6不等于免费上网和高速上网</li>\n</ul>\n</blockquote>\n<p>V6的PT资源下载站、不计费上网等相关内容和教程在网上到处都是，容易给不明情况的人造成一种误解，即IPV6技术就是一种高速网络、免费网络技术。<br>这都是不对的，所谓的高速下载和不计费，不过是因为国内V6的发展状况导致的临时现象罢了。</p>\n<p>由于现在国内V6主要是用的人相对较少，<br>链路更加专用，所以速度自然就显得更快一些，<br>估计是因为受众小，很多部署V6的高校暂时懒得针对V6进行计费，所以才有所谓的免费上网。不过据说有些高校已经针对V6流量进行单独计费了,这点博主不大清楚，本文主要针对和博主学校目前的网络状况进行探讨。<br>更多的只是整理一下自己折腾的过程</p>\n<blockquote>\n<ul>\n<li>严格来讲本集讨论的是6to4和4to6的各种实现过程</li>\n</ul>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://zh.wikipedia.org/wiki/IPv6\" target=\"_blank\" rel=\"noopener\">Wikipedia</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"IPV6是什么\"><a href=\"#IPV6是什么\" class=\"headerlink\" title=\"IPV6是什么\"></a>IPV6是什么</h2><p>为了通过互联网进行通信，电脑和其他设备必须有发送者和接收者地址，<br>这些数字地址称为互联网协议地址也就是我们常说的IP地址，常见的IP地址分为<br>IPv4与IPv6两大类，其中IPV4地址就是我们平时所熟知的IP地址，<br>而IPV6则为网际协议第6版，是网际协议(IP)的最新版本。</p>","more":"<h2 id=\"为什么要发展IPV6\"><a href=\"#为什么要发展IPV6\" class=\"headerlink\" title=\"为什么要发展IPV6\"></a>为什么要发展IPV6</h2><p>随着互联网的普及以及使用人数大幅增长，人们对IP<br>地址的需求也与日俱增。目前广泛采用的IPV4为32位地址，因此地址空间中只有4,294,967,296（$ 2^{32} $）个地址，况且这其中还会有<br>一些用于特殊用途的保留地址，如专用网络（约1800万个地址）和多播地址（约2.7亿个地址），这减少了可在互联网上路由的地址数量。<br>随着地址不断被分配给最终用户，IPv4地址枯竭问题也在随之产生。互联网工程任务组为了推迟这个问题的发生，推出了NAT和CIDR。但是这些过渡方案皆无法阻止地址枯竭问题的发生，只能减缓它的发生速度，最终的解决方案，仍然需要转换到IPv6。</p>\n<p>IPV6采用128位地址，地址空间具有 $ 2ˆ{128} $<br>个地址，这个数字非常大，足以地球上每一粒沙子分配一个IPV6地址，由此从根本上解决了IP地址不够用的问题。</p>\n<h2 id=\"关于IPV6的一些补充说明\"><a href=\"#关于IPV6的一些补充说明\" class=\"headerlink\" title=\"关于IPV6的一些补充说明\"></a>关于IPV6的一些补充说明</h2><blockquote>\n<ul>\n<li>IPV6不等于免费上网和高速上网</li>\n</ul>\n</blockquote>\n<p>V6的PT资源下载站、不计费上网等相关内容和教程在网上到处都是，容易给不明情况的人造成一种误解，即IPV6技术就是一种高速网络、免费网络技术。<br>这都是不对的，所谓的高速下载和不计费，不过是因为国内V6的发展状况导致的临时现象罢了。</p>\n<p>由于现在国内V6主要是用的人相对较少，<br>链路更加专用，所以速度自然就显得更快一些，<br>估计是因为受众小，很多部署V6的高校暂时懒得针对V6进行计费，所以才有所谓的免费上网。不过据说有些高校已经针对V6流量进行单独计费了,这点博主不大清楚，本文主要针对和博主学校目前的网络状况进行探讨。<br>更多的只是整理一下自己折腾的过程</p>\n<blockquote>\n<ul>\n<li>严格来讲本集讨论的是6to4和4to6的各种实现过程</li>\n</ul>\n</blockquote>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://zh.wikipedia.org/wiki/IPv6\" target=\"_blank\" rel=\"noopener\">Wikipedia</a></p>"},{"layout":"树莓派3","title":"为树莓派3安装raspbian系统与LCD屏幕驱动","comments":0,"date":"2017-01-11T16:00:00.000Z","urlname":"rpi3-install_lcddivers","_content":"\n最近开始着手玩自己的树莓派3，首先我选择给自己的树莓派装一个raspbian系统。\n\n## 需要准备的物品\n\n- 树莓派\n- SD卡以及读卡器\n- 网线以及路由器\n\n<!-- more -->\n\n## 为树莓派3安装raspbian系统\n\n**步骤汇总**\n\n- 下载镜像包\n- 准备一张SD卡插入读卡器，将读卡器插入电脑，使用[Win32DiskImager](https://sourceforge.net/projects/win32diskimager/)工具将镜像包烧入\n- 将SD卡插入树莓派，加电启动\n- 查看树莓派分配的IP地址\n- 管理树莓派\n\n### 第一步、下载系统镜像包\n首先去树莓派官网下载最新的[raspbian镜像包](https://www.raspberrypi.org/downloads/raspbian/)，得到一个ZIP文件。\n\n### 第二步、烧写\n\n**解压上一步下载好的镜像包，得到.img后缀的文件**。将准备好的读卡器插入电脑，打开Win32DiskImager软件，如图所示。\n![Win32DiskImager](http://1.bp.blogspot.com/-mCG2Zsy-rLs/T9amHA1ICKI/AAAAAAAAEbc/YNOPUFOq3ek/s1600/Win32%2BDisk%2BImager.PNG)\n\n点击那个蓝色的小按钮选择img文件，然后确保Device内是你读卡器的盘符后点Write开始烧录。\n### 第三步、无显示器管理树莓派\n给树莓派供电后，用网线将树莓派插到路由器的LAN口，然后进路由器查看路由器给树莓派分配的IP地址。用putty工具连接树莓派，默认用户名为pi，密码是raspberry。\n>在Linux系统上,一般使用ssh pi@树莓派的ip地址 命令来直接连接树莓派。Windows底下一般使用putty，也有用SecureCRT的，看个人习惯。\n\n## 安装树莓派LCD屏幕驱动\n成功进入树莓派的终端以后，我还需要将买来的微雪家的3.5寸LCD驱动起来。参考[官网](http://www.waveshare.net/wiki/3.5inch_RPi_LCD_(A))的步骤，整理如下。\n\n- [下载驱动](http://www.waveshare.net/w/upload/9/95/LCD-show-160813.tar.gz)\n- 安装驱动\n\n### 第一步、将下载的LCD驱动文件上传到树莓派上\n利用[winscp](https://winscp.net/download/WinSCP-5.9.2-Setup.exe)工具连接树莓派，将文件拉到/boot目录即可。\n>linux系统下可以直接使用scp命令。需要注意的是，使用scp命令时，为了规避权限的问题，建议现将文件上传到/tmp中，然后再复制到需要的目录。假设文件存在本地的/tmp目录中，使用示例如下\n>\n>在本地输入\n>\n>  `scp /tmp/LCD-show-160813.tar.gz pi@192.168.41.214:/tmp/LCD-show-160813.tar.gz`\n> \n>其中`192.168.41.214`为树莓派IP地址，如此即可将文件上传到树莓派的/tmp目录中，然后只要将文件移动到／boot目录\n>\n>`mv LCD-show-160813.tar.gz ／boot／`\n\n成功上传到/boot目录以后，执行以下操作\n\n\tsudo tar xzvf /boot/LCD-show-YYMMDD.tar.gz\n\tcd LCD-show/\n\tsudo ./LCD35-show\n\n树莓派会自动重启，重启后即可正常使用。\n>如果比较懒，也可以直接使用LCD厂商提供的装好驱动的镜像，烧进去就能显像，适合新手。\n\n\n\n","source":"_posts/树莓派的系统安装与使用.md","raw":"---\nlayout: 树莓派3 \ntitle: 为树莓派3安装raspbian系统与LCD屏幕驱动\ncategories: Diy\ncomments: false\ndate: 2017-01-12\ntags: 树莓派入门\nurlname: rpi3-install_lcddivers\n---\n\n最近开始着手玩自己的树莓派3，首先我选择给自己的树莓派装一个raspbian系统。\n\n## 需要准备的物品\n\n- 树莓派\n- SD卡以及读卡器\n- 网线以及路由器\n\n<!-- more -->\n\n## 为树莓派3安装raspbian系统\n\n**步骤汇总**\n\n- 下载镜像包\n- 准备一张SD卡插入读卡器，将读卡器插入电脑，使用[Win32DiskImager](https://sourceforge.net/projects/win32diskimager/)工具将镜像包烧入\n- 将SD卡插入树莓派，加电启动\n- 查看树莓派分配的IP地址\n- 管理树莓派\n\n### 第一步、下载系统镜像包\n首先去树莓派官网下载最新的[raspbian镜像包](https://www.raspberrypi.org/downloads/raspbian/)，得到一个ZIP文件。\n\n### 第二步、烧写\n\n**解压上一步下载好的镜像包，得到.img后缀的文件**。将准备好的读卡器插入电脑，打开Win32DiskImager软件，如图所示。\n![Win32DiskImager](http://1.bp.blogspot.com/-mCG2Zsy-rLs/T9amHA1ICKI/AAAAAAAAEbc/YNOPUFOq3ek/s1600/Win32%2BDisk%2BImager.PNG)\n\n点击那个蓝色的小按钮选择img文件，然后确保Device内是你读卡器的盘符后点Write开始烧录。\n### 第三步、无显示器管理树莓派\n给树莓派供电后，用网线将树莓派插到路由器的LAN口，然后进路由器查看路由器给树莓派分配的IP地址。用putty工具连接树莓派，默认用户名为pi，密码是raspberry。\n>在Linux系统上,一般使用ssh pi@树莓派的ip地址 命令来直接连接树莓派。Windows底下一般使用putty，也有用SecureCRT的，看个人习惯。\n\n## 安装树莓派LCD屏幕驱动\n成功进入树莓派的终端以后，我还需要将买来的微雪家的3.5寸LCD驱动起来。参考[官网](http://www.waveshare.net/wiki/3.5inch_RPi_LCD_(A))的步骤，整理如下。\n\n- [下载驱动](http://www.waveshare.net/w/upload/9/95/LCD-show-160813.tar.gz)\n- 安装驱动\n\n### 第一步、将下载的LCD驱动文件上传到树莓派上\n利用[winscp](https://winscp.net/download/WinSCP-5.9.2-Setup.exe)工具连接树莓派，将文件拉到/boot目录即可。\n>linux系统下可以直接使用scp命令。需要注意的是，使用scp命令时，为了规避权限的问题，建议现将文件上传到/tmp中，然后再复制到需要的目录。假设文件存在本地的/tmp目录中，使用示例如下\n>\n>在本地输入\n>\n>  `scp /tmp/LCD-show-160813.tar.gz pi@192.168.41.214:/tmp/LCD-show-160813.tar.gz`\n> \n>其中`192.168.41.214`为树莓派IP地址，如此即可将文件上传到树莓派的/tmp目录中，然后只要将文件移动到／boot目录\n>\n>`mv LCD-show-160813.tar.gz ／boot／`\n\n成功上传到/boot目录以后，执行以下操作\n\n\tsudo tar xzvf /boot/LCD-show-YYMMDD.tar.gz\n\tcd LCD-show/\n\tsudo ./LCD35-show\n\n树莓派会自动重启，重启后即可正常使用。\n>如果比较懒，也可以直接使用LCD厂商提供的装好驱动的镜像，烧进去就能显像，适合新手。\n\n\n\n","slug":"树莓派的系统安装与使用","published":1,"updated":"2020-06-16T17:49:52.704Z","photos":[],"link":"","_id":"ckbiy7y09000m5ojsctla3066","content":"<p>最近开始着手玩自己的树莓派3，首先我选择给自己的树莓派装一个raspbian系统。</p>\n<h2 id=\"需要准备的物品\"><a href=\"#需要准备的物品\" class=\"headerlink\" title=\"需要准备的物品\"></a>需要准备的物品</h2><ul>\n<li>树莓派</li>\n<li>SD卡以及读卡器</li>\n<li>网线以及路由器</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"为树莓派3安装raspbian系统\"><a href=\"#为树莓派3安装raspbian系统\" class=\"headerlink\" title=\"为树莓派3安装raspbian系统\"></a>为树莓派3安装raspbian系统</h2><p><strong>步骤汇总</strong></p>\n<ul>\n<li>下载镜像包</li>\n<li>准备一张SD卡插入读卡器，将读卡器插入电脑，使用<a href=\"https://sourceforge.net/projects/win32diskimager/\" target=\"_blank\" rel=\"noopener\">Win32DiskImager</a>工具将镜像包烧入</li>\n<li>将SD卡插入树莓派，加电启动</li>\n<li>查看树莓派分配的IP地址</li>\n<li>管理树莓派</li>\n</ul>\n<h3 id=\"第一步、下载系统镜像包\"><a href=\"#第一步、下载系统镜像包\" class=\"headerlink\" title=\"第一步、下载系统镜像包\"></a>第一步、下载系统镜像包</h3><p>首先去树莓派官网下载最新的<a href=\"https://www.raspberrypi.org/downloads/raspbian/\" target=\"_blank\" rel=\"noopener\">raspbian镜像包</a>，得到一个ZIP文件。</p>\n<h3 id=\"第二步、烧写\"><a href=\"#第二步、烧写\" class=\"headerlink\" title=\"第二步、烧写\"></a>第二步、烧写</h3><p><strong>解压上一步下载好的镜像包，得到.img后缀的文件</strong>。将准备好的读卡器插入电脑，打开Win32DiskImager软件，如图所示。<br><img src=\"http://1.bp.blogspot.com/-mCG2Zsy-rLs/T9amHA1ICKI/AAAAAAAAEbc/YNOPUFOq3ek/s1600/Win32%2BDisk%2BImager.PNG\" alt=\"Win32DiskImager\"></p>\n<p>点击那个蓝色的小按钮选择img文件，然后确保Device内是你读卡器的盘符后点Write开始烧录。</p>\n<h3 id=\"第三步、无显示器管理树莓派\"><a href=\"#第三步、无显示器管理树莓派\" class=\"headerlink\" title=\"第三步、无显示器管理树莓派\"></a>第三步、无显示器管理树莓派</h3><p>给树莓派供电后，用网线将树莓派插到路由器的LAN口，然后进路由器查看路由器给树莓派分配的IP地址。用putty工具连接树莓派，默认用户名为pi，密码是raspberry。</p>\n<blockquote>\n<p>在Linux系统上,一般使用ssh pi@树莓派的ip地址 命令来直接连接树莓派。Windows底下一般使用putty，也有用SecureCRT的，看个人习惯。</p>\n</blockquote>\n<h2 id=\"安装树莓派LCD屏幕驱动\"><a href=\"#安装树莓派LCD屏幕驱动\" class=\"headerlink\" title=\"安装树莓派LCD屏幕驱动\"></a>安装树莓派LCD屏幕驱动</h2><p>成功进入树莓派的终端以后，我还需要将买来的微雪家的3.5寸LCD驱动起来。参考<a href=\"http://www.waveshare.net/wiki/3.5inch_RPi_LCD_(A\" target=\"_blank\" rel=\"noopener\">官网</a>)的步骤，整理如下。</p>\n<ul>\n<li><a href=\"http://www.waveshare.net/w/upload/9/95/LCD-show-160813.tar.gz\" target=\"_blank\" rel=\"noopener\">下载驱动</a></li>\n<li>安装驱动</li>\n</ul>\n<h3 id=\"第一步、将下载的LCD驱动文件上传到树莓派上\"><a href=\"#第一步、将下载的LCD驱动文件上传到树莓派上\" class=\"headerlink\" title=\"第一步、将下载的LCD驱动文件上传到树莓派上\"></a>第一步、将下载的LCD驱动文件上传到树莓派上</h3><p>利用<a href=\"https://winscp.net/download/WinSCP-5.9.2-Setup.exe\" target=\"_blank\" rel=\"noopener\">winscp</a>工具连接树莓派，将文件拉到/boot目录即可。</p>\n<blockquote>\n<p>linux系统下可以直接使用scp命令。需要注意的是，使用scp命令时，为了规避权限的问题，建议现将文件上传到/tmp中，然后再复制到需要的目录。假设文件存在本地的/tmp目录中，使用示例如下</p>\n<p>在本地输入</p>\n<p> <code>scp /tmp/LCD-show-160813.tar.gz pi@192.168.41.214:/tmp/LCD-show-160813.tar.gz</code></p>\n<p>其中<code>192.168.41.214</code>为树莓派IP地址，如此即可将文件上传到树莓派的/tmp目录中，然后只要将文件移动到／boot目录</p>\n<p><code>mv LCD-show-160813.tar.gz ／boot／</code></p>\n</blockquote>\n<p>成功上传到/boot目录以后，执行以下操作</p>\n<pre><code>sudo tar xzvf /boot/LCD-show-YYMMDD.tar.gz\ncd LCD-show/\nsudo ./LCD35-show\n</code></pre><p>树莓派会自动重启，重启后即可正常使用。</p>\n<blockquote>\n<p>如果比较懒，也可以直接使用LCD厂商提供的装好驱动的镜像，烧进去就能显像，适合新手。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>最近开始着手玩自己的树莓派3，首先我选择给自己的树莓派装一个raspbian系统。</p>\n<h2 id=\"需要准备的物品\"><a href=\"#需要准备的物品\" class=\"headerlink\" title=\"需要准备的物品\"></a>需要准备的物品</h2><ul>\n<li>树莓派</li>\n<li>SD卡以及读卡器</li>\n<li>网线以及路由器</li>\n</ul>","more":"<h2 id=\"为树莓派3安装raspbian系统\"><a href=\"#为树莓派3安装raspbian系统\" class=\"headerlink\" title=\"为树莓派3安装raspbian系统\"></a>为树莓派3安装raspbian系统</h2><p><strong>步骤汇总</strong></p>\n<ul>\n<li>下载镜像包</li>\n<li>准备一张SD卡插入读卡器，将读卡器插入电脑，使用<a href=\"https://sourceforge.net/projects/win32diskimager/\" target=\"_blank\" rel=\"noopener\">Win32DiskImager</a>工具将镜像包烧入</li>\n<li>将SD卡插入树莓派，加电启动</li>\n<li>查看树莓派分配的IP地址</li>\n<li>管理树莓派</li>\n</ul>\n<h3 id=\"第一步、下载系统镜像包\"><a href=\"#第一步、下载系统镜像包\" class=\"headerlink\" title=\"第一步、下载系统镜像包\"></a>第一步、下载系统镜像包</h3><p>首先去树莓派官网下载最新的<a href=\"https://www.raspberrypi.org/downloads/raspbian/\" target=\"_blank\" rel=\"noopener\">raspbian镜像包</a>，得到一个ZIP文件。</p>\n<h3 id=\"第二步、烧写\"><a href=\"#第二步、烧写\" class=\"headerlink\" title=\"第二步、烧写\"></a>第二步、烧写</h3><p><strong>解压上一步下载好的镜像包，得到.img后缀的文件</strong>。将准备好的读卡器插入电脑，打开Win32DiskImager软件，如图所示。<br><img src=\"http://1.bp.blogspot.com/-mCG2Zsy-rLs/T9amHA1ICKI/AAAAAAAAEbc/YNOPUFOq3ek/s1600/Win32%2BDisk%2BImager.PNG\" alt=\"Win32DiskImager\"></p>\n<p>点击那个蓝色的小按钮选择img文件，然后确保Device内是你读卡器的盘符后点Write开始烧录。</p>\n<h3 id=\"第三步、无显示器管理树莓派\"><a href=\"#第三步、无显示器管理树莓派\" class=\"headerlink\" title=\"第三步、无显示器管理树莓派\"></a>第三步、无显示器管理树莓派</h3><p>给树莓派供电后，用网线将树莓派插到路由器的LAN口，然后进路由器查看路由器给树莓派分配的IP地址。用putty工具连接树莓派，默认用户名为pi，密码是raspberry。</p>\n<blockquote>\n<p>在Linux系统上,一般使用ssh pi@树莓派的ip地址 命令来直接连接树莓派。Windows底下一般使用putty，也有用SecureCRT的，看个人习惯。</p>\n</blockquote>\n<h2 id=\"安装树莓派LCD屏幕驱动\"><a href=\"#安装树莓派LCD屏幕驱动\" class=\"headerlink\" title=\"安装树莓派LCD屏幕驱动\"></a>安装树莓派LCD屏幕驱动</h2><p>成功进入树莓派的终端以后，我还需要将买来的微雪家的3.5寸LCD驱动起来。参考<a href=\"http://www.waveshare.net/wiki/3.5inch_RPi_LCD_(A\" target=\"_blank\" rel=\"noopener\">官网</a>)的步骤，整理如下。</p>\n<ul>\n<li><a href=\"http://www.waveshare.net/w/upload/9/95/LCD-show-160813.tar.gz\" target=\"_blank\" rel=\"noopener\">下载驱动</a></li>\n<li>安装驱动</li>\n</ul>\n<h3 id=\"第一步、将下载的LCD驱动文件上传到树莓派上\"><a href=\"#第一步、将下载的LCD驱动文件上传到树莓派上\" class=\"headerlink\" title=\"第一步、将下载的LCD驱动文件上传到树莓派上\"></a>第一步、将下载的LCD驱动文件上传到树莓派上</h3><p>利用<a href=\"https://winscp.net/download/WinSCP-5.9.2-Setup.exe\" target=\"_blank\" rel=\"noopener\">winscp</a>工具连接树莓派，将文件拉到/boot目录即可。</p>\n<blockquote>\n<p>linux系统下可以直接使用scp命令。需要注意的是，使用scp命令时，为了规避权限的问题，建议现将文件上传到/tmp中，然后再复制到需要的目录。假设文件存在本地的/tmp目录中，使用示例如下</p>\n<p>在本地输入</p>\n<p> <code>scp /tmp/LCD-show-160813.tar.gz pi@192.168.41.214:/tmp/LCD-show-160813.tar.gz</code></p>\n<p>其中<code>192.168.41.214</code>为树莓派IP地址，如此即可将文件上传到树莓派的/tmp目录中，然后只要将文件移动到／boot目录</p>\n<p><code>mv LCD-show-160813.tar.gz ／boot／</code></p>\n</blockquote>\n<p>成功上传到/boot目录以后，执行以下操作</p>\n<pre><code>sudo tar xzvf /boot/LCD-show-YYMMDD.tar.gz\ncd LCD-show/\nsudo ./LCD35-show\n</code></pre><p>树莓派会自动重启，重启后即可正常使用。</p>\n<blockquote>\n<p>如果比较懒，也可以直接使用LCD厂商提供的装好驱动的镜像，烧进去就能显像，适合新手。</p>\n</blockquote>"}],"PostAsset":[{"_id":"source/_posts/V6初识/1-1.png","slug":"1-1.png","post":"ckbiy7xzr000b5ojszrofqlk4","modified":0,"renderable":0},{"_id":"source/_posts/V6初识/1-2.png","slug":"1-2.png","post":"ckbiy7xzr000b5ojszrofqlk4","modified":0,"renderable":0},{"_id":"source/_posts/V6初识/1.png","slug":"1.png","post":"ckbiy7xzr000b5ojszrofqlk4","modified":0,"renderable":0},{"_id":"source/_posts/V6初识/2.png","slug":"2.png","post":"ckbiy7xzr000b5ojszrofqlk4","modified":0,"renderable":0},{"_id":"source/_posts/V6初识/3.png","slug":"3.png","post":"ckbiy7xzr000b5ojszrofqlk4","modified":0,"renderable":0},{"_id":"source/_posts/V6初识/4.png","slug":"4.png","post":"ckbiy7xzr000b5ojszrofqlk4","modified":0,"renderable":0},{"_id":"source/_posts/V6初识/5.png","slug":"5.png","post":"ckbiy7xzr000b5ojszrofqlk4","modified":0,"renderable":0},{"_id":"source/_posts/V6初识/6.png","slug":"6.png","post":"ckbiy7xzr000b5ojszrofqlk4","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckbiy7xz600005ojshxyhy2em","category_id":"ckbiy7xzg00035ojsmjp3go2g","_id":"ckbiy7xzx000d5ojsvhmdlrpv"},{"post_id":"ckbiy7xzc00025ojs1bqx0kth","category_id":"ckbiy7xzp00085ojstk35m0j4","_id":"ckbiy7y07000k5ojsdewqpdyd"},{"post_id":"ckbiy7xzk00055ojsbi8lka3t","category_id":"ckbiy7xzp00085ojstk35m0j4","_id":"ckbiy7y0c000p5ojsmw8kl6sn"},{"post_id":"ckbiy7xzm00065ojsgmd7g26b","category_id":"ckbiy7xzp00085ojstk35m0j4","_id":"ckbiy7y0e000s5ojszlpsfpk4"},{"post_id":"ckbiy7xzo00075ojskl6ggh12","category_id":"ckbiy7y0c000o5ojs0a20njuh","_id":"ckbiy7y0g000w5ojs2c8yqvhi"},{"post_id":"ckbiy7xzr000b5ojszrofqlk4","category_id":"ckbiy7y0e000t5ojsam32etv6","_id":"ckbiy7y0i00115ojs2duti89h"},{"post_id":"ckbiy7xzu000c5ojsvg9tecay","category_id":"ckbiy7y0e000t5ojsam32etv6","_id":"ckbiy7y0j00155ojse9ffgy9m"},{"post_id":"ckbiy7y00000g5ojsduvy599n","category_id":"ckbiy7y0e000t5ojsam32etv6","_id":"ckbiy7y0l00195ojsy5uepsrw"},{"post_id":"ckbiy7y04000i5ojsxrhyvn4e","category_id":"ckbiy7y0e000t5ojsam32etv6","_id":"ckbiy7y0l001c5ojs08d9flri"},{"post_id":"ckbiy7y09000m5ojsctla3066","category_id":"ckbiy7y0k00185ojs6tch22tr","_id":"ckbiy7y0m001e5ojs0a5l7e74"}],"PostTag":[{"post_id":"ckbiy7xz600005ojshxyhy2em","tag_id":"ckbiy7xzj00045ojs1e6i8cly","_id":"ckbiy7xzq000a5ojspgakghjn"},{"post_id":"ckbiy7xzc00025ojs1bqx0kth","tag_id":"ckbiy7xzp00095ojsanwkqw47","_id":"ckbiy7y03000h5ojsd9ir90x2"},{"post_id":"ckbiy7xzk00055ojsbi8lka3t","tag_id":"ckbiy7xzj00045ojs1e6i8cly","_id":"ckbiy7y0a000n5ojsyerfmklc"},{"post_id":"ckbiy7xzm00065ojsgmd7g26b","tag_id":"ckbiy7xzp00095ojsanwkqw47","_id":"ckbiy7y0d000r5ojs2vq49rrt"},{"post_id":"ckbiy7xzo00075ojskl6ggh12","tag_id":"ckbiy7y0c000q5ojsdnhat9ft","_id":"ckbiy7y0f000v5ojsxo3c4l7d"},{"post_id":"ckbiy7xzr000b5ojszrofqlk4","tag_id":"ckbiy7y0f000u5ojs19ow8s9n","_id":"ckbiy7y0h000z5ojseuopbxh0"},{"post_id":"ckbiy7xzu000c5ojsvg9tecay","tag_id":"ckbiy7y0f000u5ojs19ow8s9n","_id":"ckbiy7y0j00135ojsssbld118"},{"post_id":"ckbiy7y00000g5ojsduvy599n","tag_id":"ckbiy7y0f000u5ojs19ow8s9n","_id":"ckbiy7y0k00175ojs0w5p2qfd"},{"post_id":"ckbiy7y04000i5ojsxrhyvn4e","tag_id":"ckbiy7y0f000u5ojs19ow8s9n","_id":"ckbiy7y0l001b5ojs7z96fggw"},{"post_id":"ckbiy7y09000m5ojsctla3066","tag_id":"ckbiy7y0l001a5ojsv2ra95yi","_id":"ckbiy7y0l001d5ojs25xbkt5v"}],"Tag":[{"name":"Network","_id":"ckbiy7xzj00045ojs1e6i8cly"},{"name":"Mac OS","_id":"ckbiy7xzp00095ojsanwkqw47"},{"name":"电子","_id":"ckbiy7y0c000q5ojsdnhat9ft"},{"name":"IPV6","_id":"ckbiy7y0f000u5ojs19ow8s9n"},{"name":"树莓派入门","_id":"ckbiy7y0l001a5ojsv2ra95yi"}]}}